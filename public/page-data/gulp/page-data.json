{"componentChunkName":"component---src-templates-post-js","path":"/gulp/","result":{"data":{"wordpressPost":{"id":"3122056b-2799-5772-aaf9-26e7d8c33f91","title":"静的HTMLサイト制作を楽にするGulpの基本的な使い方【Webコーダー向け】","slug":"gulp","content":"<p>Gulpは、いろんな作業を自動化してくれるツールです。</p>\n<div class=\"box\">\n<ul>\n<li>CSSやHTMLを保存したらブラウザ側も自動的にリロード</li>\n<li>Sassが保存されたタイミングで自動コンパイル</li>\n<li>CSSにベンダープレフィックスを自動で付与</li>\n<li>CSS、JavaScriptのソースを圧縮</li>\n<li>画像を圧縮</li>\n</ul>\n</div>\n<p>特に自動リロードが初めて動いたときは感動した覚えがあります（なんて楽なんだ&#8230;と）</p>\n<p>静的HTMLサイトを制作するための、わたしの中で「<strong class=\"marker\">楽になったな</strong>」というお役立ちGulp処理を紹介していきます。効率化できるところはどんどん効率化してコーディングのスピードアップを図りましょう！</p>\n<div class=\"chat\"><figure class=\"chat-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"><figcaption>はにわまん</figcaption></figure><div class=\"chat-content\">機械に任せられる部分はどんどん自動化させていきましょう！</div></div>\n<div id=\"toc_container\" class=\"no_bullets\"><p class=\"toc_title\">目次</p><ul class=\"toc_list\"><li><a href=\"#Gulp\"><span class=\"toc_number toc_depth_1\">1</span> Gulpのインストール</a></li><li><a href=\"#Gulp-2\"><span class=\"toc_number toc_depth_1\">2</span> Gulpを使うなら黒い画面と仲良くなること</a></li><li><a href=\"#Gulp-3\"><span class=\"toc_number toc_depth_1\">3</span> Gulpの使い方（概要）</a><ul><li><a href=\"#Gulp-4\"><span class=\"toc_number toc_depth_2\">3.1</span> Gulpはフォルダ単位で管理</a></li><li><a href=\"#Gulp-5\"><span class=\"toc_number toc_depth_2\">3.2</span> Gulpパッケージをインストール</a></li><li><a href=\"#gulpfilejs\"><span class=\"toc_number toc_depth_2\">3.3</span> 自動化する内容をgulpfile.jsに記述</a></li></ul></li><li><a href=\"#gulpfilejs-2\"><span class=\"toc_number toc_depth_1\">4</span> gulpfile.jsの書き方</a><ul><li><a href=\"#gulpfilejs-3\"><span class=\"toc_number toc_depth_2\">4.1</span> gulpfile.jsの設置場所</a></li><li><a href=\"#Gulp-6\"><span class=\"toc_number toc_depth_2\">4.2</span> Gulpでメッセージを出す命令を記述</a></li><li><a href=\"#i\"><span class=\"toc_number toc_depth_2\">4.3</span> 識別名を省略する書き方</a></li></ul></li><li><a href=\"#Gulp-7\"><span class=\"toc_number toc_depth_1\">5</span> Gulpで自動化させたい処理</a><ul><li><a href=\"#i-2\"><span class=\"toc_number toc_depth_2\">5.1</span> ファイル保存時のブラウザ自動更新</a></li><li><a href=\"#CSS\"><span class=\"toc_number toc_depth_2\">5.2</span> CSSコードの圧縮</a></li><li><a href=\"#JavaScript\"><span class=\"toc_number toc_depth_2\">5.3</span> JavaScriptコードの圧縮</a></li><li><a href=\"#i-3\"><span class=\"toc_number toc_depth_2\">5.4</span> 画像の圧縮</a></li><li><a href=\"#Sass\"><span class=\"toc_number toc_depth_2\">5.5</span> Sassコンパイル</a></li><li><a href=\"#Sass-2\"><span class=\"toc_number toc_depth_2\">5.6</span> Sassが保存されたら実行</a></li><li><a href=\"#i-4\"><span class=\"toc_number toc_depth_2\">5.7</span> ベンダープレフィックス</a></li></ul></li><li><a href=\"#i-5\"><span class=\"toc_number toc_depth_1\">6</span> おわり</a></li></ul></div>\n<h2 id=\"install\"><span id=\"Gulp\">Gulpのインストール</span></h2>\n<p>Gulpの導入については、以下の記事で紹介しています。</p>\n<blockquote class=\"wp-embedded-content\" data-secret=\"DQt9uhHsfA\"><p><a href=\"https://haniwaman.com/gulp-windows/\">5分で終わる！WindowsでGulpを使えるようになるまでの手順</a></p></blockquote>\n<p><iframe title=\"&#8220;5分で終わる！WindowsでGulpを使えるようになるまでの手順&#8221; &#8212; HPcode\" class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" src=\"https://haniwaman.com/gulp-windows/embed/#?secret=DQt9uhHsfA\" data-secret=\"DQt9uhHsfA\" width=\"500\" height=\"282\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe></p>\n<blockquote><p>gulpをインストールするためには、npmが必要で、<br />\nnpmを使うためにはNode.jsが必要なので、Node.js → npm → gulp という順番でインストールしていくことになります。</p></blockquote>\n<p>ちょっと面倒ではありますが、順番に導入していきましょう！</p>\n<p><code>gulp -v</code>と入力したら、バージョンが表示されるところまで進めておいてください。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-0\">コピー</span><code id=\"code-0\" class=\"cli nohighlight hljs\">gulp -v\r\n[11:39:10] CLI version 2.0.1</code></pre>\n<h2><span id=\"Gulp-2\">Gulpを使うなら黒い画面と仲良くなること</span></h2>\n<p>特にWindowsユーザーが毛嫌いすると思う（わたしがそうだった）ので、最初の方に言及しておきますが、<strong class=\"marker\">Gulpはコマンドで動作する</strong>ものです。</p>\n<p>以下のようなコマンドで色々動かすことができるものですね。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-1\">コピー</span><code id=\"code-1\" class=\"cli nohighlight hljs\">gulp hogehoge\r\n</code></pre>\n<p>個人的には、「<strong>自動化といいつつ結局コマンド入力するって作業が発生してるやん！</strong>」って思っていたのですが、厳密には<strong>「作業量が減る」というニュアンスが正しい</strong>のかもしれません。</p>\n<p>Gulpを使っていると以下のような点が楽になったなと感じています。</p>\n<ul>\n<li>複数の処理をまとめて1回で実行できる</li>\n<li>1回コマンドで動かしておけばファイル保存時に裏で実行してくれる</li>\n<li>ヒューマンエラーを防げる</li>\n</ul>\n<p>特に、ヒューマンエラーの観点が大きいと思います。Sassをコンパイルして、CSSやJavaScriptを圧縮して、CSSのベンダープレフィックスを付けて、みたいな作業って人が管理した時に「漏れる」というリスクがあります。</p>\n<p>Gulpで上記の作業をファイル保存のたびに行うという設定にしておけば、確実にその生成物はできあがるわけですね。</p>\n<p><span class=\"font-l\">「<strong class=\"marker\">管理が楽になりミスが減る</strong>」</span></p>\n<p>そう考えると素敵なツールだと思いませんか。</p>\n<h2><span id=\"Gulp-3\">Gulpの使い方（概要）</span></h2>\n<p><strong class=\"marker\">Gulpはフォルダ単位でパッケージをインストールして、自動化する内容を<span class=\"filename\">gulpfile.js</span>に記述して動かしていきます。</strong></p>\n<p>もうこの時点で呪文のような文章ですよね&#8230;。1つずつ分けて紹介していきます。</p>\n<h3><span id=\"Gulp-4\">Gulpはフォルダ単位で管理</span></h3>\n<p>Gulpは基本的に、パソコン本体にインストールするということはありません。（<code>gulp</code>自体は入れておいてもいいかもしれませんが）</p>\n<p>フォルダ群ごとに管理して、プロジェクトAにはGulp A。プロジェクトBにはGulp B、といったように自動化する内容はプロジェクトごとに管理するべきだと言われています。</p>\n<p>パソコンに依存してたら、異なる環境で作業した時に、同じ結果にならずに、エラーのもとです。<br />\n（せっかくヒューマンエラーを防ぐべく導入したGulpが環境を変えて作業するというヒューマンエラーを引き起こしていては意味がないですね&#8230;）</p>\n<p>ということで、Gulpはフォルダ（プロジェクト単位）で管理させます。</p>\n<h3><span id=\"Gulp-5\">Gulpパッケージをインストール</span></h3>\n<p>順番に呼んでいただけている方であれば、ご自身のパソコンに<a href=\"#install\">Gulpをインストール</a>しているかと思います。ただ、gulpをインストールしただけでは、なにも自動化できません。</p>\n<p>Gulpのパッケージをどんどんインストールして拡張していく必要があります。（Chromeの拡張機能やWordPressのプラグインのようなイメージをしていただければと分かりやすいかもしれません）</p>\n<ul>\n<li>CSSを圧縮したかったら、このパッケージ</li>\n<li>ブラウザを自動でリロードしたいなら、このパッケージ</li>\n<li>Sassのコンパイルをしたいなら、このパッケージ</li>\n</ul>\n<p>といった具合ですね。</p>\n<p>Gulpのパッケージは<code>npm install</code>コマンドでどんどん入れていきます。・・・はい、またコマンドですね。Gulpを使うと決意した方はコマンドと少なからず仲良くする必要があります。</p>\n<h3><span id=\"gulpfilejs\">自動化する内容を<span class=\"filename\">gulpfile.js</span>に記述</span></h3>\n<p>そして、プロジェクトにインストールしたパッケージでどういった作業をさせるかは、<span class=\"filename\">gulpfile.js</span>に記述していきます。</p>\n<p>記載するのは大別すると、以下の2点。</p>\n<ul>\n<li>読み込むパッケージの指定</li>\n<li>処理の内容</li>\n</ul>\n<p>具体的な書き方は、次で紹介していきます。</p>\n<h2><span id=\"gulpfilejs-2\"><span class=\"filename\">gulpfile.js</span>の書き方</span></h2>\n<p>全然自動化と関係ないですが、<span class=\"filename\">gulpfile.js</span>の書き方をなんとなく理解するために、めっちゃ簡単な処理を書いていきましょう。</p>\n<h3><span id=\"gulpfilejs-3\"><span class=\"filename\">gulpfile.js</span>の設置場所</span></h3>\n<p><span class=\"filename\">gulpfile.js</span>は、プロジェクトフォルダの直下に配置してください。</p>\n<p>静的なWebサイトであれば、トップページの<span class=\"filename\">index.html</span>と同じ階層です。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2018/07/gulp.png\" alt=\"\" class=\"alignnone size-full wp-image-7768\" /></p>\n<h3><span id=\"Gulp-6\">Gulpでメッセージを出す命令を記述</span></h3>\n<p>では、めっちゃ簡単な命令を<span class=\"filename\">gulpfile.js</span>に書いてみます。実行すると「HelloWorld!」とメッセージを表示してくれる処理です。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-2\">コピー</span><code id=\"code-2\" class=\"js\">var gulp = require('gulp');\r\n\r\ngulp.task('test', function() {\r\n\tconsole.log('HelloWorld!');\r\n});</code></pre>\n<p>ターミナルではまず、<span class=\"filename\">gulpfile.js</span>を格納している（今回の例だと<span class=\"folder\">test</span>フォルダ）に移動しておいてください。<br />\n※ 以下はご利用の環境によってtestまでのパスが異なるのでご注意を&#8230;</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-3\">コピー</span><code id=\"code-3\" class=\"cli nohighlight hljs\">cd test\r\n</code></pre>\n<p>そして、ターミナルから<code>gulp test</code>と打つことで実行できます。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2018/07/gulp2-700x151.png\" alt=\"\" class=\"alignnone size-medium wp-image-7769\" srcset=\"https://haniwaman.com/wp-content/uploads/2018/07/gulp2-700x151.png 700w, https://haniwaman.com/wp-content/uploads/2018/07/gulp2.png 767w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p><code>var gulp = require('gulp');</code>がパッケージの読み込みですね。<code>gulp</code>が大本なので必須で必要な読み込みです。</p>\n<p><code>gulp.task('test', function() {</code>は、先ほど読み込んだ「gulpで処理を動かしますよ」という記述です。<code>gulp.task()</code>はとりあえず、暗記しておいてください。</p>\n<p><code>'test'</code>の部分は、実行するときの「識別名」です。<code>gult test</code>と実行して処理が動いてメッセージが表示されたように、ここの値が、その処理を動かすキーとなります。</p>\n<p><code>function() {}</code>に、実行した時の処理内容を記載します。今回はめっちゃ簡単な<code>console.log('HelloWorld!');</code>の命令を書いたので、結果として「HelloWorld!」が表示されたわけです。</p>\n<h3><span id=\"i\">識別名を省略する書き方</span></h3>\n<p>先ほど<code>gulp test</code>で実行させましたが、これを<code>gulp</code>だけで動かせる書き方があります。</p>\n<p>メインの処理では、都度<code>gulp hogehoge</code>と打つのは面倒なので、この書き方も確認しておきましょう。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-4\">コピー</span><code id=\"code-4\" class=\"js\">var gulp = require('gulp');\r\n\r\ngulp.task('default', function() {\r\n\tconsole.log('HelloWorld!');\r\n});</code></pre>\n<p><code>'test'</code>と書いていた箇所を、<code>'default'</code>と変更しました。これで<code>gulp</code>のコマンドだけで動くようになります。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2018/07/gulp4.png\" alt=\"\" class=\"alignnone size-full wp-image-7780\" /></p>\n<h2><span id=\"Gulp-7\">Gulpで自動化させたい処理</span></h2>\n<p>わたしがGulpで自動化させている作業をまとめました。</p>\n<p><span class=\"filename\">gulpfile.js</span>が配置されたフォルダに移動しておいてください。</p>\n<p>以下のプロジェクトを想定して設定しています。cssやjsの配置場所など合わせてもらうと、スムーズにいくかと思います。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2018/07/gulp.png\" alt=\"\" class=\"alignnone size-full wp-image-7768\" /></p>\n<p>またターミナルは<code>cd test</code>などで、<span class=\"folder\">test</span>フォルダに移動しておいてください。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2018/07/gulp3.png\" alt=\"\" class=\"alignnone size-full wp-image-7774\" /></p>\n<h3><span id=\"i-2\">ファイル保存時のブラウザ自動更新</span></h3>\n<p>静的なHTMLコーディングを行う上で、これがなかったらもう仕事にならないレベルで重宝しています。</p>\n<p>HTMLファイル、CSSファイル、JavaScriptファイルが保存されたタイミングでリロードが走るようになっています。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-5\">コピー</span><code id=\"code-5\" class=\"cli nohighlight hljs\">npm install --save-dev browser-sync\r\n</code></pre>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-6\">コピー</span><code id=\"code-6\" class=\"js\">var gulp         = require('gulp');\r\nvar browserSync  = require('browser-sync');\r\n\r\ngulp.task('browser-sync', function() {\r\n\tbrowserSync.init({\r\n\t\t\tserver: {\r\n\t\t\t\t\tbaseDir: \"./\",\r\n\t\t\t\t\tindex: \"index.html\"\r\n\t\t\t}\r\n\t});\r\n});\r\n\r\ngulp.task('bs-reload', function () {\r\n\tbrowserSync.reload();\r\n});\r\n\r\ngulp.task( 'default', gulp.series( gulp.parallel( 'browser-sync' ) ), function() {\r\n\tgulp.watch( './*.html', gulp.task( 'bs-reload' ) );\r\n\tgulp.watch( './css/*.css', gulp.task( 'bs-reload' ) );\r\n\tgulp.watch( './js/*.js', gulp.task( 'bs-reload' ) );\r\n});</code></pre>\n<p><code>gulp.task('default')</code>で指定しているので、<code>gulp</code>コマンドだけで動きます。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-7\">コピー</span><code id=\"code-7\" class=\"cli nohighlight hljs\">gulp\r\n</code></pre>\n<p>動かすとブラウザが立ち上がります。そして、HTML、CSS、JavaScriptファイルのいずれかを更新すると、ブラウザも連動して更新されるようになります。</p>\n<p>例）HTMLを更新（※ 左上のロゴの部分に注目）<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2018/07/gulp.gif\" alt=\"\" class=\"alignnone size-medium wp-image-7776\" /></p>\n<h3><span id=\"CSS\">CSSコードの圧縮</span></h3>\n<p>「gulp-clean-css」のインストール。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-8\">コピー</span><code id=\"code-8\" class=\"cli nohighlight hljs\">npm install gulp-clean-css --save-dev\r\n</code></pre>\n<p>「gulp-rename」のインストール（.minと名前を変えて保存するため）</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-9\">コピー</span><code id=\"code-9\" class=\"cli nohighlight hljs\">npm install gulp-rename --save-dev\r\n</code></pre>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-10\">コピー</span><code id=\"code-10\" class=\"js\">var cleanCSS = require('gulp-clean-css');\r\nvar rename   = require(\"gulp-rename\");\r\n\r\ngulp.task('mincss', function() {\r\n\treturn gulp.src(\"css/*.css\")\r\n\t\t.pipe(cleanCSS())\r\n\t\t.pipe(rename({ suffix: '.min' }))\r\n\t\t.pipe(gulp.dest('css/'));\r\n});</code></pre>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-11\">コピー</span><code id=\"code-11\" class=\"cli nohighlight hljs\">gulp mincss\r\n</code></pre>\n<p>圧縮されたcssファイルが作られました。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2018/07/gulp7.png\" alt=\"\" class=\"alignnone size-full wp-image-7810\" /></p>\n<h3><span id=\"JavaScript\">JavaScriptコードの圧縮</span></h3>\n<p>「gulp-uglify」のインストール。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-12\">コピー</span><code id=\"code-12\" class=\"cli nohighlight hljs\">npm install gulp-uglify --save-dev\r\n</code></pre>\n<p>「gulp-rename」のインストール（.minと名前を変えて保存するため）</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-9\">コピー</span><code id=\"code-9\" class=\"cli nohighlight hljs\">npm install gulp-rename --save-dev\r\n</code></pre>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-14\">コピー</span><code id=\"code-14\" class=\"js\">var uglify = require('gulp-uglify');\r\nvar rename = require(\"gulp-rename\");\r\n\r\ngulp.task('minjs', function() {\r\n\treturn gulp.src(\"js/*.js\")\r\n\t\t.pipe(uglify())\r\n\t\t.pipe(rename({ suffix: '.min' }))\r\n\t\t.pipe(gulp.dest('js/'));\r\n});</code></pre>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-15\">コピー</span><code id=\"code-15\" class=\"cli nohighlight hljs\">gulp minjs\r\n</code></pre>\n<p>圧縮されたjsファイルが作られました。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2018/07/gulp6-1.png\" alt=\"\" class=\"alignnone size-full wp-image-7808\" /></p>\n<h3><span id=\"i-3\">画像の圧縮</span></h3>\n<p>「gulp-imagemin」のインストール</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-16\">コピー</span><code id=\"code-16\" class=\"cli nohighlight hljs\">npm install gulp-imagemin --save-dev\r\n</code></pre>\n<p>「imagemin-pngquant」のインストール</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-17\">コピー</span><code id=\"code-17\" class=\"cli nohighlight hljs\">npm install imagemin-pngquant --save-dev\r\n</code></pre>\n<p>「imagemin-mozjpeg」のインストール</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-18\">コピー</span><code id=\"code-18\" class=\"cli nohighlight hljs\">npm install imagemin-mozjpeg --save-dev\r\n</code></pre>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-19\">コピー</span><code id=\"code-19\" class=\"js\">var imagemin = require(\"gulp-imagemin\");\r\nvar imageminPngquant = require(\"imagemin-pngquant\");\r\nvar imageminMozjpeg = require(\"imagemin-mozjpeg\");\r\n\r\nvar imageminOption = [\r\n\timageminPngquant({ quality: '65-80' }),\r\n\timageminMozjpeg({ quality: 85 }),\r\n\timagemin.gifsicle({\r\n\t\tinterlaced: false,\r\n\t\toptimizationLevel: 1,\r\n\t\tcolors: 256\r\n\t}),\r\n\timagemin.jpegtran(),\r\n\timagemin.optipng(),\r\n\timagemin.svgo()\r\n];\r\n\r\ngulp.task( 'imagemin', function() {\r\n\treturn gulp\r\n\t\t.src( './img/base/*.{png,jpg,gif,svg}' )\r\n\t\t.pipe( imagemin( imageminOption ) )\r\n\t\t.pipe( gulp.dest( './img' ) );\r\n});</code></pre>\n<p><span class=\"folder\">./img/base/</span>ファルダ内にある画像を、<span class=\"folder\">./img/</span>フォルダに圧縮した状態で作成するというタスクになります。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-20\">コピー</span><code id=\"code-20\" class=\"cli nohighlight hljs\">gulp imagemin\r\n</code></pre>\n<p>31%圧縮できました！<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2018/07/gulp-1-700x122.png\" alt=\"\" class=\"alignnone size-medium wp-image-8122\" srcset=\"https://haniwaman.com/wp-content/uploads/2018/07/gulp-1-700x122.png 700w, https://haniwaman.com/wp-content/uploads/2018/07/gulp-1.png 753w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p>Gulpでの画像の圧縮については、下記の書籍で大いに勉強させていただきました。</p>\n<div class=\"cstmreba\">\n<div class=\"booklink-box\">\n<div class=\"booklink-image\"><a href=\"https://www.amazon.co.jp/exec/obidos/asin/4863542402/haniwaman-22/\" target=\"_blank\"  rel=\"noopener noreferrer\"><img src=\"https://images-fe.ssl-images-amazon.com/images/I/51jofSf6qBL._SL160_.jpg\" style=\"border: none;\" /></a></div>\n<div class=\"booklink-info\">\n<div class=\"booklink-name\"><a href=\"https://www.amazon.co.jp/exec/obidos/asin/4863542402/haniwaman-22/\" target=\"_blank\"  rel=\"noopener noreferrer\">Webデザイナーの仕事を楽にする! gulpではじめるWeb制作ワークフロー入門</a></p>\n<div class=\"booklink-powered-date\">posted with <a href=\"https://yomereba.com\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">ヨメレバ</a></div>\n</div>\n<div class=\"booklink-detail\">中村 勇希 シーアンドアール研究所 2018-05-29    </div>\n<div class=\"booklink-link2\">\n<div class=\"shoplinkamazon\"><a href=\"https://www.amazon.co.jp/exec/obidos/asin/4863542402/haniwaman-22/\" target=\"_blank\"  rel=\"noopener noreferrer\">Amazon</a></div>\n<div class=\"shoplinkkindle\"><a href=\"https://www.amazon.co.jp/exec/obidos/ASIN/B07D9BHXTN/haniwaman-22/\" target=\"_blank\"  rel=\"noopener noreferrer\">Kindle</a></div>\n<div class=\"shoplinkrakuten\"><a href=\"https://hb.afl.rakuten.co.jp/hgc/117225c0.b43e75d1.117225c1.f4ba597a/yomereba_main_201812241334370175?pc=http%3A%2F%2Fbooks.rakuten.co.jp%2Frb%2F15406109%2F%3Fscid%3Daf_ich_link_urltxt%26m%3Dhttp%3A%2F%2Fm.rakuten.co.jp%2Fev%2Fbook%2F\" target=\"_blank\"  rel=\"noopener noreferrer\">楽天ブックス</a></div>\n</p></div>\n</div>\n<div class=\"booklink-footer\"></div>\n</div>\n</div>\n<h3><span id=\"Sass\">Sassコンパイル</span></h3>\n<p>Sassコンパイル用パッケージのインストール。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-21\">コピー</span><code id=\"code-21\" class=\"cli nohighlight hljs\">npm install gulp-sass --save-dev\r\n</code></pre>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-22\">コピー</span><code id=\"code-22\" class=\"js\">var gulp = require('gulp');\r\nvar sass = require('gulp-sass');\r\n\r\ngulp.task('sass', function() {\r\n\treturn gulp.src('./sass/**/*.scss')\r\n\t\t.pipe(sass({outputStyle: 'expanded'}))\r\n\t\t.pipe(gulp.dest('./css'));\r\n});</code></pre>\n<p>これはザックリ説明すると、<span class=\"folder\">/sass/</span>フォルダ以下にある全「.scss」のファイルを対象にコンパイルして、<span class=\"folder\">/css/</span>フォルダに格納するという命令になります。</p>\n<p>ちなみに生成されるCSSのフィアル名は、元となるSCSSのファイル名と同じです。実際に実行してみましょう。</p>\n<p>元のscssファイル。</p>\n<pre><span class=\"filename\">sass/style.scss</span><span class=\"code-copy\" data-clipboard-target=\"#code-23\">コピー</span><code id=\"code-23\" class=\"css\">p {\r\n\tfont-size: 16px;\r\n\r\n\tspan {\r\n\t\tfont-size: 14px;\r\n\t}\r\n}</code></pre>\n<p><code>gulp sass</code>で実行できます。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-24\">コピー</span><code id=\"code-24\" class=\"cli nohighlight hljs\">gulp sass\r\n</code></pre>\n<p>生成されたcssファイル。</p>\n<pre><span class=\"filename\">css/style.css</span><span class=\"code-copy\" data-clipboard-target=\"#code-25\">コピー</span><code id=\"code-25\" class=\"css\">p {\r\n  font-size: 16px;\r\n}\r\n\r\np span {\r\n  font-size: 14px;\r\n}</code></pre>\n<h3><span id=\"Sass-2\">Sassが保存されたら実行</span></h3>\n<p>SASSをコンパイルする時に、<code>gulp sass</code>っていちいち打つの面倒くさいですよね。保存したタイミングで勝手に生成してほしいものです。</p>\n<p>scssファイルを監視して、保存時にcssファイルを自動生成してくれる記述を紹介します。</p>\n<p>特に新しくインストールするパッケージはありません。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-26\">コピー</span><code id=\"code-26\" class=\"js\">var gulp = require('gulp');\r\nvar sass = require('gulp-sass');\r\n\r\ngulp.task('sass', function() {\r\n\treturn gulp.src('./sass/**/*.scss')\r\n\t\t.pipe(sass({outputStyle: 'expanded'}))\r\n\t\t.pipe(gulp.dest('./css'));\r\n});\r\n\r\ngulp.task( 'watch', function() {\r\n\tgulp.watch( './sass/**/*.scss', gulp.task( 'sass' ) );\r\n});</code></pre>\n<p><code>gulp watch</code>コマンドで監視がスタートします。これは、<span class=\"folder\">/sass/</span>配下の「.scss」ファイルが更新されたら、<code>'sass'</code>の処理を実行するというものです。</p>\n<p>これを応用すると、</p>\n<ul>\n<li>watchでsassを監視</li>\n<li>sassコンパイルでcssが更新</li>\n<li>cssファイルの更新を関ししているbrowser-syncでブラウザ更新</li>\n</ul>\n<p>という一連の流れをなにも手を動かすことなくできるようになります。</p>\n<p>いろんなファイルをwatchで監視させると、ファイル保存時動いてくれるので、かなり楽です。</p>\n<h3><span id=\"i-4\">ベンダープレフィックス</span></h3>\n<p>SCSSのコンパイルの過程でベンダープレフィックスを自動で付与することができます。なにげに超便利でどこのバージョンまで意識してつけるかといった思考を全てGulpに任せることができるのです。</p>\n<p>「gulp-postcss」のインストール。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-27\">コピー</span><code id=\"code-27\" class=\"cli nohighlight hljs\">npm install --save-dev gulp-postcss\r\n</code></pre>\n<p>「autoprefixer」のインストール。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-28\">コピー</span><code id=\"code-28\" class=\"cli nohighlight hljs\">npm install --save-dev autoprefixer\r\n</code></pre>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-29\">コピー</span><code id=\"code-29\" class=\"js\">var gulp         = require('gulp');\r\nvar sass         = require('gulp-sass');\r\nvar postcss      = require('gulp-postcss');\r\nvar autoprefixer = require('autoprefixer');\r\n\r\ngulp.task('sass', function() {\r\n\treturn gulp.src('./sass/**/*.scss')\r\n\t\t.pipe(sass({outputStyle: 'expanded'}))\r\n\t\t.pipe(postcss([autoprefixer()]))\r\n\t\t.pipe(gulp.dest('./css'));\r\n});</code></pre>\n<p>SCSSのコンパイルに<code>.pipe</code>で繋いで拡張していくイメージです。</p>\n<p>ベンダープレフィックスが付きそうなプロパティで試してみましょう。</p>\n<pre><span class=\"filename\">sass/style.scss</span><span class=\"code-copy\" data-clipboard-target=\"#code-30\">コピー</span><code id=\"code-30\" class=\"css\">.hoge {\r\n\ttransform: translate(-50%, -50%);\r\n}</code></pre>\n<p><code>gulp sass</code>で実行できます。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-24\">コピー</span><code id=\"code-24\" class=\"cli nohighlight hljs\">gulp sass\r\n</code></pre>\n<pre><span class=\"filename\">css/style.css</span><span class=\"code-copy\" data-clipboard-target=\"#code-32\">コピー</span><code id=\"code-32\" class=\"css\">.hoge {\r\n  -webkit-transform: translate(-50%, -50%);\r\n          transform: translate(-50%, -50%);\r\n}</code></pre>\n<p><code>-webkit-</code>が付いてますね。</p>\n<p>ベンダープレフィックスがつくかどうかの判断は、ブラウザのバージョンやシェア率によって決まっています。</p>\n<p>デフォルトの設定だと「> 1%, last 2 versions」ということで、1%以上使われいる端末、かつ2個前までのブラウザバージョンをカバーしているという計算です。</p>\n<p>これをカバー率で表すと、87.14%をカバーできているという感じですね（2018年8月現在）<br />\n→ <a href=\"http://browserl.ist/?q=%3E+1%25%2C+last+2+versions%2C+Firefox+ESR\" rel=\"noopener noreferrer\" target=\"_blank\">browserl.ist</a><br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2018/07/gulp5-700x334.png\" alt=\"\" class=\"alignnone size-medium wp-image-7795\" srcset=\"https://haniwaman.com/wp-content/uploads/2018/07/gulp5-700x334.png 700w, https://haniwaman.com/wp-content/uploads/2018/07/gulp5-768x367.png 768w, https://haniwaman.com/wp-content/uploads/2018/07/gulp5-1200x573.png 1200w, https://haniwaman.com/wp-content/uploads/2018/07/gulp5.png 1585w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p>ここはオプションで詳しく設定することも可能です。</p>\n<p>今回紹介した以外にも、Sassに関する便利なGulpパッケージがたくさんあります。Sassの使い方含めて、GulpのSassの設定は以下の本がめっちゃ勉強になるので、ぜひ手に取って勉強してみてください。</p>\n<div class=\"cstmreba\">\n<div class=\"booklink-box\">\n<div class=\"booklink-image\"><a href=\"https://www.amazon.co.jp/exec/obidos/asin/4844334662/haniwaman-22/\" target=\"_blank\"  rel=\"noopener noreferrer\"><img src=\"https://images-fe.ssl-images-amazon.com/images/I/51uHxc179CL._SL160_.jpg\" style=\"border: none;\" /></a></div>\n<div class=\"booklink-info\">\n<div class=\"booklink-name\"><a href=\"https://www.amazon.co.jp/exec/obidos/asin/4844334662/haniwaman-22/\" target=\"_blank\"  rel=\"noopener noreferrer\">Web制作者のためのSassの教科書 これからのWebデザインの現場で必須のCSSメタ言語</a></p>\n<div class=\"booklink-powered-date\">posted with <a href=\"https://yomereba.com\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">ヨメレバ</a></div>\n</div>\n<div class=\"booklink-detail\">平澤 隆,森田 壮 インプレス 2013-09-13    </div>\n<div class=\"booklink-link2\">\n<div class=\"shoplinkamazon\"><a href=\"https://www.amazon.co.jp/exec/obidos/asin/4844334662/haniwaman-22/\" target=\"_blank\"  rel=\"noopener noreferrer\">Amazon</a></div>\n<div class=\"shoplinkkindle\"><a href=\"https://www.amazon.co.jp/exec/obidos/ASIN/B00FMLD7UC/haniwaman-22/\" target=\"_blank\"  rel=\"noopener noreferrer\">Kindle</a></div>\n<div class=\"shoplinkrakuten\"><a href=\"https://hb.afl.rakuten.co.jp/hgc/117225c0.b43e75d1.117225c1.f4ba597a/yomereba_main_201812241333444223?pc=http%3A%2F%2Fbooks.rakuten.co.jp%2Frb%2F12451132%2F%3Fscid%3Daf_ich_link_urltxt%26m%3Dhttp%3A%2F%2Fm.rakuten.co.jp%2Fev%2Fbook%2F\" target=\"_blank\"  rel=\"noopener noreferrer\">楽天ブックス</a></div>\n</p></div>\n</div>\n<div class=\"booklink-footer\"></div>\n</div>\n</div>\n<h2><span id=\"i-5\">おわり</span></h2><div class=\"matome\"><div class=\"matome-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"></div><div class=\"matome-twitter\"><a href=\"https://twitter.com/haniwa008?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\" data-show-screen-name=\"false\" data-size=\"large\" data-lang=\"ja\" data-show-count=\"true\">Follow @haniwa008</a><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></div></div><!-- /matome -->\n<p>ブラウザの自動リロード、Sassの自動コンパイル、ベンダープレフィックス、JavaScript、CSSのコード圧縮といったコーダーに必要そうな作業はすべてGulpで実行できます。</p>\n<p>更新を検知する<code>watch</code>をキーにすれば、最初に<code>gulp watch</code>としておけば、あとは自動でやってくれたりもします。</p>\n<p>今回紹介したGulpの処理を基本に、ご自身の環境に合わせて色々とカスタマイズしてみてください。</p>\n<p>ちなみにわたしの設定は、以下のGitHubから見れるので、パクっていただいて構いません！<br />\n→ <a href=\"https://github.com/haniwaman/template0\" rel=\"noopener noreferrer\" target=\"_blank\">https://github.com/haniwaman/template0</a></p>\n","date":"July 29, 2018","categories":[{"name":"環境","slug":"setting"}],"tags":null,"author":{"name":"はにわまん","slug":"haniwaman"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"3122056b-2799-5772-aaf9-26e7d8c33f91"}}}