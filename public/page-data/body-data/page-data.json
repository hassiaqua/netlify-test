{"componentChunkName":"component---src-templates-post-js","path":"/body-data/","result":{"data":{"wordpressPost":{"id":"12e5e623-834d-57a2-8a66-be8de4e75838","title":"ローディング判定やスクロール判定をbodyで一元管理すると捗る","slug":"body-data","content":"<p>ローディング判定やスクロール判定は色んな要素で使われますが、この判定を<code>body</code>など<strong class=\"marker\">の全体に影響を与える部分で管理させておくとコーディングが楽</strong>になります。</p>\n<p>具体的に、画面のローディングが完了したら<code>data-loading=\"true\"</code>、スクロールしたら<code>data-scroll=\"true\"</code>のように属性を付与してあげて、サイト全体で使えるようにして上げる方法です。</p>\n<p>実際に読み込んだりスクロールした時の<code>body</code>タグの挙動になります。この付与された属性を用いてCSSを指定してあげると管理しやすくなるはずです！<br />\n<video src=\"https://haniwaman.com/wp-content/uploads/2019/10/body-data.mov\" controls autoplay loop></video></p>\n<div class=\"chat\"><figure class=\"chat-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"><figcaption>はにわまん</figcaption></figure><div class=\"chat-content\">data属性での管理はCSSだけでなくJavaScriptでも扱いやすくて、割とお気に入りです！</div></div>\n<div id=\"toc_container\" class=\"no_bullets\"><p class=\"toc_title\">目次</p><ul class=\"toc_list\"><li><a href=\"#data-loadingtrue\"><span class=\"toc_number toc_depth_1\">1</span> ローディング時にdata-loading=\"true\"を付与する</a><ul><li><a href=\"#i\"><span class=\"toc_number toc_depth_2\">1.1</span> 読み込みの時間制限をつけたい場合</a></li><li><a href=\"#i-2\"><span class=\"toc_number toc_depth_2\">1.2</span> ローディング時のサンプル</a></li></ul></li><li><a href=\"#data-scrolltrue\"><span class=\"toc_number toc_depth_1\">2</span> スクロール時にdata-scroll=\"true\"を付与する</a><ul><li><a href=\"#i-3\"><span class=\"toc_number toc_depth_2\">2.1</span> メインビジュアルを超えたらスクロールとする場合</a></li><li><a href=\"#i-4\"><span class=\"toc_number toc_depth_2\">2.2</span> スクロール時のサンプル</a></li></ul></li><li><a href=\"#i-5\"><span class=\"toc_number toc_depth_1\">3</span> おわり</a></li></ul></div>\n<h2><span id=\"data-loadingtrue\">ローディング時に<code>data-loading=\"true\"</code>を付与する</span></h2>\n<p>jQuery依存で恐縮ですが、、、<code>jQuery(window).on(\"load\"</code>が読み込み完了時の処理とすることができます。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-0\">コピー</span><code id=\"code-0\" class=\"js\">jQuery(window).on(\"load\", function() {\r\n\tjQuery(\"body\").attr(\"data-loading\", \"true\");\r\n});</code></pre>\n<p>読み込みが完了したら、<code>body</code>タグに対して<code>attr(\"data-loading\", \"true\")</code>で属性を付与してあげる簡単な処理になります。</p>\n<h3><span id=\"i\">読み込みの時間制限をつけたい場合</span></h3>\n<div class=\"box\">\nあまりにも重たいページなど、DOMの読み込みを待っていたら遅すぎるケースもあるかもしれません。そういった場合は、○秒を超えたら<code>data-loading=\"true\"</code>を付与するという処理を加えておくと、強制的に読み込みを完了させることができます（属性的には）</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-1\">コピー</span><code id=\"code-1\" class=\"js\">jQuery(\"body\")\r\n    .delay(3000)\r\n    .queue(function() {\r\n        jQuery(this)\r\n            .attr(\"data-loading\", \"true\")\r\n            .dequeue();\r\n    });</code></pre>\n<p>上記の場合は、3秒（3000ms）の遅延の後に<code>attr(\"data-loading\", \"true\")</code>になるといったものです。この記述もセットで入れておくと、形だけでもローディングを終了させることができます。</div>\n<h3><span id=\"i-2\">ローディング時のサンプル</span></h3>\n<p>具体的にどういった使い方をするか、ありそうなサイトのパターンで見ていきます。ローディング画面を表示して、読み込み終わったタイミングでヘッダーを下ろしてくるようなアニメーションを付けてみます。<br />\n<video src=\"https://haniwaman.com/wp-content/uploads/2019/10/body-data2.mov\" controls autoplay loop></video></p>\n<p>上の動画に必要そうな部分だけ抜粋すると以下のような感じです。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-2\">コピー</span><code id=\"code-2\" class=\"html\">&lt;header class=\"header\"&gt;\r\n\t&lt;div class=\"inner\"&gt;\r\n\t\tヘッダーのエリア\r\n\t&lt;/div&gt;&lt;!-- /inner --&gt;\r\n&lt;/header&gt;&lt;!-- /header --&gt;\r\n\r\n&lt;div class=\"loading\"&gt;\r\n\t&lt;div class=\"loading-txt\"&gt;ロード中です&lt;/div&gt;\r\n&lt;/div&gt;&lt;!-- /loading --&gt;</code></pre>\n<p>CSSは以下のような感じで、ローディング完了時にどういった表示にしたいかを<code>[data-loading=\"true\"]</code>を頭につけることで表現できます。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-3\">コピー</span><code id=\"code-3\" class=\"css\">.inner {\r\n\twidth: 1000px;\r\n\tmax-width: 100%;\r\n\tmargin: 0 auto;\r\n}\r\n\r\n.header {\r\n\theight: 60px;\r\n\tpadding: 16px 0;\r\n\tposition: absolute;\r\n\ttop: -60px;\r\n\tleft: 0;\r\n\twidth: 100%;\r\n\ttransition: all 0.6s ease-in 0s;\r\n\tz-index: 20;\r\n\tbackground: #fff;\r\n}\r\n\r\n[data-loading=\"true\"] .header {\r\n\ttop: 0;\r\n\tposition: fixed;\r\n}\r\n\r\n.loading {\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tposition: fixed;\r\n\ttop: 0;\r\n\tleft: 0;\r\n\tbackground: #fff;\r\n}\r\n\r\n.loading .loading-txt {\r\n\tposition: absolute;\r\n\ttop: 50%;\r\n\tleft: 50%;\r\n\ttransform: translate(-50%, -50%);\r\n\tfont-size: 52px;\r\n\tfont-weight: 700;\r\n}\r\n\r\n[data-loading=\"true\"] .loading {\r\n\tdisplay: none;\r\n}</code></pre>\n<p><code>body</code>に<code>[data-loading=\"true\"]</code>があることによって、どの要素にもローディング時の処理を簡単に付けられるのが、この書き方のいいところだと思います。</p>\n<h2><span id=\"data-scrolltrue\">スクロール時に<code>data-scroll=\"true\"</code>を付与する</span></h2>\n<p>こちらもjQuery依存で恐縮です。変数の<code>length</code>は、スクロール距離を入れます。この例では100pxスクロールしたら<code>data-scroll=\"true\"</code>を<code>body</code>に付与するといった処理です。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-4\">コピー</span><code id=\"code-4\" class=\"js\">jQuery(window).on('scroll', function() {\r\n    let length = 100;\r\n    if (length &lt; jQuery(this).scrollTop()) {\r\n        jQuery('body').attr('data-scroll', 'true');\r\n    } else {\r\n        jQuery('body').attr('data-scroll', 'false');\r\n    }\r\n});</code></pre>\n<h3><span id=\"i-3\">メインビジュアルを超えたらスクロールとする場合</span></h3>\n<div class=\"box\">\n<p>100pxでなく特定のところまでスクロールしたら、、、という処理に変えることも簡単にできます。例えば、ヘッダー下によくあるメインビジュアルを超えた場合にスクロールしたことにしたい場合は以下のように変更するだけでOKです。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-5\">コピー</span><code id=\"code-5\" class=\"js\">jQuery(window).on('scroll', function() {\r\n    let length = 100;\r\n    if (jQuery('.js-mv').length) {\r\n        length = jQuery('.js-mv').innerHeight();\r\n    }\r\n    if (length &lt; jQuery(this).scrollTop()) {\r\n        jQuery('body').attr('data-scroll', 'true');\r\n    } else {\r\n        jQuery('body').attr('data-scroll', 'false');\r\n    }\r\n});</code></pre>\n<p><code>.js-mv</code>はメインビジュアルのクラスとして指定してあげてください。これで、100pxだった<code>length</code>がメインビジュアルの高さに書き換えられます。</div>\n<h3><span id=\"i-4\">スクロール時のサンプル</span></h3>\n<p>スクロール時の処理のサンプルとして、メインビジュアルを超えたらヘッダーの色が反転するという処理をしていみます。<br />\n<video src=\"https://haniwaman.com/wp-content/uploads/2019/10/body-data3.mov\" controls autoplay loop></video></p>\n<p>スクロール距離を表すメインビジュアルに<code>.js-mv</code>クラスをつけてあげてください。（付けない場合は100pxでスクロール判定となります）</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-6\">コピー</span><code id=\"code-6\" class=\"html\">&lt;header class=\"header\"&gt;\r\n\t&lt;div class=\"inner\"&gt;\r\n\t\tヘッダーのエリア\r\n\t&lt;/div&gt;&lt;!-- /inner --&gt;\r\n&lt;/header&gt;&lt;!-- /header --&gt;\r\n\r\n&lt;div class=\"mv js-mv\"&gt;\r\n&lt;/div&gt;&lt;!-- /mv --&gt;</code></pre>\n<p>CSSは<code>[data-scroll=\"true\"]</code>を頭につけてあげることで、スクロール時の動きを指定することができます。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-7\">コピー</span><code id=\"code-7\" class=\"css\">.header {\r\n\theight: 60px;\r\n\tposition: absolute;\r\n\ttop: 0;\r\n\tleft: 0;\r\n\twidth: 100%;\r\n\ttransition: all 0.6s ease-in 0s;\r\n\tz-index: 20;\r\n\tbackground: #fff;\r\n\tbox-shadow: 0 0 3px rgba(0, 0, 0, 0.16);\r\n}\r\n\r\n[data-scroll=\"true\"] .header {\r\n\tbackground: #000;\r\n\tcolor: #fff;\r\n}\r\n\r\n.mv {\r\n\theight: 600px;\r\n\twidth: 100%;\r\n\tbackground: #eee url(mv.jpg) no-repeat top center / cover;\r\n\tposition: relative;\r\n}</code></pre>\n<p>トップへ戻るボタンも、<code>[data-scroll=\"true\"] .totop</code>みたいな同様の書き方で実現できるので、スクロール系の処理も一言管理できて楽になります。</p>\n<p>（余裕がある人は以下の記事のコードも書き換えてみてください）</p>\n<blockquote class=\"wp-embedded-content\" data-secret=\"46lQjt4m3G\"><p><a href=\"https://haniwaman.com/floating/\">スクロールの途中で出現するフローティングボタンのJavaScript</a></p></blockquote>\n<p><iframe title=\"&#8220;スクロールの途中で出現するフローティングボタンのJavaScript&#8221; &#8212; HPcode\" class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" src=\"https://haniwaman.com/floating/embed/#?secret=46lQjt4m3G\" data-secret=\"46lQjt4m3G\" width=\"500\" height=\"282\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe></p>\n<h2><span id=\"i-5\">おわり</span></h2><div class=\"matome\"><div class=\"matome-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"></div><div class=\"matome-twitter\"><a href=\"https://twitter.com/haniwa008?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\" data-show-screen-name=\"false\" data-size=\"large\" data-lang=\"ja\" data-show-count=\"true\">Follow @haniwa008</a><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></div></div><!-- /matome -->\n<p>ローディング判定やスクロール判定を<code>body</code>で管理するというお話でした。この辺の処理を<code>body</code>に持たせる用になってから随分とコーディングが楽になったような気がします。</p>\n<p>こういった共通で使えそうな処理判定は、上の方の<code>body</code>あたりに持たせておくと、CSSでの記述に悩まずに楽になるかもしれません。</p>\n","date":"November 27, 2019","categories":[{"name":"WordPress","slug":"wordpress"}],"tags":null,"author":{"name":"はにわまん","slug":"haniwaman"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"12e5e623-834d-57a2-8a66-be8de4e75838"}}}