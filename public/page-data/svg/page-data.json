{"componentChunkName":"component---src-templates-post-js","path":"/svg/","result":{"data":{"wordpressPost":{"id":"7b347bd3-75ac-5bea-a223-2e09f98a188d","title":"インラインSVGを使えば画像の色変更をCSSから楽にできる！","slug":"svg","content":"<p>HTMLの画像部分を（たとえばホバー時）に色を変えたい場合は、CSSかJavaScriptで画像を切り替えるといった対応しかありませんでした。</p>\n<p>しかし、<strong class=\"marker\">インラインSVGを使えば、画像もHTMLのように扱うことができる</strong>ようになり、フォントカラーは背景色のように簡単にCSSから変更もできるようになります！</p>\n<p>色が変わりがちなボタンに使うアローアイコンなどはインラインSVGを使えば、めちゃくちゃ管理が楽です。使い方も簡単なのでぜひ試してみてください！</p>\n<div class=\"demo\">DEMO（デモ）</div>\n<div>↓マウスを重ねてみてください。<br /><svg class=\"arrow-svg1645\" xmlns='http://www.w3.org/2000/svg' viewBox='0 0 64 64' width='64' height='64' fill='#666'>\n<path d='M0 64 L32 32 L0 0 Z' />\n</svg></div>\n<div class=\"chat\"><figure class=\"chat-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"><figcaption>はにわまん</figcaption></figure><div class=\"chat-content\">画像の色変更ができるって感覚が新鮮です</div></div>\n<div id=\"toc_container\" class=\"no_bullets\"><p class=\"toc_title\">目次</p><ul class=\"toc_list\"><li><a href=\"#SVGHTML\"><span class=\"toc_number toc_depth_1\">1</span> インラインSVGはHTMLに直接タグで貼り付けられる</a></li><li><a href=\"#SVGCSS\"><span class=\"toc_number toc_depth_1\">2</span> インラインSVGをCSSから制御してみる</a><ul><li><a href=\"#SVGidclass\"><span class=\"toc_number toc_depth_2\">2.1</span> SVGタグにidやclassを付与</a></li><li><a href=\"#SVGCSS-2\"><span class=\"toc_number toc_depth_2\">2.2</span> SVGタグの値をCSSから変更</a></li></ul></li><li><a href=\"#i\"><span class=\"toc_number toc_depth_1\">3</span> ボタンのアイコンとして使ってみる</a><ul><li><a href=\"#SVG\"><span class=\"toc_number toc_depth_2\">3.1</span> インラインSVGのデメリット</a></li></ul></li><li><a href=\"#svg\"><span class=\"toc_number toc_depth_1\">4</span> デザインカンプからsvgファイルとして抜き出せる</a></li><li><a href=\"#i-2\"><span class=\"toc_number toc_depth_1\">5</span> おわり</a></li></ul></div>\n<h2><span id=\"SVGHTML\">インラインSVGはHTMLに直接タグで貼り付けられる</span></h2>\n<p>SVGファイルの実態はパスなどの情報が記載されたXML形式の文字になります。手元にSVGファイルがあればテキストファイルで開いてみてください。</p>\n<p>例えば以下のSVG画像は、実はこの記事に直接<strong class=\"marker\">HTMLタグとして貼り付けていますが画像として表示されている</strong>ことが分かるかと思います。<br />\n<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 64 64' width='64' height='64' fill='#666'>\n<path d='M0 64 L32 32 L0 0 Z' />\n</svg></p>\n<p>上の画像の文字としては実態は以下のとおりです。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-0\">コピー</span><code id=\"code-0\" class=\"html\">&lt;svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 64 64' width='64' height='64' fill='#666'&gt;\r\n&lt;path d='M0 64 L32 32 L0 0 Z' /&gt;\r\n&lt;/svg&gt;</code></pre>\n<p>こんな感じで、<strong class=\"marker\">SVG画像の実態はパスの集合がテキスト情報で書かれたファイル</strong>でして、画像としての扱いではなくHTMLタグとして使うことができるようになっています。</p>\n<h2><span id=\"SVGCSS\">インラインSVGをCSSから制御してみる</span></h2>\n<p>それでは、今回のメインテーマであるHTMLに貼り付けたSVG画像をCSSから制御してみます。</p>\n<h3><span id=\"SVGidclass\">SVGタグにidやclassを付与</span></h3>\n<p>SVGタグはHTMLタグなので、他の要素と同様にidやclassを付与することができます。CSSから制御したいSVGタグに対して適当なクラスを適応してあげます。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-1\">コピー</span><code id=\"code-1\" class=\"html\">&lt;svg class=\"arrow-svg\" xmlns='http://www.w3.org/2000/svg' viewBox='0 0 64 64' width='64' height='64' fill='#666'&gt;\r\n&lt;path d='M0 64 L32 32 L0 0 Z' /&gt;\r\n&lt;/svg&gt;</code></pre>\n<p>例えば、<code>.arrow-svg</code>というクラスを付与してみました。</p>\n<h3><span id=\"SVGCSS-2\">SVGタグの値をCSSから変更</span></h3>\n<p>先ほど指定した<code>.arrow-svg</code>を以下のようにCSSから制御してあげると、ホバー時にオレンジに色が変わるという動きにすることができます。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-2\">コピー</span><code id=\"code-2\" class=\"css\">.arrow-svg {\r\n  transition: all 0.3s ease 0s;\r\n}\r\n\r\n.arrow-svg:hover {\r\n fill: #fb8c00;\r\n}</code></pre>\n<div class=\"demo\">DEMO（デモ）</div>\n<div>↓マウスを重ねてみてください。<br /><svg class=\"arrow-svg1645\" xmlns='http://www.w3.org/2000/svg' viewBox='0 0 64 64' width='64' height='64' fill='#666'>\n<path d='M0 64 L32 32 L0 0 Z' />\n</svg></div>\n<p>CSSから制御できそうなSVGの属性としては以下のような値かと思います。</p>\n<table class=\"table\">\n<tr>\n<th width=\"120\">fill</th>\n<td>塗りつぶしの色</td>\n</tr>\n<tr>\n<th>fill-opacity</th>\n<td>透過度</td>\n</tr>\n<tr>\n<th>stroke</th>\n<td>線の色</td>\n</tr>\n<tr>\n<th>stroke-width</th>\n<td>線の幅</td>\n</tr>\n</table>\n<h2><span id=\"i\">ボタンのアイコンとして使ってみる</span></h2>\n<p>ボタンのベースとしては、以下の「HTMLタグ」のやつを使ってみます。</p>\n<blockquote class=\"wp-embedded-content\" data-secret=\"q34mudh8XV\"><p><a href=\"https://haniwaman.com/arrow/\">ボタンでアローアイコンをCSSで表現する3つの方法</a></p></blockquote>\n<p><iframe title=\"&#8220;ボタンでアローアイコンをCSSで表現する3つの方法&#8221; &#8212; HPcode\" class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" src=\"https://haniwaman.com/arrow/embed/#?secret=q34mudh8XV\" data-secret=\"q34mudh8XV\" width=\"500\" height=\"282\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe></p>\n<p>画像の部分を今回のインラインSVGに変えてクラス名だけ調整しました。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-3\">コピー</span><code id=\"code-3\" class=\"html\">&lt;a class=\"btn-arrow\" href=\"\"&gt;ボタン&lt;svg class=\"btn-arrow-icon\" xmlns='http://www.w3.org/2000/svg' viewBox='0 0 64 64' width='64' height='64' fill='#666'&gt;\r\n&lt;path d='M0 64 L32 32 L0 0 Z' /&gt;\r\n&lt;/svg&gt;&lt;/a&gt;</code></pre>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-4\">コピー</span><code id=\"code-4\" class=\"css\">.btn-arrow {\r\n  background: #fff;\r\n  border: 1px solid #666;\r\n  color: #666;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  margin: 0;\r\n  padding: 12px 36px;\r\n  position: relative;\r\n  text-decoration: none;\r\n\tfont-weight: 700;\r\n\ttransition: all 0.3s ease 0s;\r\n}\r\n\r\n.btn-arrow-icon {\r\n  -webkit-transform: translateY(-50%);\r\n  position: absolute;\r\n  right: 4px;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  width: 16px;\r\n  margin: 0;\r\n  box-shadow: none;\r\n\ttransition: all 0.3s ease 0s;\r\n}\r\n\r\n.btn-arrow:hover {\r\n  background: #666;\r\n  color: #fff !important;\r\n}\r\n\r\n.btn-arrow:hover .btn-arrow-icon {\r\n  fill: #fff;\r\n}</code></pre>\n<p>ホバー時にsvgタグのクラスの<code>.btn-arrow-icon</code>に対して、<code>fill: #fff;</code>にて塗りつぶし色の変更をしてあげています。</p>\n<div class=\"demo\">DEMO（デモ）</div>\n<div>↓マウスを重ねてみてください。<br /><a class=\"btn-arrow1645\" href=\"\">ボタン<svg class=\"btn-arrow-icon1645\" xmlns='http://www.w3.org/2000/svg' viewBox='0 0 64 64' width='64' height='64' fill='#666'>\n<path d='M0 64 L32 32 L0 0 Z' />\n</svg></a></div>\n<h3><span id=\"SVG\">インラインSVGのデメリット</span></h3>\n<p>個人的に感じるインラインSVGのデメリットは、<strong class=\"marker\">HTML内のコード量が増える&#8230;</strong>という点かと思っています。</p>\n<p>疑似要素ならめっちゃシンプルに書ける<code>a</code>タグ内も先ほどの記述を見てもらえば分かりますが、<code>svg</code>タグが長すぎるためにごちゃごちゃして見えます。</p>\n<p>ただ、svgを画像して指定するとCSSから制御できなくなるので、<strong class=\"marker\">HTMLの見やすさを取るか、CSSからの管理のしやすさをとるか</strong>、といった選択になりそうです。</p>\n<h2><span id=\"svg\">デザインカンプからsvgファイルとして抜き出せる</span></h2>\n<p>コーダーとして実践的なところだと、svgデータはどのデザインカンプからも抜き出すことが可能です。<br />\n（とはいえアイコン部分に限定した方がいいとは思いますが、）</p>\n<p>色が変わる指定があったり、色が変わりそうな部分はsvgとして出力してインラインHTMLとして組んで置いたほうが（自分的には）管理が楽になります。</p>\n<p><strong class=\"marker\">保存形式で「svg」を選び、テキストファイルで開けばインラインHTMLを取得可能</strong>です。以下はXDの保存時の例です。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/10/svg-700x358.png\" alt=\"\" width=\"700\" class=\"alignnone size-medium wp-image-16485\" srcset=\"https://haniwaman.com/wp-content/uploads/2019/10/svg-700x358.png 700w, https://haniwaman.com/wp-content/uploads/2019/10/svg-768x392.png 768w, https://haniwaman.com/wp-content/uploads/2019/10/svg-1200x613.png 1200w, https://haniwaman.com/wp-content/uploads/2019/10/svg.png 1668w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<h2><span id=\"i-2\">おわり</span></h2><div class=\"matome\"><div class=\"matome-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"></div><div class=\"matome-twitter\"><a href=\"https://twitter.com/haniwa008?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\" data-show-screen-name=\"false\" data-size=\"large\" data-lang=\"ja\" data-show-count=\"true\">Follow @haniwa008</a><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></div></div><!-- /matome -->\n<p><strong class=\"marker\">インラインSVGをHTMLに埋め込んで、色の制御を楽にしよう！</strong>というお話でした。この記事では単純な色や線の幅の話しかしていませんが、SVGはめちゃくちゃ奥が深くてアニメーションをインラインで埋め込めたりします。</p>\n<p>もっと凝った実装をSVGで再現したい方は、その辺も調べてみるとワクワクするかと思います。</p>\n<p>画像での切替えが嫌いすぎたわたし同様に、「<strong>アイコンのちょっとした変更なのに何で画像を2枚用意しないといけないんだ&#8230;</strong>」って思っている人は、ぜひインラインSVGを試してみてください！</p>\n","date":"December 01, 2019","categories":[{"name":"HTML","slug":"html"}],"tags":null,"author":{"name":"はにわまん","slug":"haniwaman"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"7b347bd3-75ac-5bea-a223-2e09f98a188d"}}}