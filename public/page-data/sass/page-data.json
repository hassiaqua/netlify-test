{"componentChunkName":"component---src-templates-post-js","path":"/sass/","result":{"data":{"wordpressPost":{"id":"b7dcfda6-5d2f-501b-9efc-2823ec1f994f","title":"Sassを使うメリットとよく使う機能を５つだけ厳選！","slug":"sass","content":"<p>Sassは、CSSを拡張した言語で、利用する主な目的としては「CSSを管理しやすくするため」です。</p>\n<p>平面にベターっと並ぶCSSはとてつもなく見づらく管理しずらい圧倒的なデメリットがあります。CSSが数千、数万行となったときにとてもじゃないけど、どこに何が書いてあるか把握することは困難だと思います。あとから修正しようと思ったときに必ずといっていいほど修正漏れが起こりやすいのがCSSです。</p>\n<p><strong class=\"marker\">Sassを使えば、「CSSの管理しずらい」という問題を少なからず解決してくれます。</strong></p>\n<p>今ではSassを使っていないWeb制作会社の方が少ないってくらいに使われる言語なので、Webコーディングを仕事とするなら必ず覚えておかないと仕事にならない可能性があります。</p>\n<p>この記事では、最低限で理解しておきたいSassの使い方を紹介していきます。サクッと覚えて使えるようにしておきましょう！</p>\n<div id=\"toc_container\" class=\"no_bullets\"><p class=\"toc_title\">目次</p><ul class=\"toc_list\"><li><a href=\"#Sass\"><span class=\"toc_number toc_depth_1\">1</span> Sassを使うメリット</a><ul><li><a href=\"#i\"><span class=\"toc_number toc_depth_2\">1.1</span> どこに書かれているか分かる</a></li><li><a href=\"#i-2\"><span class=\"toc_number toc_depth_2\">1.2</span> 値を変数で管理できる</a></li><li><a href=\"#i-3\"><span class=\"toc_number toc_depth_2\">1.3</span> 入れ子で管理できる</a></li></ul></li><li><a href=\"#Sass5\"><span class=\"toc_number toc_depth_1\">2</span> Sassで最低限に覚えておきたい使い方を5つ</a><ul><li><a href=\"#i-4\"><span class=\"toc_number toc_depth_2\">2.1</span> 変数で管理</a></li><li><a href=\"#i-5\"><span class=\"toc_number toc_depth_2\">2.2</span> ファイルごとに役割を決めて管理</a></li><li><a href=\"#mixin\"><span class=\"toc_number toc_depth_2\">2.3</span> 使い回しの型を定義できる「mixin」</a></li><li><a href=\"#i-6\"><span class=\"toc_number toc_depth_2\">2.4</span> 「&amp;」で条件分岐</a></li><li><a href=\"#i-7\"><span class=\"toc_number toc_depth_2\">2.5</span> 四則演算</a></li></ul></li><li><a href=\"#Sass-2\"><span class=\"toc_number toc_depth_1\">3</span> Sassをコンパイルする２つの方法</a><ul><li><a href=\"#GulpSassCSS\"><span class=\"toc_number toc_depth_2\">3.1</span> GulpでSassをCSS化</a></li><li><a href=\"#PreprosSassCSS\"><span class=\"toc_number toc_depth_2\">3.2</span> PreprosでSassをCSS化</a></li></ul></li><li><a href=\"#Sass-3\"><span class=\"toc_number toc_depth_1\">4</span> Sassの初心者向けおすすめ本</a></li><li><a href=\"#i-8\"><span class=\"toc_number toc_depth_1\">5</span> おわり</a></li></ul></div>\n<h2><span id=\"Sass\">Sassを使うメリット</span></h2>\n<p>冒頭でもいいましたが、Sassを使うメリットは大雑把に「<strong class=\"marker\">CSSが管理しやすくなる！</strong>」ということだと思います。</p>\n<h3><span id=\"i\">どこに書かれているか分かる</span></h3>\n<p>例えば、わたしが使っているSassの構成を例にすると以下のようなフォルダ構成になっています。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/01/sass.png\" alt=\"\" class=\"alignnone size-full wp-image-12093\" /></p>\n<p>共通パーツであるヘッダーやフッターは<span class=\"folder\">common</span>というフォルダにまとめているのですが、「ヘッダーに関するCSSを直そう」ってなったときは、<span class=\"filename\">_header.scss</span>を修正すればいいですし、「フッターに関するCSSを直そう」ってときは<span class=\"filename\">_footer.scss</span>を直せばいいわけですね。</p>\n<p>このようにSassによってフォルダ構成を分かりやすく管理することで、<strong class=\"marker\">直したい場所に迷うことなくアプローチすることができます</strong>。</p>\n<h3><span id=\"i-2\">値を変数で管理できる</span></h3>\n<p>Sassでは、<code>$color-main: #efa336;</code>のような感じで変数として値を管理できます。</p>\n<p><span class=\"folder\">setting</span>フォルダには色やフォントに関する情報が変数でまとまっています。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/01/sass2.png\" alt=\"\" class=\"alignnone size-full wp-image-12094\" /></p>\n<p>サイトにはメインカラーが設定されることが多いと思いますが、<span class=\"filename\">_color.scss</span>の中にあらかじめ色を用意しておくと、<strong class=\"marker\">もし全体の色を変更したくなってもこの変数の値を変更するだけで全体が漏れなく切り替わる</strong>といった感じですね。</p>\n<p>共通で利用するようなカラーコードやpx値などは、変数としてまとめておくと、後からの修正がめちゃくちゃ楽になります。</p>\n<h3><span id=\"i-3\">入れ子で管理できる</span></h3>\n<p>例えば以下のようなHTMLコードがあったとします。このCSSで書いたパターンとSassで書いたパターンでどういう違いがあるか見ると分かり安いかもしれません。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-0\">コピー</span><code id=\"code-0\" class=\"html\">&lt;ul class=\"items\"&gt;\r\n\t&lt;li&gt;&lt;a href=\"\"&gt;テスト&lt;/a&gt;&lt;/li&gt;\r\n\t&lt;li&gt;&lt;a href=\"\"&gt;テスト&lt;/a&gt;&lt;/li&gt;\r\n\t&lt;li&gt;&lt;a href=\"\"&gt;テスト&lt;/a&gt;&lt;/li&gt;\r\n&lt;/ul&gt;</code></pre>\n<h4>CSSで書いた場合</h4>\n<p>普段よく見る書き方だと思います。<code>.items</code>に依存させる場合は全部の先頭に<code>.items</code>を書いていますね。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-1\">コピー</span><code id=\"code-1\" class=\"css\">.items {\r\n\tlist-style: none;\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n}\r\n\r\n.items li {\r\n\tdisplay: inline-block;\r\n}\r\n\r\n.items li a {\r\n\tcolor: #333;\r\n\tdisplay: block;\r\n\tpadding: 12px;\r\n\ttext-decoration: none;\r\n}</code></pre>\n<h4>SASSで書いた場合</h4>\n<p>Sassで書く場合は、<code>.items</code>に依存させるときは小階層で書くというような書き方ができます。いちいち<code>.items</code>を書く必要がないだけでなく、<code>.items</code>のまとまりとして散らからずに書くことができます。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-2\">コピー</span><code id=\"code-2\" class=\"sass\">.items {\r\n\tpadding: 0;\r\n\tmargin: 0;\r\n\tlist-style: none;\r\n\r\n\tli {\r\n\t\tdisplay: inline-block;\r\n\r\n\t\ta {\r\n\t\t\ttext-decoration: none;\r\n\t\t\tcolor: #333;\r\n\t\t\tdisplay: block;\r\n\t\t\tpadding: 12px;\r\n\t\t}\r\n\t}\r\n}</code></pre>\n<p>このように、入れ子にすることで、<strong class=\"marker\">記載するコーディング量が減るとともに、アイテムごとのまとまりとしても把握しやすく</strong>なります。</p>\n<h2><span id=\"Sass5\">Sassで最低限に覚えておきたい使い方を5つ</span></h2>\n<p>Sassを使うからには覚えておきたい使い方です。わたし自身めっちゃ使いこなしているというわけではないですが、これが使えるようになってCSSのコーディングが楽になったというポイントを紹介していけたらと思います。</p>\n<h3><span id=\"i-4\">変数で管理</span></h3>\n<p>カラーコードとか、文字サイズ、フォントファミリーなどは<strong class=\"marker\">変数で一元管理して使うようにすると、あとからの修正がめちゃくちゃ楽</strong>になります。仮に「メインカラーを変更したい」となっても、変数の値を１箇所変えるだけで済みます。</p>\n<p>例えば、わたしのLPページの<span class=\"filename\">_color.scss</span>を見ると、いろいろな色をあらかじめ管理していることが分かります。わたしの気が変わって文字色を変えたくなったら、ここの変数の値を変えれば全体が切り替わるので楽ですよね。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/01/sass4-700x685.png\" alt=\"\" class=\"alignnone size-medium wp-image-12101\" srcset=\"https://haniwaman.com/wp-content/uploads/2019/01/sass4-700x685.png 700w, https://haniwaman.com/wp-content/uploads/2019/01/sass4-768x752.png 768w, https://haniwaman.com/wp-content/uploads/2019/01/sass4.png 1098w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p>変数で定義したものは、そのままプロパティの値として使うことができます。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/01/sass6.png\" alt=\"\" class=\"alignnone size-full wp-image-12108\" /></p>\n<h3><span id=\"i-5\">ファイルごとに役割を決めて管理</span></h3>\n<p>ファイルごとに役割を決めて管理しておくと、修正対象のファイルを見つけやすくなります。わたしのSassのフォルダ構成で言うと、以下のような分け方をしています。これは「吉本式」の丸パクリです。（貴重な情報を本当にありがとうございます。とても使いやすいです）<br />\n→ <a href=\"http://tsudoi.org/guide/detail/8.html\" rel=\"noopener\" target=\"_blank\">SCSSのファイル設計について Vol.1 | 吉本式BEM設計</a></p>\n<div class=\"box\">\n<ul>\n<li><span class=\"folder\">base</span>・・・リセットCSSや要素の基本となるCSSを格納</li>\n<li><span class=\"folder\">mixin</span>・・・アニメーションやmixinや関数を格納</li>\n<li><span class=\"folder\">module</span>・・・使い回しできるモジュール的なCSSを格納</li>\n<li><span class=\"folder\">page</span>・・・ページごとに必要なCSSを格納</li>\n<li><span class=\"folder\">setting</span>・・・変数を格納</li>\n<li><span class=\"filename\">style.scss</span>・・・上記のフォルダ群をまとめるファイル</li>\n</ul>\n</div>\n<p>読み込む順番は、<span class=\"filename\">style.scss</span>でまとめているわけですが、変数とかmixinなど先に読み込んでおかないといけないところから先に読み込んでいく感じですね。</p>\n<pre><span class=\"filename\">style.scss</span><span class=\"code-copy\" data-clipboard-target=\"#code-3\">コピー</span><code id=\"code-3\" class=\"sass\">@import \"setting/**\";\r\n@import \"mixin/**\";\r\n@import \"base/**\";\r\n@import \"module/**\";\r\n@import \"page/**\";</code></pre>\n<p>このあたりはSassというよりは、<strong class=\"marker\">CSS設計</strong>に関わってくる部分なので、別の勉強が必要になりかもしれません&#8230;</p>\n<div class=\"cstmreba\">\n<div class=\"booklink-box\">\n<div class=\"booklink-image\"><a href=\"https://www.amazon.co.jp/exec/obidos/asin/4844336355/haniwaman-22/\" target=\"_blank\"  rel=\"noopener\"><img src=\"https://images-fe.ssl-images-amazon.com/images/I/51rsbQOrZ0L._SL160_.jpg\" style=\"border: none;\" /></a></div>\n<div class=\"booklink-info\">\n<div class=\"booklink-name\"><a href=\"https://www.amazon.co.jp/exec/obidos/asin/4844336355/haniwaman-22/\" target=\"_blank\"  rel=\"noopener\">Web制作者のためのCSS設計の教科書 モダンWeb開発に欠かせない「修正しやすいCSS」の設計手法</a></p>\n<div class=\"booklink-powered-date\">posted with <a href=\"https://yomereba.com\" rel=\"nofollow noopener\" target=\"_blank\">ヨメレバ</a></div>\n</div>\n<div class=\"booklink-detail\">谷 拓樹 インプレス 2014-07-24    </div>\n<div class=\"booklink-link2\">\n<div class=\"shoplinkamazon\"><a href=\"https://www.amazon.co.jp/exec/obidos/asin/4844336355/haniwaman-22/\" target=\"_blank\"  rel=\"noopener\">Amazon</a></div>\n<div class=\"shoplinkkindle\"><a href=\"https://www.amazon.co.jp/exec/obidos/ASIN/B00M0ESXUI/haniwaman-22/\" target=\"_blank\"  rel=\"noopener\">Kindle</a></div>\n<div class=\"shoplinkrakuten\"><a href=\"https://hb.afl.rakuten.co.jp/hgc/117225c0.b43e75d1.117225c1.f4ba597a/yomereba_main_201901021603001857?pc=http%3A%2F%2Fbooks.rakuten.co.jp%2Frb%2F12845305%2F%3Fscid%3Daf_ich_link_urltxt%26m%3Dhttp%3A%2F%2Fm.rakuten.co.jp%2Fev%2Fbook%2F\" target=\"_blank\"  rel=\"noopener\">楽天ブックス</a></div>\n</p></div>\n</div>\n<div class=\"booklink-footer\"></div>\n</div>\n</div>\n<p><span class=\"folder\">page</span>の中ではさらに、ページごとにフォルダを作ったりしています。わたしの場合はページごとにフォルダを新しく作って、さらにセクションごとにファイルを作っています。</p>\n<p>細かすぎるかもしれませんが、、、このように<strong class=\"marker\">ページごとやセクションごとに分けることで、どこに該当のCSSが書かれているかがすぐに分かる</strong>ということですね。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/01/sass7-700x393.png\" alt=\"\" class=\"alignnone size-medium wp-image-12109\" srcset=\"https://haniwaman.com/wp-content/uploads/2019/01/sass7-700x393.png 700w, https://haniwaman.com/wp-content/uploads/2019/01/sass7-768x431.png 768w, https://haniwaman.com/wp-content/uploads/2019/01/sass7-1200x674.png 1200w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<h3><span id=\"mixin\">使い回しの型を定義できる「mixin」</span></h3>\n<p>Sassの「mixin」という機能も使えると、コーディングが楽になると思います。個人的に<strong class=\"marker\">めちゃくちゃ使うのは、メディアクエリを指定するmixin</strong>ですね。</p>\n<p>スマホ、タブレット、PCのブレークポイントを変数で指定して、</p>\n<pre><span class=\"filename\">_size.scss</span><span class=\"code-copy\" data-clipboard-target=\"#code-4\">コピー</span><code id=\"code-4\" class=\"sass\">$layout-width-inner: 1024px;\r\n$breakpoints: (\r\n\t\"sp\": \"screen and (max-width: 767px)\",\r\n\t\"tab\": \"screen and (max-width: #{$layout-width-inner - 1px})\",\r\n\t\"pc\": \"screen and (min-width: #{$layout-width-inner})\"\r\n);</code></pre>\n<p>mixinで出力方法を設定しておきます。</p>\n<pre><span class=\"filename\">_mixin.scss</span><span class=\"code-copy\" data-clipboard-target=\"#code-5\">コピー</span><code id=\"code-5\" class=\"sass\">@mixin mq($breakpoint: sp) {\r\n\r\n\t@media #{map-get($breakpoints, $breakpoint)} {\r\n\r\n\t\t@content;\r\n\t}\r\n}</code></pre>\n<p>このようにあらかじめ変数とmixinで用意しておくことで、メディアクエリの長い文章を入力するのがめっちゃ楽にできたりします。実際にスマホのときは幅120pxにするという例をGif動画で見てみます。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/01/sass.gif\" alt=\"\" class=\"alignnone size-full wp-image-12105\" /></p>\n<p>入れ子で直感的に書けるのも素晴らしです。「〇〇の要素のスマホ時」ということが直感的に分かりますね。上記の入力によってできあがるコードが以下です。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-6\">コピー</span><code id=\"code-6\" class=\"sass\">@media screen and (max-width: 767px) {\r\n\t.price-table th:first-child {\r\n\t\twidth: 120px;\r\n\t}\r\n}</code></pre>\n<p><code>@media screen and (max-width: 767px)</code>の書き方って覚えてられないですもんね・・・。こうやって簡単に使えるようにできるのもSassの素晴らしいところです。</p>\n<p>なお、Gif動画で<code>mq</code>押して展開されたのはスニペットに登録しているからですね。こちらも合わせて覚えておくと、さらに早くなると思います！</p>\n<blockquote class=\"wp-embedded-content\" data-secret=\"sDxNeOCZ4C\"><p><a href=\"https://haniwaman.com/vscode-snipet/\">VSCodeにコードスニペットを登録して効率的にコーディング！</a></p></blockquote>\n<p><iframe title=\"&#8220;VSCodeにコードスニペットを登録して効率的にコーディング！&#8221; &#8212; HPcode\" class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" src=\"https://haniwaman.com/vscode-snipet/embed/#?secret=sDxNeOCZ4C\" data-secret=\"sDxNeOCZ4C\" width=\"500\" height=\"282\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe></p>\n<h3><span id=\"i-6\">「&amp;」で条件分岐</span></h3>\n<p>Sassにおける「&amp;」は「繋げる」という意味になりますが、個人的には条件分岐というイメージで捉えると理解しやすいかと思います。</p>\n<p>例えば、<code>a</code>タグが<code>.active</code>クラスが付与された場合、マウスホバーされた場合ってよくCSSでコーディングすると思いますが、〇〇の場合って表現を今もしていると思います。</p>\n<p>以下をベースとしたときに、</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-7\">コピー</span><code id=\"code-7\" class=\"css\">a {\r\n\tcolor: #333;\r\n\ttext-decoration: none;\r\n}</code></pre>\n<p>マウスホバーを条件に加える処理をSassで書くなら、</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-8\">コピー</span><code id=\"code-8\" class=\"sass\">a {\r\n\tcolor: #333;\r\n\ttext-decoration: none;\r\n\t\r\n\t&amp;:hover {\r\n\t\topacity: 0.6;\r\n\t}\r\n}</code></pre>\n<p>のようになり、<code>.active</code>クラスが付与された時のCSSを表現するなら、</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-9\">コピー</span><code id=\"code-9\" class=\"sass\">a {\r\n\tcolor: #333;\r\n\ttext-decoration: none;\r\n\tfont-weight: 400;\r\n\t\r\n\t&amp;:hover {\r\n\t\topacity: 0.6;\r\n\t}\r\n\t\r\n\t&amp;.active {\r\n\t\tfont-weight: 700;\r\n\t}\r\n}</code></pre>\n<p>みたいな書き方ができます。「&amp;」は「繋ぐ」役割なので、CSSに直すと「<code>a:hover</code>」「<code>a.active</code>」という記述として表現されます。</p>\n<p>このように、<code>a</code>タグの<strong class=\"marker\">〇〇の場合みたいな書き方を入れ子の中で直感的に分かりやすく表現できるのもSassの素晴らしいところ</strong>だと思います。</p>\n<h3><span id=\"i-7\">四則演算</span></h3>\n<p>幅の「%」であったり、<code>line-height</code>の値を求めるために使うことが多いです。</p>\n<p>横幅が、980px。右側のメインカラムが680px、サイドカラムを200pxとする時に、これを％に直すには、</p>\n<ul>\n<li>メインカラム → <code>width: (680 / 980) * 100%</code></li>\n<li>サイドカラム → <code>width: (200 / 980) * 100%</code></li>\n</ul>\n<p>といった具合に簡単に計算させることが可能です。<strong class=\"marker\">電卓をポチポチしていた作業がSassを使えばファイル上で行ってくれる</strong>ようになります。</p>\n<p>また、<code>line-height</code>もコーダーだとPhotohopやXDから値を取得する時によく計算する値かと思います。計算方法としては、「行送り / フォントサイズ」です。</p>\n<p>これを自力で計算してもいいですが、例えば、以下のような関数を用意しておけば、割り算の結果を簡単に返すことができるようになります。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-10\">コピー</span><code id=\"code-10\" class=\"sass\">@function division($numerator, $denominator) {\r\n\r\n\t@return $numerator / $denominator;\r\n}</code></pre>\n<p>これもコードスニペットで簡単に使えるようにしています。<br />\n<video width=\"400\" src=\"https://haniwaman.com/wp-content/uploads/2019/01/sass.mov\" controls autoplay loop></video></p>\n<h2><span id=\"Sass-2\">Sassをコンパイルする２つの方法</span></h2>\n<p>HTMLからSassで書いたコードを読み込むことはできないので、CSSに変更する必要があります。SassからCSSへ変更する方法としては、２つ紹介しようと思います。</p>\n<ul class=\"check\">\n<li>１つ目は、Gulpのタスクで自動化する方法</li>\n<li>２つ目は、PreprosのGUIツールを使う方法</li>\n</ul>\n<p>黒い画面（ターミナルやコマンドプロンプト）に抵抗がない方は、Gulpを使うとめっちゃ捗ります。黒い画面が苦手な方は、PreprosのGUIツールを使うのがいいかと思います。</p>\n<h3><span id=\"GulpSassCSS\">GulpでSassをCSS化</span></h3>\n<p>GulpでSassをCSS化するメリットは細かな設定ができるということです。Gulpはあらゆる処理を自動化させるタスクツールですが、ここにどのような処理を行わせるかは設定する側の自由です。完全にオリジナルなカスタマイズができるので、やりたいことは（先人の恩恵を受けつつ）おおよそ実現できます。</p>\n<p>わたしがGulpで行っているのは以下のとおりです。</p>\n<ul class=\"check\">\n<li>autoprefixerでベンダープレフィックスを付与する</li>\n<li>cssdeclsortでプロパティを並び替える</li>\n<li>自動整形</li>\n<li>メディアクエリの整理</li>\n<li>バラバラのファイルを１つにまとめる</li>\n</ul>\n<p>この中で上の2つは、Preprosでも指定できたと思います。思いついたものを好きなように追加していけるがGulpで管理するメリットかと思います。わたしはあらかじめ決まったSassファイルに書いていくというよりは案件やセクションごとに細かくファイルを分けていくタイプなので、「バラバラのファイルを１つにまとめる」という処理ができないとストレスになってしまいますね・・・。</p>\n<p>GulpでSassをタスク処理させる方法は以下でまとめているので、Gulpを使う方は参考にしていただければと思います。</p>\n<blockquote class=\"wp-embedded-content\" data-secret=\"5NUMHCmA6l\"><p><a href=\"https://haniwaman.com/gulp-sass/\">Sassから完璧なCSSファイルを出力するために通したいGulpのタスク【WordPress編】</a></p></blockquote>\n<p><iframe title=\"&#8220;Sassから完璧なCSSファイルを出力するために通したいGulpのタスク【WordPress編】&#8221; &#8212; HPcode\" class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" src=\"https://haniwaman.com/gulp-sass/embed/#?secret=5NUMHCmA6l\" data-secret=\"5NUMHCmA6l\" width=\"500\" height=\"282\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe></p>\n<h3><span id=\"PreprosSassCSS\">PreprosでSassをCSS化</span></h3>\n<p>→ <a href=\"https://prepros.io/\" rel=\"noopener\" target=\"_blank\">Compile Sass, Less, Jade, CoffeeScript on Mac, Windows &amp; Linux with Live Browser Reload</a><br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/01/sass3-700x433.png\" alt=\"\" class=\"alignnone size-medium wp-image-12097\" srcset=\"https://haniwaman.com/wp-content/uploads/2019/01/sass3-700x433.png 700w, https://haniwaman.com/wp-content/uploads/2019/01/sass3-768x476.png 768w, https://haniwaman.com/wp-content/uploads/2019/01/sass3-1200x743.png 1200w, https://haniwaman.com/wp-content/uploads/2019/01/sass3.png 1825w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p>おそらく最も有名なSassからCSSに変換するためのGUIツールです。MacでもWindowsでも使えます。有料版をやたらと勧められますが、「Trial」ボタンを押し続ければずっと無料です。</p>\n<p>わたしもGulpという存在を知らないころは、Preprosを使っていました。Sassがどのように変換させるのかを肌で感じる最初のキッカケにもなると思いますので、Sassを軽く触ってみたいって方にもサクッと使えておすすめです。</p>\n<p>ただ、やっぱりGulpで慣れてしまうと、まず起動しないといけないという点と、自由なカスタマイズが難しい（ツールの中にある機能しか使えない）という点に不満に思ってくるかもしれません&#8230;。</p>\n<h2><span id=\"Sass-3\">Sassの初心者向けおすすめ本</span></h2>\n<p><strong class=\"marker\">Sassはこの１冊読んで実践すれば十分という本</strong>を紹介します。「Sassの教科書」というインプレスから出ている蛍光カラーのシリーズの１つなんですが、これがめちゃくちゃ分かりやすい！</p>\n<p>わたしが、PreprosでSassを使いながら「うーん、、、分かったようで分からん」「CSSで書いた方がもしかしたら早くね」的な考えから、「Sassじゃないと書けない！」って今の自分に変わったのはこの本の影響が大きいかもしれません。</p>\n<p>Gulpでの使い方も分かりやすく、基本的な部分のほとんどんは「Sassの教科書」から覚えたことです。（その後、いろいろ調べて不満な部分をカスタマイズしていったみたいな）</p>\n<p>「Sassを覚えよう！」と思っている方は、この体系的な１冊を読むことをおすすめします。</p>\n<div class=\"cstmreba\">\n<div class=\"booklink-box\">\n<div class=\"booklink-image\"><a href=\"https://www.amazon.co.jp/exec/obidos/asin/4844334662/haniwaman-22/\" target=\"_blank\"  rel=\"noopener\"><img src=\"https://images-fe.ssl-images-amazon.com/images/I/51uHxc179CL._SL160_.jpg\" style=\"border: none;\" /></a></div>\n<div class=\"booklink-info\">\n<div class=\"booklink-name\"><a href=\"https://www.amazon.co.jp/exec/obidos/asin/4844334662/haniwaman-22/\" target=\"_blank\"  rel=\"noopener\">Web制作者のためのSassの教科書 これからのWebデザインの現場で必須のCSSメタ言語</a></p>\n<div class=\"booklink-powered-date\">posted with <a href=\"https://yomereba.com\" rel=\"nofollow noopener\" target=\"_blank\">ヨメレバ</a></div>\n</div>\n<div class=\"booklink-detail\">平澤 隆,森田 壮 インプレス 2013-09-13    </div>\n<div class=\"booklink-link2\">\n<div class=\"shoplinkamazon\"><a href=\"https://www.amazon.co.jp/exec/obidos/asin/4844334662/haniwaman-22/\" target=\"_blank\"  rel=\"noopener\">Amazon</a></div>\n<div class=\"shoplinkkindle\"><a href=\"https://www.amazon.co.jp/exec/obidos/ASIN/B00FMLD7UC/haniwaman-22/\" target=\"_blank\"  rel=\"noopener\">Kindle</a></div>\n<div class=\"shoplinkrakuten\"><a href=\"https://hb.afl.rakuten.co.jp/hgc/117225c0.b43e75d1.117225c1.f4ba597a/yomereba_main_201901021539467321?pc=http%3A%2F%2Fbooks.rakuten.co.jp%2Frb%2F12451132%2F%3Fscid%3Daf_ich_link_urltxt%26m%3Dhttp%3A%2F%2Fm.rakuten.co.jp%2Fev%2Fbook%2F\" target=\"_blank\"  rel=\"noopener\">楽天ブックス</a></div>\n</p></div>\n</div>\n<div class=\"booklink-footer\"></div>\n</div>\n</div>\n<h2><span id=\"i-8\">おわり</span></h2><div class=\"matome\"><div class=\"matome-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"></div><div class=\"matome-twitter\"><a href=\"https://twitter.com/haniwa008?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\" data-show-screen-name=\"false\" data-size=\"large\" data-lang=\"ja\" data-show-count=\"true\">Follow @haniwa008</a><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></div></div><!-- /matome -->\n<p>Sassを使うメリットとよく使う機能を４つだけ厳選しました。厳選としたのは、挙げだすとキリがないといいますが、本を一冊書き上げないといけないレベルの文量になるからですね&#8230;。</p>\n<ul class=\"check\">\n<li>変数で管理</li>\n<li>ファイルごとに役割を決めて管理</li>\n<li>使い回しの型を定義できる「mixin」</li>\n<li>「&amp;」で条件分岐</li>\n<li>四則演算</li>\n</ul>\n<p>上記の４つは個人的にSassを使う意義だと思いっているところです。わたしのメリットの箇所を重点的に<a href=\"https://amzn.to/2BSevPn\" rel=\"noopener\" target=\"_blank\">Sassの教科書</a>を読めば、おおよそSassは理解できるのかなと思います。</p>\n<p>もし、わたしのSassの構成が気になる方がいたら、自分用のテンプレートとしてgitで管理しているので、参考にしていただけたらと思います。<br />\n→ <a href=\"https://github.com/haniwaman/template0/tree/master/sass\" rel=\"noopener\" target=\"_blank\">https://github.com/haniwaman/template0/tree/master/sass</a></p>\n","date":"January 04, 2019","categories":[{"name":"CSS","slug":"css"}],"tags":null,"author":{"name":"はにわまん","slug":"haniwaman"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"b7dcfda6-5d2f-501b-9efc-2823ec1f994f"}}}