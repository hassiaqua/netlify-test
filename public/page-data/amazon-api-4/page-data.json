{"componentChunkName":"component---src-templates-post-js","path":"/amazon-api-4/","result":{"data":{"wordpressPost":{"id":"3ec64d82-6f0b-5c42-b04d-4f3b9443f217","title":"「Amazon API」の使い方！④－リクエストURLの作成（PHP）と結果（XML）の確認編－","slug":"amazon-api-4","content":"<div class=\"box box-link\">\n※ 本エントリーは、PA-API4.0時点のものとなります。<strong class=\"marker\">2019年12月1日から新しいバージョン5.0のPA-API（Product Advertising API）と移行</strong>するため、これからPA-APIをご利用の方は、以下のv5.0の記事をご参考ください。</p>\n<blockquote class=\"wp-embedded-content\" data-secret=\"RHElFhcz5H\"><p><a href=\"https://haniwaman.com/pa-api-5/\">4.0から大きく変わった「PA-API v5.0」の使い方！</a></p></blockquote>\n<p><iframe title=\"&#8220;4.0から大きく変わった「PA-API v5.0」の使い方！&#8221; &#8212; HPcode\" class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" src=\"https://haniwaman.com/pa-api-5/embed/#?secret=RHElFhcz5H\" data-secret=\"RHElFhcz5H\" width=\"500\" height=\"282\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe>\n</div>\n<p>前回はリクエストURLを作成する手順の概要を説明しました。<br />\n（→ <a href=\"https://haniwaman.com/amazon-api-3/\">リクエストURL作成の概要</a>）</p>\n<p>今回は実際にPHPでプログラミングしていきましょう！<br />\n動かしてみた方が理解も早いですもんね。</p>\n<div class=\"chat\"><figure class=\"chat-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"><figcaption>はにわまん</figcaption></figure><div class=\"chat-content\">実際にコーディングしていきましょう！</div></div>\n<div id=\"toc_container\" class=\"no_bullets\"><p class=\"toc_title\">目次</p><ul class=\"toc_list\"><li><a href=\"#URLPHP\"><span class=\"toc_number toc_depth_1\">1</span> リクエストURLをPHPで作成</a><ul><li><a href=\"#i\"><span class=\"toc_number toc_depth_2\">1.1</span> 概要と同じ手順で作っています</a></li><li><a href=\"#i-2\"><span class=\"toc_number toc_depth_2\">1.2</span> キーワードは任意に変更してください</a></li></ul></li><li><a href=\"#i-3\"><span class=\"toc_number toc_depth_1\">2</span> リクエストの結果を確認してみる</a></li><li><a href=\"#i-4\"><span class=\"toc_number toc_depth_1\">3</span> おわり</a></li></ul></div>\n<h2><span id=\"URLPHP\">リクエストURLをPHPで作成</span></h2>\n<p>前回説明した手順通りにプログラミングしてみます。<br />\nPHPで書いていきます。</p>\n<p>では、ソースの全体像を！</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-0\">コピー</span><code id=\"code-0\" class=\"php\">header( \"Content-type: text/html; charset=utf-8\" );\r\n\r\n/* アソシエイトタグ */\r\ndefine( \"Associate_tag\", \"**********\" );\r\n/* アクセスキー */\r\ndefine( \"Access_Key_ID\", \"**********\" );\r\n/* シークレットキー */\r\ndefine( \"Secret_Access_Key\", \"**********\" );\r\n\r\n$baseurl = \"http://ecs.amazonaws.jp/onca/xml\";\r\n\r\n/* リクエストのパラメータ作成 */\r\n$params = array();\r\n$params[\"Service\"]\t\t= \"AWSECommerceService\";\r\n$params[\"AWSAccessKeyId\"] = Access_Key_ID;\r\n$params[\"Version\"]\t\t= \"2013-09-01\";\r\n$params[\"Operation\"]\t  = \"ItemSearch\";\r\n$params[\"SearchIndex\"]\t= \"All\";\r\n$params[\"Keywords\"]\t   = \"アナと雪の女王\";\r\n$params[\"AssociateTag\"]   = Associate_tag;\r\n$params[\"ResponseGroup\"]  = \"Large\";\r\n\r\n/* 0.元となるリクエスト */\r\n$base_request = \"\";\r\nforeach ( $params as $k =&gt; $v ) {\r\n\t$base_request .= \"&amp;\" . $k . \"=\" . $v;\r\n}\r\n$base_request = $baseurl . \"?\" . substr( $base_request, 1 );\r\necho \"【0.元となるリクエスト】&lt;br&gt;\" . $base_request . \"&lt;br&gt;&lt;br&gt;\";\r\n\r\n/* 1.タイムスタンプを付ける */\r\n$params[\"Timestamp\"] = gmdate( \"Y-m-d\\TH:i:s\\Z\" );\r\n$base_request .= \"&amp;Timestamp=\" . $params[\"Timestamp\"];\r\necho \"【1.タイムスタンプを付ける】&lt;br&gt;\" . $base_request . \"&lt;br&gt;&lt;br&gt;\";\r\n\r\n/* 2.「RFC 3986」形式でエンコーディング */\r\n$base_request = \"\";\r\nforeach ( $params as $k =&gt; $v ) {\r\n\t$base_request .= \"&amp;\" . $k . \"=\" . rawurlencode( $v );\r\n\t$params[$k] = rawurlencode( $v );\r\n}\r\n$base_request = $baseurl . \"?\" . substr( $base_request, 1 );\r\necho \"【2.「RFC 3986」形式でエンコーディング】&lt;br&gt;\" . $base_request . \"&lt;br&gt;&lt;br&gt;\";\r\n\r\n/* 3.「&amp;」とか消して改行 */\r\n$base_request = preg_replace( \"/.*\\?/\", \"\", $base_request );\r\n$base_request = str_replace( \"&amp;\", \"\\n\", $base_request );\r\necho \"【3.「&amp;」とか消して改行】&lt;br&gt;\" . $base_request . \"&lt;br&gt;&lt;br&gt;\";\r\n\r\n/* 4.パラメーター名で昇順ソート */\r\nksort( $params );\r\n$base_request = \"\";\r\nforeach ( $params as $k =&gt; $v ) {\r\n\t$base_request .= \"&amp;\" . $k . \"=\" . $v;\r\n}\r\n$base_request = substr( $base_request, 1 );\r\n$base_request = str_replace( \"&amp;\", \"\\n\", $base_request );\r\necho \"【4.パラメーター名で昇順ソート】&lt;br&gt;\" . $base_request . \"&lt;br&gt;&lt;br&gt;\";\r\n\r\n/* 5.もう一度「&amp;」でつなぐ */\r\n$base_request = str_replace( \"\\n\", \"&amp;\", $base_request );\r\necho \"【5.もう一度「&amp;」でつなぐ】&lt;br&gt;\" . $base_request . \"&lt;br&gt;&lt;br&gt;\";\r\n\r\n/* 6.3行を頭に追加 */\r\n$parsed_url = parse_url( $baseurl );\r\n$base_request = \"GET\\n\" . $parsed_url[\"host\"] . \"\\n\" . $parsed_url[\"path\"] . \"\\n\" . $base_request;\r\necho \"【6.3行を頭に追加】&lt;br&gt;\" . $base_request . \"&lt;br&gt;&lt;br&gt;\";\r\n\r\n/* 7.よく分からんエンコーディング */\r\n$signature = base64_encode( hash_hmac( \"sha256\", $base_request, Secret_Access_Key, true ) );\r\n$signature = rawurlencode( $signature );\r\necho \"【7.よく分からんエンコーディング】&lt;br&gt;\" . $signature . \"&lt;br&gt;&lt;br&gt;\";\r\n\r\n/* 8.「Signature」として最後に追加 */\r\n$base_request = \"\";\r\nforeach ( $params as $k =&gt; $v ) {\r\n\t$base_request .= \"&amp;\" . $k . \"=\" . $v;\r\n}\r\n$base_request = $baseurl . \"?\" . substr( $base_request, 1 ) . \"&amp;Signature=\" . $signature;\r\necho \"【8.「Signature」として最後に追加】&lt;br&gt;\" . $base_request . \"&lt;br&gt;&lt;br&gt;\";\r\n\r\necho \"&lt;a href=\\\"\" . $base_request . \"\\\" target=\\\"_blank\\\"&gt;XML結果&lt;/a&gt;&lt;br&gt;\";\r\n</code></pre>\n<p>アスタリスク（*）で書かれた部分、</p>\n<ul class=\"check\">\n<li>アソシエイトタグ</li>\n<li>アクセスキー</li>\n<li>シークレットキー</li>\n</ul>\n<p>を自分のものを入力してもらえれば、実行できるはずです！<br />\nアソシエイトタグの取得方法は、第一回（→ <a href=\"https://haniwaman.com/amazon-api-1/\">アソシエイトID（タグ）登録編</a>）で、<br />\nアクセスキーとシークレットキーは第二回（→ <a href=\"https://haniwaman.com/amazon-api-2/\">アクセスキーとシークレットキーの取得</a>）で</p>\n<p>それぞれ説明しています。</p>\n<p>あと、PHPプログラムの動作確認になりますので、<br />\n環境がない方は、XAMPPとかでローカル開発環境を用意すると良いかと思います。<br />\n→ <a href=\"https://haniwaman.com/local-apache/\">超簡単！PHPプログラムをローカルで動作確認するための環境構築方法</a></p>\n<h3><span id=\"i\">概要と同じ手順で作っています</span></h3>\n<p>コメントにある、「0.元となるリクエスト」とかは、<br />\n第3回の「リクエストURL作成の概要」と紐づく形になっています。<br />\n（→ <a href=\"https://haniwaman.com/amazon-api-3/\">リクエストURL作成の概要</a>）</p>\n<p>プログラムとしてはかなり無駄な部分が多いですけどね・・・。</p>\n<p>どういう処理を行っているかは、第3回のリクエストURL作成の概要と見比べていただければと思います。</p>\n<h3><span id=\"i-2\">キーワードは任意に変更してください</span></h3>\n<p><code>$params[\"Keywords\"] = \"アナと雪の女王\";</code>で、商品のキーワードを設定しています。</p>\n<p>上のソースでは、わたしが好きな「アナと雪の女王」をキーワードにしてますが、任意に変更しても良いので好きなやつにしてもらってかまいません。</p>\n<h2><span id=\"i-3\">リクエストの結果を確認してみる</span></h2>\n<p>上のプログラムを実行すると、各フェーズでできる値（文字列）と一番下に結果というリンクが表示されるかと思います。</p>\n<p>こんな感じ。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2017/12/amazon_api_25.png\" alt=\"\" class=\"alignnone size-full wp-image-13965\" /></p>\n<p>「結果」リンクをクリックしてもらうと、Amazonへリクエストが送られ、結果を返してくれるようになります。</p>\n<p>では、押してみましょう！</p>\n<p>すると、以下のような感じの結果が返ってくるはずです。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2017/12/amazon_api_26.png\" alt=\"\" class=\"alignnone size-full wp-image-13967\" srcset=\"https://haniwaman.com/wp-content/uploads/2017/12/amazon_api_26.png 570w, https://haniwaman.com/wp-content/uploads/2017/12/amazon_api_26-150x150.png 150w\" sizes=\"(max-width: 570px) 100vw, 570px\" /></p>\n<p>これはXML形式のファイルで、商品に関する様々な情報が書かれています。</p>\n<p>このようにAmazonの結果は、XML形式で返ってきます。</p>\n<p>もちろんそもままでは扱えないので、プログラムで分解してあげて、分かりやすい形に変換してあげる必要がありますね。</p>\n<p>それはまた次回に説明します！</p>\n<p>今回は、Amazonからの結果はXML形式で返ってくることだけを覚えておいてください。</p>\n<h2><span id=\"i-4\">おわり</span></h2><div class=\"matome\"><div class=\"matome-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"></div><div class=\"matome-twitter\"><a href=\"https://twitter.com/haniwa008?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\" data-show-screen-name=\"false\" data-size=\"large\" data-lang=\"ja\" data-show-count=\"true\">Follow @haniwa008</a><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></div></div><!-- /matome -->\n<p>リクエストURLの作成（PHP）と結果（XML）の確認でした。<br />\nまぁ、リクエストURLの作成と言っても、コードを貼っただけですが・・・。</p>\n<p>次回は、Amazonから返ってきたXMLファイルを読み取って、<br />\nわかりやすい形に変換して表示させてみましょう！</p>\n<div class=\"box box-link\">\n※ 以下エントリーは、PA-API4.0時点のものとなります。<strong class=\"marker\">2019年12月1日から新しいバージョン5.0のPA-API（Product Advertising API）と移行</strong>するため、これからPA-APIをご利用の方は、以下のv5.0の記事をご参考ください。</p>\n<blockquote class=\"wp-embedded-content\" data-secret=\"RHElFhcz5H\"><p><a href=\"https://haniwaman.com/pa-api-5/\">4.0から大きく変わった「PA-API v5.0」の使い方！</a></p></blockquote>\n<p><iframe title=\"&#8220;4.0から大きく変わった「PA-API v5.0」の使い方！&#8221; &#8212; HPcode\" class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" src=\"https://haniwaman.com/pa-api-5/embed/#?secret=RHElFhcz5H\" data-secret=\"RHElFhcz5H\" width=\"500\" height=\"282\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe>\n</div>\n<p>第1回：<a href=\"https://haniwaman.com/amazon-api-1/\">アソシエイトタグの取得</a><br />\n第2回：<a href=\"https://haniwaman.com/amazon-api-2/\">アクセスキーとシークレットキーの取得</a><br />\n第3回：<a href=\"https://haniwaman.com/amazon-api-3/\">リクエストURL作成の概要</a><br />\n第4回：<a href=\"https://haniwaman.com/amazon-api-4/\">リクエストURLの作成（PHP）と結果（XML）の確認</a><br />\n第5回：<a href=\"https://haniwaman.com/amazon-api-5/\">リクエスト結果（XML）の表示</a><br />\n第6回：<a href=\"https://haniwaman.com/amazon-api-6/\">パラメーターの種類とか</a><br />\n最終回：<a href=\"https://haniwaman.com/amazon-api-7/\">実際に作ってみよう</a></p>\n","date":"December 18, 2017","categories":[{"name":"Web API","slug":"web-api"}],"tags":null,"author":{"name":"はにわまん","slug":"haniwaman"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"3ec64d82-6f0b-5c42-b04d-4f3b9443f217"}}}