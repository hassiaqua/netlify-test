{"componentChunkName":"component---src-templates-post-js","path":"/comprehensive-layout/","result":{"data":{"wordpressPost":{"id":"4663edc2-7191-5243-b7de-b68493fb2654","title":"コーダー目線で考えるコーディングしやすいデザインカンプ","slug":"comprehensive-layout","content":"<p>Webコーダーとして多くのデザイナーの方とお仕事させていただき、いろんな種類のデザインカンプを見てきました。数をこなす内に、<strong>コーディングしやすいカンプ</strong>と、<strong>コーディングしづらいカンプ</strong>があることに気づきました。</p>\n<p>おそらくデザインカンプの作り方のフォーマットのようなものはなく、デザイナーさんによって作り方がバラバラ（独自の方法？）なのかなと思ったりします。</p>\n<p>自分はデザインカンプを作るスキルがないので細かい部分に言及することはできないのですが、日頃からコーダーのわたしが「<strong class=\"marker\">コーディングしやすい</strong>」と思うデザインカンプについて、コーダー目線で共有できたらと思います。</p>\n<div id=\"toc_container\" class=\"no_bullets\"><p class=\"toc_title\">目次</p><ul class=\"toc_list\"><li><a href=\"#i\"><span class=\"toc_number toc_depth_1\">1</span> コーディングしやすいデザインカンプ</a><ul><li><a href=\"#i-2\"><span class=\"toc_number toc_depth_2\">1.1</span> インナー幅が明確かつ現実的</a></li><li><a href=\"#px\"><span class=\"toc_number toc_depth_2\">1.2</span> 単位はpx</a></li><li><a href=\"#i-3\"><span class=\"toc_number toc_depth_2\">1.3</span> 小数点以下はなし</a></li><li><a href=\"#Web\"><span class=\"toc_number toc_depth_2\">1.4</span> Webで再現できるフォント</a></li><li><a href=\"#i-4\"><span class=\"toc_number toc_depth_2\">1.5</span> パーツ群に揺れがない</a></li><li><a href=\"#i-5\"><span class=\"toc_number toc_depth_2\">1.6</span> レイヤー階層がキレイ</a></li><li><a href=\"#i-6\"><span class=\"toc_number toc_depth_2\">1.7</span> 画像のスライス不要</a></li><li><a href=\"#i-7\"><span class=\"toc_number toc_depth_2\">1.8</span> 色の配色が明確</a></li></ul></li><li><a href=\"#i-8\"><span class=\"toc_number toc_depth_1\">2</span> コーダーへの指示の内容</a><ul><li><a href=\"#i-9\"><span class=\"toc_number toc_depth_2\">2.1</span> デザインカンプから読み取れない部分のみ</a></li><li><a href=\"#i-10\"><span class=\"toc_number toc_depth_2\">2.2</span> 動きの希望がある場合は参考サイトと共に</a></li><li><a href=\"#i-11\"><span class=\"toc_number toc_depth_2\">2.3</span> 画像かテキストか</a></li></ul></li><li><a href=\"#i-12\"><span class=\"toc_number toc_depth_1\">3</span> おわり</a></li></ul></div>\n<h2><span id=\"i\">コーディングしやすいデザインカンプ</span></h2>\n<p>コーダー目線でコーディングしやすいデザインカンプをまとめてみました。</p>\n<h3><span id=\"i-2\">インナー幅が明確かつ現実的</span></h3>\n<p>PCのサイズはモニターのよって幅は大きく異なります。インナーの幅とは、PCで確実に担保すべき幅のことですね。ここが明確でないと、何を基準にコーディングしたらいいか分からなくなります。</p>\n<p><strong class=\"marker\">インナー幅のためのガイド</strong>があると、とてもイメージしやすいです！（こんな感じ）<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/01/breakpoint1-700x758.png\" width=\"520\" alt=\"\" class=\"alignnone size-medium wp-image-12791\" srcset=\"https://haniwaman.com/wp-content/uploads/2019/01/breakpoint1-700x758.png 700w, https://haniwaman.com/wp-content/uploads/2019/01/breakpoint1-768x832.png 768w, https://haniwaman.com/wp-content/uploads/2019/01/breakpoint1-1200x1300.png 1200w, https://haniwaman.com/wp-content/uploads/2019/01/breakpoint1.png 1366w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p>また、<strong class=\"marker\">現実的な幅であることも大事</strong>かと思います。例えば幅が1,500pxのインナー幅で設定されていた場合、インナーの時点ではみ出てしまうPCモニターが出てくるかもしれません。</p>\n<p>個人的にコーディングしやすいと思うインナー幅は、1,000px前後から1,200pxあたりでした。</p>\n<h3><span id=\"px\">単位はpx</span></h3>\n<p>Webの世界の単位はpxです。Illustratorのデザインカンプに多いですが、単位が「mm」や「pt」であることがあります。こちらで変換できるのでそんな問題になったことはないですが、できることなら最初から「px」で作ってあると、認識のズレがなくなるのかなと思います。</p>\n<p>「単位」の設定は環境設定の部分ですね。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2018/11/illustrator-coding-700x479.png\" alt=\"\" class=\"alignnone size-medium wp-image-11009\" srcset=\"https://haniwaman.com/wp-content/uploads/2018/11/illustrator-coding-700x479.png 700w, https://haniwaman.com/wp-content/uploads/2018/11/illustrator-coding-768x526.png 768w, https://haniwaman.com/wp-content/uploads/2018/11/illustrator-coding-1200x821.png 1200w, https://haniwaman.com/wp-content/uploads/2018/11/illustrator-coding.png 1365w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<h3><span id=\"i-3\">小数点以下はなし</span></h3>\n<p>小数点以下の反映はいつも迷います。「これは意図的なのだろうか&#8230;」と。（わたしは小数点以下は無視することが多いです）</p>\n<p><strong class=\"marker\">整数値のデザインカンプだと迷いなくコーディングできる</strong>ので、とてもありがたいです。</p>\n<h3><span id=\"Web\">Webで再現できるフォント</span></h3>\n<p>Webコーダーになってからずっと慣れないのがフォントをどうやって再現しよう&#8230;という点です。これはわたしのスキルや知識不足も大いにあります。</p>\n<p>デバイスフォントで再現できるものだと、わたしはとても喜びます。<strong class=\"marker\">見たこと無いフォントが当たっていると、、めっちゃ調べます</strong>&#8230;笑<br />\n（フリーで使えるWebフォントなどがある場合は、デザインカンプの連携と一緒に教えてもらえると、めちゃくちゃありがたいです&#8230;）</p>\n<h3><span id=\"i-4\">パーツ群に揺れがない</span></h3>\n<p>似たようなパーツの繰り返しなのに、一部だけちょっとデザインが違うと迷ってしまいます。例のごとく、これは意図的なのかどうなのか&#8230;と。</p>\n<p>基本的にそういう細かい部分も再現します。</p>\n<p><strong class=\"marker\">揺れがないようなデザインカンプだと細かい調整がなくなる</strong>ので、コーディングがめちゃくちゃ早くなります。</p>\n<h3><span id=\"i-5\">レイヤー階層がキレイ</span></h3>\n<p><strong class=\"marker\">階層がキレイだと素材の書き出しがめちゃくちゃ楽</strong>です。</p>\n<p>隣にあるオブジェクトが離れていたりすることは意外とあって、探すのに苦労したりします。後は、<strong class=\"marker\">レイヤーの名前も意味のある名前になっていると気持ちいい</strong>なって思います。</p>\n<h3><span id=\"i-6\">画像のスライス不要</span></h3>\n<p>デザインカンプを作る工程が全く分かりませんが、、、複数のオブジェクトが1枚の画像としてドンッと置かれていることがあります。この場合、<strong class=\"marker\">スライスして切り取っていく作業が発生するのですが、神経と時間を使います</strong>。。</p>\n<p>画像の一枚、一枚のオブジェクトが分割されていて、各パーツごとに直感的に書き出しできるようになっていると最高です。</p>\n<h3><span id=\"i-7\">色の配色が明確</span></h3>\n<p>色に統一感がないと、どの色を信じたらいいのか分かりません。信じるもなにもコーダーのわたしはそのデザインを再現するだけなので、黙々と作業するだけですが、、、</p>\n<p>配色が明確だと、Sassの変数であらかじめ値を設定して効率的に作業できるので、とてもコーディングしやすいです。</p>\n<h2><span id=\"i-8\">コーダーへの指示の内容</span></h2>\n<p>コーダーへの指示の方法も、気になる部分をまとめてみました。</p>\n<h3><span id=\"i-9\">デザインカンプから読み取れない部分のみ</span></h3>\n<p>デザインの表面上の情報はいただいたデザインカンプから読み取れます。要素の大きさやフォントの種類、色、などなど。</p>\n<p>デザインカンプから理解できる部分を改めて細く指示を受けると、「なぜあえて指示しているのだろうか？」と、意図を考える時間が生じてしまいます。<br />\n（もしかしたら、わたしだけが感じることなのかもしれませんが、、）</p>\n<p>個人的には、<strong class=\"marker\">デザインカンプから読み取れる部分の指示は必要ない</strong>と思っています。</p>\n<h3><span id=\"i-10\">動きの希望がある場合は参考サイトと共に</span></h3>\n<p>デザインカンプから読み取れない情報としては「動き」の情報があると思います。</p>\n<p>マウスホバーしたときの動きやハンバーガーメニューの動きなどに具体的なイメージがある場合は、<strong class=\"marker\">参考となる動き（参考サイトなど）と一緒に指示</strong>していただけると簡単にイメージすることができます。</p>\n<p>動きは言葉だけでは認識の共有が難しいと思うので、実際に動いているものを見せるのが一番早いのかと思います。</p>\n<h3><span id=\"i-11\">画像かテキストか</span></h3>\n<p>「画像が多めでもいい」ってあらかじめ言っていただけると、とても作業が楽になります。おそらく<strong class=\"marker\">コーダーの多くはできるだけ文字にして再現しよう</strong>と努力します。</p>\n<p>テキスト化する必要のない部分は、あらかじめ教えてもらえると、コーダーは幸せな気持ちになるかと。</p>\n<p>言われなくても、わたしが勝手に判断して画像化するケースもあるので、逆に絶対にテキスト化してほしい部分があれば、あらかじめ指示していただけると助かるかもです。</p>\n<h2><span id=\"i-12\">おわり</span></h2><div class=\"matome\"><div class=\"matome-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"></div><div class=\"matome-twitter\"><a href=\"https://twitter.com/haniwa008?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\" data-show-screen-name=\"false\" data-size=\"large\" data-lang=\"ja\" data-show-count=\"true\">Follow @haniwa008</a><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></div></div><!-- /matome -->\n<p>途中から「何様のつもりで書いているんだ&#8230;」と書く手が止まりそうになりましたが、、コーダーとして仕事しているわたしがデザインカンプについて思っていることを素直にまとめてみました。</p>\n<p>わたしがデザインカンプ作る立場になったら今回のようなことを意識すると思いますし、デザイナーの方は今回のことを意識するとコーダーとより円滑に仕事を進められるかもしれません。</p>\n<p>（もしこの記事で不快に思ったデザイナーの方がいたら、すみません）</p>\n","date":"January 25, 2019","categories":[{"name":"コーダー","slug":"coder"}],"tags":null,"author":{"name":"はにわまん","slug":"haniwaman"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"4663edc2-7191-5243-b7de-b68493fb2654"}}}