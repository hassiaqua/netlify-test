{"componentChunkName":"component---src-templates-post-js","path":"/gatsby/","result":{"data":{"wordpressPost":{"id":"5b4e409a-b3fc-56eb-bd79-385b1381d17d","title":"Gatsby + NetlifyでWordPressを記事管理システムにしちゃう方法","slug":"gatsby","content":"<p>最近流行り始めてきている<strong class=\"marker\">WordPressを管理画面としてだけ扱い</strong>、表向きのサイトの表示は、あらかじめ静的サイトとして変換したものを出しちゃうという方法です。</p>\n<p>色んな技術が絡み合っていて、ほぼWordPressしか触ってこなかったわたしは頭爆発しそうでしたが、全容が体感として理解できると、なんとなく腑に落ちるようになります。</p>\n<p>全体の構成は、Gatsbyの<a href=\"https://www.gatsbyjs.org/\" rel=\"noopener\" target=\"_blank\">公式トップページ</a>の図が分かりやすいです。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/11/gatsby1-700x572.png\" alt=\"\" width=\"700\" class=\"alignnone size-medium wp-image-16757\" srcset=\"https://haniwaman.com/wp-content/uploads/2019/11/gatsby1-700x572.png 700w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby1-1200x980.png 1200w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby1-768x627.png 768w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby1-1536x1255.png 1536w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby1.png 1670w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p>登場人物としては以下の通り。一般的なWordPressしか触ってこなかった人にとっては馴染みがないかもしれませんが、実際に一度流れを掴んでしまえば理解できるはずです（実体験）</p>\n<div class=\"box\">\n<ol>\n<li>WordPressの管理画面で記事を更新する。この記事がデータ元となる。</li>\n<li>GatsbyにてWordPressからデータを取得してHTML、CSS、JavaScriptに変換する。（SPAとして動く）</li>\n<li>GatsbyでビルドされたデータをGithubにて管理する</li>\n<li>NetlifyがGithubでの変更を監視して自動デプロイ → 公開される</li>\n</ol>\n</div>\n<p>ということで、上記の流れを実際に体験しながら見ていきましょう！前提として必要になるのは、インターネットからWordPress管理画面にアクセスできるURLです（わたしはテスト用に用意しました）</p>\n<div id=\"toc_container\" class=\"no_bullets\"><p class=\"toc_title\">目次</p><ul class=\"toc_list\"><li><a href=\"#Gatsby\"><span class=\"toc_number toc_depth_1\">1</span> Gatsbyのインストール</a><ul><li><a href=\"#WordPress\"><span class=\"toc_number toc_depth_2\">1.1</span> WordPressの記事を読み込む設定</a></li></ul></li><li><a href=\"#GatsbyGithub\"><span class=\"toc_number toc_depth_1\">2</span> GatsbyのサイトをGithubにプッシュ</a></li><li><a href=\"#Netlify\"><span class=\"toc_number toc_depth_1\">3</span> Netlifyで追跡するリポジトリの設定</a><ul><li><a href=\"#Netlify-2\"><span class=\"toc_number toc_depth_2\">3.1</span> Netlifyでサイトの確認</a></li></ul></li><li><a href=\"#WordPressJAMstack_Deployments\"><span class=\"toc_number toc_depth_1\">4</span> WordPressプラグイン「JAMstack Deployments」で自動連動</a></li><li><a href=\"#Gatsby-2\"><span class=\"toc_number toc_depth_1\">5</span> Gatsbyでの注意ポイント</a><ul><li><a href=\"#WordPress-2\"><span class=\"toc_number toc_depth_2\">5.1</span> WordPressのテーマは反映されない</a></li><li><a href=\"#Xserverwp-json\"><span class=\"toc_number toc_depth_2\">5.2</span> Xserverが/wp-json/へのアクセスを弾く</a></li><li><a href=\"#WordPress-3\"><span class=\"toc_number toc_depth_2\">5.3</span> WordPressの管理画面用のドメインを用意する必要がある</a></li></ul></li><li><a href=\"#WordPress-4\"><span class=\"toc_number toc_depth_1\">6</span> WordPressを静的サイトにするメリット</a><ul><li><a href=\"#i\"><span class=\"toc_number toc_depth_2\">6.1</span> セキュリティが高まる</a></li><li><a href=\"#i-2\"><span class=\"toc_number toc_depth_2\">6.2</span> 表示スピードが早くなる</a></li><li><a href=\"#i-3\"><span class=\"toc_number toc_depth_2\">6.3</span> フロントエンド技術を組み合わせやすい</a></li></ul></li><li><a href=\"#i-4\"><span class=\"toc_number toc_depth_1\">7</span> おわり</a></li></ul></div>\n<h2><span id=\"Gatsby\">Gatsbyのインストール</span></h2>\n<p>※ コマンドはMacでのターミナルにて行っておりますので、あらかじめご了承ください。</p>\n<p>まずは自分の環境にGatsbyをインストールします。手順は以下で解説されている通りです。<br />\n→ <a href=\"https://www.gatsbyjs.org/docs/quick-start\" rel=\"noopener\" target=\"_blank\">Quick Start | GatsbyJS</a></p>\n<p><code>npm</code>のコマンドが使えることが前提ですので、導入出来ていない方はまず<code>npm</code>が扱えるところまで準備してください。<br />\n（以下の記事でちょっとだけ解説しています）</p>\n<blockquote class=\"wp-embedded-content\" data-secret=\"QF7UACrmUP\"><p><a href=\"https://haniwaman.com/gulp-windows/\">5分で終わる！WindowsでGulpを使えるようになるまでの手順</a></p></blockquote>\n<p><iframe title=\"&#8220;5分で終わる！WindowsでGulpを使えるようになるまでの手順&#8221; &#8212; HPcode\" class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" src=\"https://haniwaman.com/gulp-windows/embed/#?secret=QF7UACrmUP\" data-secret=\"QF7UACrmUP\" width=\"500\" height=\"282\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe></p>\n<p>gatsbyをインストールします。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-0\">コピー</span><code id=\"code-0\" class=\"cli\">npm install -g gatsby-cli\r\n</code></pre>\n<p>インストールができたかをバージョンを確認します。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-1\">コピー</span><code id=\"code-1\" class=\"cli\">gatsby -v\r\n</code></pre>\n<p><code>Gatsby CLI version: 2.8.13</code>みたいな表示ができていればOKです！「gatsyby: command not found」が出てる人は何かが上手くいっていないです&#8230;。</p>\n<div class=\"box\">\n<strong>上手くいかなかった場合</strong></p>\n<p>以下のGithubのIssuesで「解決できました！」的な声が多かったので、やってみたら自分も解決しました。「gatsyby: command not found」が出る人は試してみてください（自己責任で&#8230;）</p>\n<p>超ざっくり説明すると、<code>npm install -g</code>した時のインストール先を指定し直している感じです。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-2\">コピー</span><code id=\"code-2\" class=\"cli\">npm config delete prefix</code></pre>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-3\">コピー</span><code id=\"code-3\" class=\"cli\">npm config set prefix /usr/local</code></pre>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-4\">コピー</span><code id=\"code-4\" class=\"cli\">sudo npm i -g gatsby-cli</code></pre>\n<p>改めてバージョン確認。ここでバージョンが表示されればOKです！</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-5\">コピー</span><code id=\"code-5\" class=\"cli\">gatsby -v</code></pre>\n<p>参考：<a href=\"https://github.com/gatsbyjs/gatsby/issues/2137\" rel=\"noopener\" target=\"_blank\">https://github.com/gatsbyjs/gatsby/issues/2137</a>\n</div>\n<p>次に、Gatsbyでサイトを作成します。「gatsbywp」は自由なサイト名でOKです。その名前のフォルダと中身が出来上がります。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-6\">コピー</span><code id=\"code-6\" class=\"cli\">gatsby new gatsbywp https://github.com/GatsbyCentral/gatsby-starter-wordpress\r\n</code></pre>\n<p>標準のGatsbyでは、WordPressのデータを取得できないので、WordPressからデータを取得するためのもろもろを含んだ「<a href=\"https://www.gatsbyjs.org/starters/GatsbyCentral/gatsby-starter-wordpress/\" rel=\"noopener\" target=\"_blank\">gatsby-starter-wordpress</a>」を使ってサイトを作っていきます（ACFの値も取れるのが凄い&#8230;）</p>\n<p>こんな感じのフォルダが出来上がります。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/11/gatsby2.png\" alt=\"\" width=\"420\" class=\"alignnone size-full wp-image-16760\" /></p>\n<p>そして、作成されたフォルダに移動します。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-7\">コピー</span><code id=\"code-7\" class=\"cli\">cd gatsbywp\r\n</code></pre>\n<p><code>develop</code>すると開発環境（サーバー）が立ち上がります。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-8\">コピー</span><code id=\"code-8\" class=\"cli\">gatsby develop\r\n</code></pre>\n<p>ターミナル上にアクセスできるURLが表示されるので、アクセスして表示を確認することが可能です。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/11/gatsby3-700x93.png\" alt=\"\" width=\"500\" class=\"alignnone size-medium wp-image-16761\" srcset=\"https://haniwaman.com/wp-content/uploads/2019/11/gatsby3-700x93.png 700w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby3-768x102.png 768w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby3.png 840w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<h3><span id=\"WordPress\">WordPressの記事を読み込む設定</span></h3>\n<p><span class=\"filename\">gatsby-config.js</span>を編集して、指定したWordPressサイトから記事情報を取得できるようにします。</p>\n<p>書き換える場所は2つだけで、1つ目は、<code>baseUrl</code>を取得したいドメインを指定してあげてください。2つ目は、<code>includedRoutes</code>で、ここにWP REST APIで取得対象となるパスを指定してあげます。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-9\">コピー</span><code id=\"code-9\" class=\"js\">module.exports = {\r\n  siteMetadata: {\r\n    title: 'Gatsby + WordPress Starter',\r\n  },\r\n  plugins: [\r\n    'gatsby-plugin-react-helmet',\r\n    'gatsby-plugin-sass',\r\n    {\r\n      resolve: 'gatsby-source-wordpress',\r\n      options: {\r\n        // The base url to your WP site.\r\n        baseUrl: 'haniwaman.com', // ご自身のWordPressサイトのドメイン\r\n        // WP.com sites set to true, WP.org set to false\r\n        hostingWPCOM: false,\r\n        // The protocol. This can be http or https.\r\n        protocol: 'https',\r\n        // Use 'Advanced Custom Fields' WordPress plugin\r\n        useACF: false,\r\n        auth: {},\r\n        // Set to true to debug endpoints on 'gatsby build'\r\n        verboseOutput: true,\r\n        includedRoutes: [\r\n          \"**/categories\",\r\n          \"**/posts\",\r\n          \"**/pages\",\r\n          \"**/media\",\r\n          \"**/taxonomies\",\r\n          \"**/users\",\r\n          \"**/tags\",\r\n        ],\r\n      },\r\n    },\r\n    'gatsby-plugin-sharp',\r\n    'gatsby-transformer-sharp',\r\n    {\r\n      // Removes unused css rules\r\n      resolve:'gatsby-plugin-purgecss',\r\n      options: {\r\n        // Activates purging in gatsby develop\r\n        develop: true,\r\n        // Purge only the main css file\r\n        purgeOnly: ['/all.sass'],\r\n      },\r\n    }, // must be after other CSS plugins\r\n    'gatsby-plugin-netlify', // make sure to keep it last in the array\r\n  ],\r\n}</code></pre>\n<p><code>build</code>でWordPressデータを取得してみます。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-10\">コピー</span><code id=\"code-10\" class=\"cli\">gatsby build\r\n</code></pre>\n<p>上手くいけば、<code>gatsby develop</code>で、対象の記事が反映されたサイトが作られているはずです！<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/11/gatsby10-700x406.png\" alt=\"\" width=\"700\" class=\"alignnone size-medium wp-image-16774\" srcset=\"https://haniwaman.com/wp-content/uploads/2019/11/gatsby10-700x406.png 700w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby10-1200x695.png 1200w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby10-768x445.png 768w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby10-1536x890.png 1536w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby10-2048x1187.png 2048w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<h2><span id=\"GatsbyGithub\">GatsbyのサイトをGithubにプッシュ</span></h2>\n<p>Netlifyで管理してもらうために、Gatsbyで作成した静的なサイトをGithubで管理します。Githubで何かリポジトリを作って先ほど作成したGatsbyのサイトを管理してあげてください。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/11/gatsby4-700x325.png\" alt=\"\" width=\"700\" class=\"alignnone size-medium wp-image-16764\" srcset=\"https://haniwaman.com/wp-content/uploads/2019/11/gatsby4-700x325.png 700w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby4-1200x557.png 1200w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby4-768x356.png 768w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby4-1536x713.png 1536w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby4.png 1996w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<h2><span id=\"Netlify\">Netlifyで追跡するリポジトリの設定</span></h2>\n<p>Netlifyに登録して追跡するリポジトリの設定していきます。（Githubの認証で登録しました）<br />\n→ <a href=\"https://app.netlify.com/\" rel=\"noopener\" target=\"_blank\">Netlify App</a></p>\n<p>「Add New Site」からサイトを登録します。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/11/gatsby5-700x274.png\" alt=\"\" width=\"700\" class=\"alignnone size-medium wp-image-16765\" srcset=\"https://haniwaman.com/wp-content/uploads/2019/11/gatsby5-700x274.png 700w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby5-1200x469.png 1200w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby5-768x300.png 768w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby5-1536x600.png 1536w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby5-2048x800.png 2048w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p>Githubを選択します。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/11/gatsby6-700x391.png\" alt=\"\" width=\"700\" class=\"alignnone size-medium wp-image-16766\" srcset=\"https://haniwaman.com/wp-content/uploads/2019/11/gatsby6-700x391.png 700w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby6-1200x670.png 1200w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby6-768x429.png 768w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby6.png 1518w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p>対象のリポジトリを選択します。Gatsbyで作成したファイルが管理されているリポジトリです。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/11/gatsby7-700x435.png\" alt=\"\" width=\"700\" class=\"alignnone size-medium wp-image-16767\" srcset=\"https://haniwaman.com/wp-content/uploads/2019/11/gatsby7-700x435.png 700w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby7-1200x746.png 1200w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby7-768x477.png 768w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby7.png 1496w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p>追跡するブランチや公開する（デプロイ）対象のフォルダを指定します。今回の場合だと「public」です。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/11/gatsby8-700x832.png\" alt=\"\" width=\"700\" class=\"alignnone size-medium wp-image-16768\" srcset=\"https://haniwaman.com/wp-content/uploads/2019/11/gatsby8-700x832.png 700w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby8-1200x1426.png 1200w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby8-768x913.png 768w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby8-1292x1536.png 1292w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby8.png 1506w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p>NetlifyとGithubが連動すると、<strong class=\"marker\">そのリポジトリにプッシュされる度にNetlifyがデプロイして公開まで持っていってくれます</strong>。</p>\n<h3><span id=\"Netlify-2\">Netlifyでサイトの確認</span></h3>\n<p>Netlifyでサイトを作成すると、1URLが割り当てられます。どのドメインを持っているかは、Settings → Domain managementから確認が可能です。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/11/gatsby9-700x339.png\" alt=\"\" width=\"700\" class=\"alignnone size-medium wp-image-16769\" srcset=\"https://haniwaman.com/wp-content/uploads/2019/11/gatsby9-700x339.png 700w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby9-1200x582.png 1200w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby9-768x372.png 768w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby9-1536x745.png 1536w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby9-2048x993.png 2048w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p>なお、独自ドメインも登録できるので、本番で運用する際は独自ドメイン + HTTPSの設定を行うようにしましょう！<br />\n（※ レンタルサーバーとかでよくあるFTPとかはありません）</p>\n<h2><span id=\"WordPressJAMstack_Deployments\">WordPressプラグイン「JAMstack Deployments」で自動連動</span></h2>\n<p>「JAMstack Deployments」を使えば自動的に連動することができます。</p>\n<blockquote class=\"wp-embedded-content\" data-secret=\"bQHKD3OWGn\"><p><a href=\"https://ja.wordpress.org/plugins/wp-jamstack-deployments/\">JAMstack Deployments</a></p></blockquote>\n<p><iframe title=\"&#8220;JAMstack Deployments&#8221; &#8212; Plugin Directory\" class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" src=\"https://ja.wordpress.org/plugins/wp-jamstack-deployments/embed/#?secret=bQHKD3OWGn\" data-secret=\"bQHKD3OWGn\" width=\"500\" height=\"282\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe></p>\n<p>、WordPress管理画面の設定 → Deploymentsから、そのURLを入力します。REST APIで取得する対象の項目にチェックを入れれば、WordPressで記事が更新される度に、自動的にNetlifyにてデプロイされるようになります。</p>\n<p>まずは、Netlifyにて「Build hooks」でURLを生成します。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/11/gatsby11-700x234.png\" alt=\"\" width=\"700\" class=\"alignnone size-medium wp-image-16778\" srcset=\"https://haniwaman.com/wp-content/uploads/2019/11/gatsby11-700x234.png 700w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby11-1200x401.png 1200w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby11-768x257.png 768w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby11-1536x513.png 1536w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby11-2048x685.png 2048w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p>次に対象となるWordPress側で、「JAMstack Deployments」をインストールして、設定 → Deploymentsから、そのURLを入力。REST APIで取得する対象の項目にチェックを入れれば、WordPressで記事が更新される度に、自動的にNetlifyにてデプロイされるようになります。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/11/gatsby12-700x493.png\" alt=\"\" width=\"700\" class=\"alignnone size-medium wp-image-16779\" srcset=\"https://haniwaman.com/wp-content/uploads/2019/11/gatsby12-700x493.png 700w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby12-1200x846.png 1200w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby12-768x541.png 768w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby12-1536x1083.png 1536w, https://haniwaman.com/wp-content/uploads/2019/11/gatsby12.png 1762w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<h2><span id=\"Gatsby-2\">Gatsbyでの注意ポイント</span></h2>\n<p>注意というか、、はじめて自分でGatsbyを触ってみて感じたことや気づいたことをまとめました。</p>\n<h3><span id=\"WordPress-2\">WordPressのテーマは反映されない</span></h3>\n<p>WordPressはあくまでも<strong class=\"marker\">データを取得元というだけの役割しかありません</strong>。</p>\n<p>Gatsbyを使えば、WordPressの見栄えも含めた今の状態をそのまま静的サイトにしてくれる仕組みと思っていました。実際はそうではなく、あくまでも記事などWordPressのデータの部分だけを吸い上げてSPA（シングルページアプリケーション）にしてくれるといったものです。</p>\n<p>見栄えはどこで決まっているかというと、Gatsby側のテーマが反映されるといった仕組みです。なので、WordPressと同様の見栄えになるなら、Gatsbyで似たようなテーマを作る必要があります&#8230;</p>\n<h3><span id=\"Xserverwp-json\">Xserverが/wp-json/へのアクセスを弾く</span></h3>\n<p>REST APIでWordPress情報を取得する上で必要なのが/wp-json/なのですが、Xserverは海外からのアクセスを拒否しているため、<strong class=\"marker\">Netlifyが403エラーを返します</strong>。</p>\n<p>Xserverのセキュリティ設定より、該当のWordPressが格納されているドメインの「REST APIアクセス制限」をOFFにしてあげてください。</p>\n<p>※ 上記のつまずくポイントは以下の記事で解説されているので、ぜひ合わせてご参考ください。<br />\n参考：<a href=\"https://qiita.com/akashixi/items/9653d0a6522117618e0f\" rel=\"noopener\" target=\"_blank\">ブログをWordpressからGatsbyに移行したので、その手順とハマったポイントを解説する</a></p>\n<h3><span id=\"WordPress-3\">WordPressの管理画面用のドメインを用意する必要がある</span></h3>\n<p>Netlifyには本番公開用のドメインをセットしますが、もう一つWordPressをブログ更新システムとして使う場合は、<strong class=\"marker\">管理画面用のドメインも用意してあげる</strong>必要があります。</p>\n<p>要するに本番公開用とブログ管理用の2つのドメインが必要になるわけですね。</p>\n<p>Netlifyに適応しているドメインにWordPressを入れることはできないので、一応注意が必要かもしれない部分でした。</p>\n<h2><span id=\"WordPress-4\">WordPressを静的サイトにするメリット</span></h2>\n<p>静的サイトとは、URLのリクエストに対して、そのURLのファイルをそのまま提供するような流れのことですね。</p>\n<p>WordPressをわざわざ静的サイトに直して公開する手法が流行っているのには、それなりの理由があります。何かいいことがあるから流行るわけですね&#8230;。</p>\n<h3><span id=\"i\">セキュリティが高まる</span></h3>\n<p>WordPressはPHPからDBにアクセスしてサイトを表示しています。このようなリクエストに応じてサイトの表示を変更するサイトを動的なサイトと言ったりしますが、動的なサイトでは、DBにアクセス出来てしまうがゆえにそこを狙った攻撃を起こされやすかったりします。</p>\n<p>サイトを静的にすれば、ユーザーはリクエストしたページを読みにいくことしかできないので、DBを書き換えるなどのセキュリティ的なリスクが大きく軽減されることになります。</p>\n<h3><span id=\"i-2\">表示スピードが早くなる</span></h3>\n<p>動的なサイトはDBへアクセスする分の処理時間が必要になってきます。URLを解析して → 必要な情報をDBに問い合わせて → 結果をPHPでいい感じに変換して表示する、といった流れが起きます。</p>\n<p>静的サイトの場合は、HTMLファイルをそのまま表示するだけなので、表示の重さを決めるのは基本的にはファイルの重さだけになります。</p>\n<p>また、GatsbyではSPA（シングルページアプリケーション）といって、ページ遷移の際に<strong class=\"marker\">更新が必要な箇所だけ書き換える</strong>と言った動きをしてくれるので、ページがロードされているような感覚が持たずにサイトを閲覧することができるようになります。</p>\n<h3><span id=\"i-3\">フロントエンド技術を組み合わせやすい</span></h3>\n<p>WordPress単体でサイトを作ると、WordPress特有のお作法だったり、jQueryを使う必要が出てきたりと、<strong class=\"marker\">フロントエンド技術者にとっては取っ付きにくいシステム</strong>だったりします（という風に聞きました）</p>\n<p>とはいえ「WordPressの管理画面は便利なのになー」って声もあったりして、そのWordPressのCMSとしての素晴らしい部分と、先進的なフロントエンド技術との融合が今回紹介しているGatsbyだったりするわけですね。</p>\n<p>静的サイトジェネレーターでは技術の組み合わせがとても柔軟に行えるので、「CMSは○○」「フロントエンドは○○」「ホスティングは○○」みたいな案件ごとに最適な選び方ができるかもしれません。<br />\n（わたしはフロントエンドに詳しくないですが、ゴリゴリのフロントエンドエンジニアの方と組む際はこういったケースも考えられるかもしれません）</p>\n<h2><span id=\"i-4\">おわり</span></h2><div class=\"matome\"><div class=\"matome-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"></div><div class=\"matome-twitter\"><a href=\"https://twitter.com/haniwa008?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\" data-show-screen-name=\"false\" data-size=\"large\" data-lang=\"ja\" data-show-count=\"true\">Follow @haniwa008</a><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></div></div><!-- /matome -->\n<p>Gatsby + NetlifyでWordPressをブログを更新するためだけのシステムにしてしまう方法でした。<strong class=\"marker\">WordPress管理画面のサーバーサイドと表示されるためのフロントエンドを切り離せる</strong>のが一番のいいところなのかもしれません。</p>\n<p>これまでWordPressしか触ってこなかった人にとっては最初は馴染みくいかもしれませんが、手順さえ体験してしまえばなんとなくは理解できるようになってきます。（そもそものReact.jsとかフロンエンド寄りのスキルを上げていかないとなんともならないって状態にはなるかと。。）</p>\n<p>流れだけを掴むなら割と簡単なので、ぜひお時間作って試して見てください！</p>\n","date":"November 29, 2019","categories":[{"name":"WordPress","slug":"wordpress"}],"tags":null,"author":{"name":"はにわまん","slug":"haniwaman"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"5b4e409a-b3fc-56eb-bd79-385b1381d17d"}}}