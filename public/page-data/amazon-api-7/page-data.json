{"componentChunkName":"component---src-templates-post-js","path":"/amazon-api-7/","result":{"data":{"wordpressPost":{"id":"40073985-1a72-546a-b356-b87bf7b48e55","title":"「Amazon API」の使い方！[最終回]－実際に作ってみよう－","slug":"amazon-api-7","content":"<div class=\"box box-link\">\n※ 本エントリーは、PA-API4.0時点のものとなります。<strong class=\"marker\">2019年12月1日から新しいバージョン5.0のPA-API（Product Advertising API）と移行</strong>するため、これからPA-APIをご利用の方は、以下のv5.0の記事をご参考ください。</p>\n<blockquote class=\"wp-embedded-content\" data-secret=\"GxF2Z6YBz5\"><p><a href=\"https://haniwaman.com/pa-api-5/\">4.0から大きく変わった「PA-API v5.0」の使い方！</a></p></blockquote>\n<p><iframe title=\"&#8220;4.0から大きく変わった「PA-API v5.0」の使い方！&#8221; &#8212; HPcode\" class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" src=\"https://haniwaman.com/pa-api-5/embed/#?secret=GxF2Z6YBz5\" data-secret=\"GxF2Z6YBz5\" width=\"500\" height=\"282\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe>\n</div>\n<p>最終回としてAmazon APIを使って簡単なサンプルを作っていきましょう！</p>\n<p>エントリーのサブタイトルで「最安値やランキング取得できるよ」と言っているので、最安値を取得するサービス（※サービスとも言いがたいものがですが）を作ってみようと思います。</p>\n<p>では、いってみましょう！</p>\n<div class=\"chat\"><figure class=\"chat-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"><figcaption>はにわまん</figcaption></figure><div class=\"chat-content\">Amazon APIシリーズの最終回です！</div></div>\n<div id=\"toc_container\" class=\"no_bullets\"><p class=\"toc_title\">目次</p><ul class=\"toc_list\"><li><a href=\"#API\"><span class=\"toc_number toc_depth_1\">1</span> サービスの概要とAPIの制限の確認</a><ul><li><a href=\"#i\"><span class=\"toc_number toc_depth_2\">1.1</span> 作っていくサービス</a></li><li><a href=\"#i-2\"><span class=\"toc_number toc_depth_2\">1.2</span> 利用するパラメーター</a></li><li><a href=\"#i-3\"><span class=\"toc_number toc_depth_2\">1.3</span> 実現できること、実現できないこと</a></li></ul></li><li><a href=\"#Amazon_API\"><span class=\"toc_number toc_depth_1\">2</span> Amazon APIを使って最安値を取得しよう！</a></li><li><a href=\"#i-4\"><span class=\"toc_number toc_depth_1\">3</span> おわり</a></li></ul></div>\n<h2><span id=\"API\">サービスの概要とAPIの制限の確認</span></h2>\n<p>作成する前に、どういったサービスを作るのかと、<strong><span style=\"color: #ff0000;\">Amazon APIでどこまで実現できるのか</span></strong>を確認しておきます。</p>\n<p>前回までで、Amazon APIのおおよその概要やプログラミングのイメージはできていると思います。</p>\n<p>ただ、いざ作ろうとなるとパラメーターの組み合わせの制限とかあって、<strong>思ったのができねーじゃねーか</strong>ってことがよくあります。</p>\n<p>今回作るサービスではAmazon APIの仕様から実現できるところと実現できないところをハッキリと明示します。</p>\n<p>ですので、パラメーターがごちゃごちゃで良くわからないという方は切り分けの部分も合わせて参考にしてもらえればと思います。</p>\n<h3><span id=\"i\">作っていくサービス</span></h3>\n<p>Amazonの商品群をキーワードで検索して価格が安い順番に並び替えるサービスです。</p>\n<p>文字にすると簡単です。あとは、Amazon APIの仕様とにらめっこして実現できることと、実現できないところを切り分けていきます。</p>\n<h3><span id=\"i-2\">利用するパラメーター</span></h3>\n<p>Amazon APIではリクエストURLを作成してAmazonサーバーにアクセスし、結果をレスポンスしてもらうという仕組みでした。</p>\n<p>前回（<a href=\"https://haniwaman.com/amazon-api-6/\">「Amazon API」の使い方⑥－パラメーターの種類とか編－</a>）は、パラメーターとして必須のものとオプションとしてつけるものを紹介しました。</p>\n<p>商品を検索して安い順に並び替えるには、どういったパラメーターが必要になりそうか確認しておきましょう。</p>\n<h4>必須のパラメーターとだいたいつけてるパラメーター</h4>\n<ul>\n<li>Service（必須）</li>\n<li>AWSAccessKeyId（必須）</li>\n<li>Operation（必須）</li>\n<li>Timestamp（必須）</li>\n<li>Signature（必須）</li>\n<li>AssociateTag（必須）</li>\n<li>Version</li>\n<li>ResponseGroup</li>\n</ul>\n<p>パラメーターの意味がわからない方は、第6回を参考にしてください。</p>\n<p><a href=\"https://haniwaman.com/amazon-api-6/\">「Amazon API」の使い方⑥－パラメーターの種類とか編－</a></p>\n<h4>商品検索で安い順に並び替えるために必要なパラメーター</h4>\n<p>商品を検索するので、Operationには、「ItemSearch」を指定します。</p>\n<p>そして「ItemSearch」を指定することで選べるようになるパラメーターを指定していきます。</p>\n<ul>\n<li>SearchIndex（必須）</li>\n<li>Keywords</li>\n<li>Sort</li>\n<li>MinimumPrice</li>\n<li>ItemPage</li>\n</ul>\n<p>「ItemSearch」に紐づくパラメーターについて1つずつ解説していきます。</p>\n<h5>SearchIndex</h5>\n<p>Operation=ItemSearchを指定した時に必須となるパラメーターです。</p>\n<p>日本語でわかりやすく言うと、<strong>商品のカテゴリー</strong>を指定するところです。</p>\n<p>Amazonで商品を検索する時にドロップダウンリストで選択できるところです。</p>\n<p><img class=\"alignnone size-full wp-image-7061\" src=\"https://haniwaman.com/wp-content/uploads/2015/12/amazonapi.png\" alt=\"amazonapi\" width=\"995\" height=\"161\" /></p>\n<p>カテゴリは1つしか選択できませんので、今回はDVDに絞って作っていきます。</p>\n<p>SearchIndex=Video</p>\n<p>どんな値が指定できるかは、以下のドキュメントから確認できます。（Amazonを実際に利用してもらうとイメージがわきやすい思います。）<br />\n→ <a href=\"http://docs.aws.amazon.com/ja_jp/AWSECommerceService/latest/DG/LocaleJP.html\" target=\"_blank\" rel=\"noopener\">Locale Information for the JP Marketplace &#8211; Product Advertising API</a></p>\n<h5>Keywords</h5>\n<p>実際に検索したキーワードです。</p>\n<p>これは分かりやすいですね。</p>\n<p>Keywords=[任意のキーワード]</p>\n<h5>Sort</h5>\n<p>並び替え方法を指定します。</p>\n<p>これが少しクセモノで、「SearchIndex」のパラメーターで<strong class=\"marker\">「すべて（All）」と「ブランド（Blended）」を指定した場合は利用できない仕様になっています。</strong></p>\n<p>つまり、Amazon APIで並び替えをしたい場合は、何らかのカテゴリーを指定しなければいけないということです。</p>\n<p>「すべて」のカテゴリーの商品検索からは並び替えできません。</p>\n<p>価格の安い順番に並び替えるので、「price」を指定します。</p>\n<p>このソートの厄介なところが、新品と中古が両方ある場合は、どちらかの安い方でソートされてしまうところです。</p>\n<p><span style=\"color: #0000ff;\"><strong>新品の商品だけに絞ってソートや、中古の商品だけに絞ってソートができないようになってます。</strong></span></p>\n<p>Sort=price</p>\n<h5>MinimumPrice</h5>\n<p>名前から分かると思いますが、最低価格を指定します。</p>\n<p>1,000円以上とかそういうやつですね。</p>\n<p>つけないと、1円の商品が引っかかりすぎて嫌だったので、とりあえず100円以上で設定してみました。</p>\n<p>MinimumPrice=100</p>\n<h5>ItemPage</h5>\n<p>Amazon APIは1度に最高で10件までの商品しか返してくれません。</p>\n<p>11件目以降の商品が欲しい場合は、「ItemPage=2」などと指定して、2ページ目をもらう必要があります。</p>\n<p>ブログとかでいうとページャーのイメージです。</p>\n<p>Amazon APIの仕様として10ページまでの情報しか得られないようになっていて、</p>\n<p>つまり、1回の取得限界が10件、そして取得ページの限界が10ページなので、</p>\n<p><strong class=\"marker\">1回の検索に対して10件×10ページで合計100件までの商品しか取得できないということですね。</strong></p>\n<p>ItemPage=11と指定するとエラーになります。</p>\n<p>今回は最安値を見つけられればいいので、1ページ目だけでいいでしょう。</p>\n<p>ItemPage=1</p>\n<h3><span id=\"i-3\">実現できること、実現できないこと</span></h3>\n<p>長くなってきたので、一旦ここでまとめましょう。</p>\n<h4>カテゴリー「すべて」では並び替えできない！</h4>\n<p>カテゴリーが「すべて」の商品では最安値は取得できません。また、複数のカテゴリーを選択することもできません。<br />\nこのことから、Amazon APIを利用して最安値を取得するには、特定のカテゴリーを指定する必要があります。</p>\n<h4>新品と中古は区別できない！</h4>\n<p>価格での並び替えは、新品の価格も中古の価格も混ざって行われます。<br />\nしたがって、新品だけ中古だけと切り分けて並び替えることはできません。ごちゃまぜです。</p>\n<h4>最大取得件数は100件！</h4>\n<p>結果の最大取得件数は100件です。今回は、最安値を見つけるサービスなので問題はないと思いますが、検索結果をすべて利用したい場合はキーワードやカテゴリーの指定を工夫して100件以内に収める必要があります。</p>\n<h4>価格が取得できない商品がある！</h4>\n<p>あと理由は分かりませんが、価格を取得できない商品があります。（Amazonから返されるレスポンスに価格がない）<br />\nただしソートの処理では、どこからか価格を引っ張っていてその価格に則ってソートされます。</p>\n<p>なので、価格が含まれない商品（※Amazonのページにリンクで飛ぶと価格は存在する）が結果としてかえってきますが、<br />\n正直こちらでは何もできないので、プログラムで弾くかAmazonの対応を待つしかありません。</p>\n<p>といったところでしょうか。</p>\n<p>検索の機能としては不十分なところが多いですが、無料で利用させてもらってる身分としてはなんとも言えないので、</p>\n<p>とりあえず、使える範囲で作っていきましょう！</p>\n<p>ちなみに、<strong class=\"marker\">Amazon APIで利用出来る機能は、Amazonのサイトで検索するときに利用できる機能となんら変わりありません。</strong>（自分が確認した範囲では。）</p>\n<p>Amazon APIを叩いて「なんかしょぼい結果が返ってくるな」と思って、Amazonで同じように検索すると同じようなしょぼい結果が返ってきます。</p>\n<p>要するに、Amazonの検索システムがしょぼi(ry、、、、おっと誰か来たようだ。</p>\n<h2><span id=\"Amazon_API\">Amazon APIを使って最安値を取得しよう！</span></h2>\n<p>さて、長いこと前置きしましたが、実際に作っていきましょう！</p>\n<p>とはいっても、利用するパラメータとかはまとまっているので第4回に作ったプログラムに当てはてたりすればつくれます。</p>\n<p>キーワードはフォームに入力して、そのキーワードにマッチする商品の最安値を取得しましょう。</p>\n<p>カテゴリーは「DVD」で固定します。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-0\">コピー</span><code id=\"code-0\" class=\"php\">&lt;!DOCTYPE html&gt;\r\n&lt;html lang=&quot;ja&quot;&gt;\r\n&lt;head&gt;\r\n&lt;title&gt;Amazon APIテスト&lt;/title&gt;\r\n&lt;meta charset=&quot;utf-8&quot;&gt;\r\n&lt;/head&gt;\r\n \r\n&lt;body&gt;\r\n \r\n&lt;?php\r\n \r\n//Enter your IDs\r\ndefine(&quot;Associate_tag&quot;, &quot;*****&quot;); // アソシエイトタグ\r\ndefine(&quot;Access_Key_ID&quot;, &quot;******************&quot;); // アクセスキー\r\ndefine(&quot;Secret_Access_Key&quot;, &quot;**************************************&quot;); // シークレットキー\r\n \r\nItemSearch(&quot;Video&quot;, &quot;アナと雪の女王&quot;); // Videosを選択、「アナと雪の女王」は好きなキーワードを選んでください。\r\n \r\n//Set up the operation in the request\r\nfunction ItemSearch($SearchIndex, $Keywords){\r\n \r\n\t$baseurl = &quot;https://webservices.amazon.co.jp/onca/xml&quot;;\r\n \r\n\t// リクエストのパラメータ作成\r\n\t$params = array();\r\n\t$params[&quot;Service&quot;]\t\t  = &quot;AWSECommerceService&quot;;\r\n\t$params[&quot;AWSAccessKeyId&quot;]   = Access_Key_ID;\r\n\t$params[&quot;Version&quot;]\t\t  = &quot;2013-08-01&quot;;\r\n\t$params[&quot;Operation&quot;]\t\t= &quot;ItemSearch&quot;;\r\n\t$params[&quot;SearchIndex&quot;]\t  = $SearchIndex;\r\n\t$params[&quot;Keywords&quot;]\t\t = $Keywords;\r\n\t$params[&quot;AssociateTag&quot;]\t = Associate_tag;\r\n\t$params[&quot;ResponseGroup&quot;]\t= &quot;ItemAttributes,Offers&quot;;\r\n\t$params[&quot;Sort&quot;]\t\t = &quot;price&quot;;\r\n\t$params[&quot;MinimumPrice&quot;]\t = &quot;100&quot;;\r\n\t$params[&quot;ItemPage&quot;]\t\t = &quot;1&quot;;\r\n\t \r\n\t/* 0.元となるリクエスト */\r\n\t$base_request = &quot;&quot;;\r\n\tforeach ($params as $k =&gt; $v) {\r\n\t\t$base_request .= &quot;&amp;&quot; . $k . &quot;=&quot; . $v;\r\n\t}\r\n\t$base_request = $baseurl . &quot;?&quot; . substr($base_request, 1);\r\n\techo &quot;【0.元となるリクエスト】&lt;br&gt;&quot; . $base_request . &quot;&lt;br&gt;&quot;;\r\n\t \r\n\t/* 1.タイムスタンプを付ける */\r\n\t$params[&quot;Timestamp&quot;] = gmdate(&quot;Y-m-d\\TH:i:s\\Z&quot;);\r\n\t$base_request .= &quot;&amp;Timestamp=&quot; . $params[&#039;Timestamp&#039;];\r\n\techo &quot;【1.タイムスタンプを付ける】&lt;br&gt;&quot; . $base_request . &quot;&lt;br&gt;&quot;;\r\n \r\n\t/* 2.「RFC 3986」形式でエンコーディング */\r\n\t$base_request = &quot;&quot;;\r\n\tforeach ($params as $k =&gt; $v) {\r\n\t\t$base_request .= &#039;&amp;&#039; . $k . &#039;=&#039; . rawurlencode($v);\r\n\t\t$params[$k] = rawurlencode($v);\r\n\t}\r\n\t$base_request = $baseurl . &quot;?&quot; . substr($base_request, 1);\r\n\techo &quot;【2.「RFC 3986」形式でエンコーディング】&lt;br&gt;&quot; . $base_request . &quot;&lt;br&gt;&quot;;\r\n\t \r\n\t/* 3.「&amp;」とか消して改行 */\r\n\t$base_request = preg_replace(&quot;/.*\\?/&quot;, &quot;&quot;, $base_request);\r\n\t$base_request = str_replace(&quot;&amp;&quot;, &quot;\\n&quot;, $base_request);\r\n\t \r\n\techo &quot;【3.「&amp;」とか消して改行】&lt;br&gt;&quot; . $base_request . &quot;&lt;br&gt;&quot;;\r\n\t \r\n\t/* 4.パラメーター名で昇順ソート */\r\n\tksort($params);\r\n\t \r\n\t$base_request = &quot;&quot;;\r\n\tforeach ($params as $k =&gt; $v) {\r\n\t\t$base_request .= &quot;&amp;&quot; . $k . &quot;=&quot; . $v;\r\n\t}\r\n\t$base_request = substr($base_request, 1);\r\n\t$base_request = str_replace(&quot;&amp;&quot;, &quot;\\n&quot;, $base_request);\r\n\techo &quot;【4.パラメーター名で昇順ソート】&lt;br&gt;&quot; . $base_request . &quot;&lt;br&gt;&quot;;\r\n\t \r\n\t/* 5.もう一度「&amp;」でつなぐ */\r\n\t$base_request = str_replace(&quot;\\n&quot;, &quot;&amp;&quot;, $base_request);\r\n\techo &quot;【5.もう一度「&amp;」でつなぐ】&lt;br&gt;&quot; . $base_request . &quot;&lt;br&gt;&quot;;\r\n\t \r\n\t/* 6.3行を頭に追加 */\r\n\t$parsed_url = parse_url($baseurl);\r\n\t$base_request = &quot;GET\\n&quot; . $parsed_url[&#039;host&#039;] . &quot;\\n&quot; . $parsed_url[&#039;path&#039;] . &quot;\\n&quot; . $base_request;\r\n\t \r\n\t//$base_request = &quot;GET\\nwebservices.amazon.com\\n/onca/xml\\n&quot; . $base_request;\r\n\techo &quot;【6.3行を頭に追加】&lt;br&gt;&quot; . $base_request . &quot;&lt;br&gt;&quot;;\r\n\t \r\n\t/* 7.よく分からんエンコーディング */\r\n\t$signature = base64_encode(hash_hmac(&#039;sha256&#039;, $base_request, Secret_Access_Key, true));\r\n\t$signature = rawurlencode($signature);\r\n\techo &quot;【7.よく分からんエンコーディング】&lt;br&gt;&quot; . $signature . &quot;&lt;br&gt;&quot;;\r\n\t \r\n\t/* 8.「Signature」として最後に追加 */\r\n\t$base_request = &quot;&quot;;\r\n\tforeach ($params as $k =&gt; $v) {\r\n\t\t$base_request .= &quot;&amp;&quot; . $k . &quot;=&quot; . $v;\r\n\t}\r\n\t$base_request = $baseurl . &quot;?&quot; . substr($base_request, 1) . &quot;&amp;Signature=&quot; . $signature;\r\n\techo &quot;【8.「Signature」として最後に追加】&lt;br&gt;&quot; . $base_request . &quot;&lt;br&gt;&quot;;\r\n\t \r\n\techo &quot;&lt;a href=\\&quot;&quot; . $base_request . &quot;\\&quot; target=\\&quot;_blank\\&quot;&gt;結果&lt;/a&gt;&quot;;\r\n\t\r\n\t$amazon_xml=simplexml_load_string(file_get_contents($base_request));\r\n\tforeach($amazon_xml-&gt;Items-&gt;Item as $item) {\r\n\t\r\n\t\t$item_title = $item-&gt;ItemAttributes-&gt;Title; // 商品名\r\n\t\t$item_url = $item-&gt;DetailPageURL; // 商品へのURL\r\n\t\t$item_new_price = $item-&gt;OfferSummary-&gt;LowestNewPrice-&gt;FormattedPrice; // 新品商品の価格\r\n\t\t$item_used_price = $item-&gt;OfferSummary-&gt;LowestUsedPrice-&gt;FormattedPrice; // 中古商品の価格\r\n\t\t$item_price = $item-&gt;Offers-&gt;Offer-&gt;OfferListing-&gt;Price-&gt;FormattedPrice; // Amazon商品の価格\r\n\t\r\n\t\techo &quot;&lt;p&gt;&lt;a href=\\&quot;&quot; . $item_url . &quot;\\&quot; target=\\&quot;_blank\\&quot;&gt;&quot; . $item_title . &quot;&lt;/a&gt;&lt;br&gt;&quot;;\r\n\t\techo &quot;（Amazon）&quot; . $item_price . &quot;&lt;br&gt;&quot;;\r\n\t\techo &quot;（新品）&quot; . $item_new_price . &quot;&lt;br&gt;&quot;;\r\n\t\techo &quot;（中古）&quot; . $item_used_price . &quot;&lt;/p&gt;&quot;;\r\n\t}\r\n}\r\n \r\n?&gt;\r\n \r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n</code></pre>\n<p>本当に雑なプログラムですいません。</p>\n<p>実行してもらうと、下の方に検索結果が出てきます。<br />\n<img class=\"alignnone size-full wp-image-7070\" src=\"https://haniwaman.com/wp-content/uploads/2015/12/amazonapi2.png\" alt=\"amazonapi2\" width=\"562\" height=\"569\" /></p>\n<p>価格が3つあります。中古の価格と、新品の価格、そしてAmazonが在庫として持っている商品の価格です。</p>\n<p>中古と新品はAmazon以外の出品者の可能性もあります。</p>\n<p>サービスを作りますと言いつつ、サービスとは言い難いものを紹介しましたが、とりあえずプログラムのイメージをつかんでもらえたらなと思います。</p>\n<p><h2><span id=\"i-4\">おわり</span></h2><div class=\"matome\"><div class=\"matome-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"></div><div class=\"matome-twitter\"><a href=\"https://twitter.com/haniwa008?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\" data-show-screen-name=\"false\" data-size=\"large\" data-lang=\"ja\" data-show-count=\"true\">Follow @haniwa008</a><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></div></div><!-- /matome --><br />\n1年越しに最終回まで書き上げることができました。<br />\n果たして完結しているのかは怪しいところですが、Amazon APIを使って検索を行う方法はなんとなく理解できたのではないでしょうか。</p>\n<p>もっと書きたいことはあるのですが、Amazon APIはパラメーターの組み合わせが複雑で書くのに大変労力がかかるのです・・・。<br />\nということで、<strong>あとはご自身で勉強してください！</strong></p>\n<p>Amazon APIを理解する上で役立ちそうな公式のドキュメントを貼り付けてお別れです。<br />\nどうもありがとうございました。</p>\n<p>日本語のAmazon APIガイド<br />\n→ <a href=\"https://images-na.ssl-images-amazon.com/images/G/09/associates/paapi/dg/index.html?ParameterRestrictionsforAvailability.html\" target=\"_blank\" rel=\"noopener\">Product Advertising API</a></p>\n<p>英語のAmazon APIガイド<br />\n→ <a href=\"http://docs.aws.amazon.com/ja_jp/AWSECommerceService/latest/DG/CHAP_ApiReference.html\" target=\"_blank\" rel=\"noopener\">API Reference &#8211; Product Advertising API</a></p>\n<p>検索時のパラメーターの組み合わせ一覧表<br />\n→ <a href=\"http://docs.aws.amazon.com/ja_jp/AWSECommerceService/latest/DG/LocaleJP.html\" target=\"_blank\" rel=\"noopener\">Locale Information for the JP Marketplace &#8211; Product Advertising API</a></p>\n<p>ブラウズノード（Browse Node）をまとめてくれています。（今回は利用してませんが、いずれ使うときがくるはず！）<br />\n→ <a href=\"https://affiliate.amazon.co.jp/gp/associates/help/t100\" target=\"_blank\" rel=\"noopener\">Amazon アソシエイト（アフィリエイト） &#8211; ヘルプ</a></p>\n<div class=\"box box-link\">\n※ 以下エントリーは、PA-API4.0時点のものとなります。<strong class=\"marker\">2019年12月1日から新しいバージョン5.0のPA-API（Product Advertising API）と移行</strong>するため、これからPA-APIをご利用の方は、以下のv5.0の記事をご参考ください。</p>\n<blockquote class=\"wp-embedded-content\" data-secret=\"GxF2Z6YBz5\"><p><a href=\"https://haniwaman.com/pa-api-5/\">4.0から大きく変わった「PA-API v5.0」の使い方！</a></p></blockquote>\n<p><iframe title=\"&#8220;4.0から大きく変わった「PA-API v5.0」の使い方！&#8221; &#8212; HPcode\" class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" src=\"https://haniwaman.com/pa-api-5/embed/#?secret=GxF2Z6YBz5\" data-secret=\"GxF2Z6YBz5\" width=\"500\" height=\"282\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe>\n</div>\n<p>第1回：<a href=\"https://haniwaman.com/amazon-api-1/\">アソシエイトタグの取得</a><br />\n第2回：<a href=\"https://haniwaman.com/amazon-api-2/\">アクセスキーとシークレットキーの取得</a><br />\n第3回：<a href=\"https://haniwaman.com/amazon-api-3/\">リクエストURL作成の概要</a><br />\n第4回：<a href=\"https://haniwaman.com/amazon-api-4/\">リクエストURLの作成（PHP）と結果（XML）の確認</a><br />\n第5回：<a href=\"https://haniwaman.com/amazon-api-5/\">リクエスト結果（XML）の表示</a><br />\n第6回：<a href=\"https://haniwaman.com/amazon-api-6/\">パラメーターの種類とか</a><br />\n最終回：<a href=\"https://haniwaman.com/amazon-api-7/\">実際に作ってみよう</a></p>\n","date":"January 01, 2018","categories":[{"name":"Web API","slug":"web-api"}],"tags":null,"author":{"name":"はにわまん","slug":"haniwaman"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"40073985-1a72-546a-b356-b87bf7b48e55"}}}