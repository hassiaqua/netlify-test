{"componentChunkName":"component---src-templates-post-js","path":"/coding-test/","result":{"data":{"wordpressPost":{"id":"fa10a7ac-1f0f-5b22-b9a3-bd4db7e5fdbe","title":"Webコーディング後にチェック（テスト）しておくべき20のチェックポイント！","slug":"coding-test","content":"<p>Webコーディング後に行っておきたい、チェック項目をまとめました。</p>\n<p>プログラマーとかなら必ずテスト指示書を作りテスト行いエビデンスを取得して、って流れが基本かと思いますが、コーダーってそういうのやっているのかと思いまして&#8230;。本来はコーダーもそういうのやるべきなのではないかと&#8230;。</p>\n<p>プロとしてやるからには、<strong class=\"marker\">品質の担保</strong>はめちゃくちゃ重要です。</p>\n<p>Webコーディング後にチェックしておきたい項目を<strong>チェック方法とともに</strong>まとめました。ぜひ、高品質な成果物にするために、提出する前にチェックしておきましょう！</p>\n<p>（PSD等のデザインカンプからコーディングした想定で考えています）</p>\n<div class=\"chat\"><figure class=\"chat-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"><figcaption>はにわまん</figcaption></figure><div class=\"chat-content\">品質の担保はコーダーの命です...&gt;&lt;</div></div>\n<div id=\"toc_container\" class=\"no_bullets\"><p class=\"toc_title\">目次</p><ul class=\"toc_list\"><li><a href=\"#Web20\"><span class=\"toc_number toc_depth_1\">1</span> Webコーディング後のチェックポイント20</a><ul><li><a href=\"#i\"><span class=\"toc_number toc_depth_2\">1.1</span> １、フォントが適切か</a></li><li><a href=\"#i-2\"><span class=\"toc_number toc_depth_2\">1.2</span> ２、色が適切か</a></li><li><a href=\"#i-3\"><span class=\"toc_number toc_depth_2\">1.3</span> ３、誤字脱字がないか</a></li><li><a href=\"#i-4\"><span class=\"toc_number toc_depth_2\">1.4</span> ４、見出し構造が不自然ではないか</a></li><li><a href=\"#TDK\"><span class=\"toc_number toc_depth_2\">1.5</span> ５、TDKは正しく設定されているか</a></li><li><a href=\"#HTML\"><span class=\"toc_number toc_depth_2\">1.6</span> ６、HTMLタグが正しく対応しているか</a></li><li><a href=\"#alt\"><span class=\"toc_number toc_depth_2\">1.7</span> ７、altが正しく設定されているか</a></li><li><a href=\"#i-5\"><span class=\"toc_number toc_depth_2\">1.8</span> ８、スムーズにレスポンシブ化されるか</a></li><li><a href=\"#i-6\"><span class=\"toc_number toc_depth_2\">1.9</span> ９、水平スクロールしないか</a></li><li><a href=\"#JavaScript\"><span class=\"toc_number toc_depth_2\">1.10</span> １０、JavaScriptの挙動は正しいか</a></li><li><a href=\"#hover\"><span class=\"toc_number toc_depth_2\">1.11</span> １１、リンク要素（ボタン等）のhover時の挙動は設定されているか</a></li><li><a href=\"#box-shadowopacity\"><span class=\"toc_number toc_depth_2\">1.12</span> １２、デザインカンプの効果を再現できているか（box-shadow、opacityなど）</a></li><li><a href=\"#Web\"><span class=\"toc_number toc_depth_2\">1.13</span> １３、デザインカンプとWebサイトを見比べてズレがないか</a></li><li><a href=\"#ChromeFireFoxIESafariEdge\"><span class=\"toc_number toc_depth_2\">1.14</span> １４、Chrome、FireFox、IE、Safari、Edgeで表示 &amp; 動作崩れが起きていないか</a></li><li><a href=\"#ver\"><span class=\"toc_number toc_depth_2\">1.15</span> １５、担保しているブラウザverを把握しているか</a></li><li><a href=\"#i-7\"><span class=\"toc_number toc_depth_2\">1.16</span> １６、リンク切れが起きていないか</a></li><li><a href=\"#i-8\"><span class=\"toc_number toc_depth_2\">1.17</span> １７、画像が圧縮されているか</a></li><li><a href=\"#W3C\"><span class=\"toc_number toc_depth_2\">1.18</span> １８、W3Cバリデータでチェック</a></li><li><a href=\"#i-9\"><span class=\"toc_number toc_depth_2\">1.19</span> １９、コンソールエラー（デベロッパーツール）が出てないか</a></li><li><a href=\"#i-10\"><span class=\"toc_number toc_depth_2\">1.20</span> ２０、ネットワークエラー（デベロッパツール）が出ていないか</a></li></ul></li><li><a href=\"#i-11\"><span class=\"toc_number toc_depth_1\">2</span> おわり</a></li></ul></div>\n<h2><span id=\"Web20\">Webコーディング後のチェックポイント20</span></h2>\n<p>Webコーディング後にチェックしておきたい20のポイントとチェック方法のまとめです！</p>\n<h3><span id=\"i\">１、フォントが適切か</span></h3>\n<p>デザインカンプに入力されている文字には必ずフォントが指定されているはずです。Macの標準のもののあればご触って決めているであろうフォントもあります。</p>\n<h4>合わせるべきフォント</h4>\n<ul>\n<li><strong>カンプが作られた環境で標準で入っているフォント</strong>・・・「ヒラギノ角ゴシック」とか使われがちですが、こういう指定はMacでは表示されるようにはしておくべきです（Windowsも似た感じのフォントにする）</li>\n<li><strong>こだわって選んだであろうフォント</strong>・・・OSの標準にないようなフォントンはWebフォントで代用したり、フォントデータをもらったり、画像にしたり、と再現したいところ（クライアントに確認した方が無難）</li>\n</ul>\n<p>フォント情報は、文字パネルから確認できます。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2018/08/codeing-test.png\" alt=\"\" class=\"alignnone size-full wp-image-8102\" /></p>\n<p>また、どういう指定にしたかは、クライアントに伝えた方がいいかと思います。<br />\n「基本は、Macで&#8221;ヒラギノ角ゴシックW3&#8243;で、Windowsで&#8221;Noto Sans Japanese&#8221;が当たるようにしています。〇〇のフォントは、△△のフォントで代替しています。」みたいな。</p>\n<h3><span id=\"i-2\">２、色が適切か</span></h3>\n<p>背景色や文字色などは「確実に」合わせられる部分だと思います。デザインカンプではある程度、色をまとめて作ってくれているはずなので、Sass使っている方は、色情報は変数に入れておくと、あとからの修正がめっちゃ楽になります。</p>\n<p>わたしは、<span class=\"filename\">_color.scss</span>におおよその色をまとめています。</p>\n<p>PSDからは、文字パネルのカラー、背景色はスポイトツールで色を吸い上げて、<br />\n作成したページからは、「What Font」「ColorPick Eyedropper」などのChrome拡張機能を用いて色を吸い上げて確認が可能です。</p>\n<h3><span id=\"i-3\">３、誤字脱字がないか</span></h3>\n<p>誤字脱字って、コーダーがチェックしなかったら誰もチェックしないんじゃないかって思っています。</p>\n<p>たぶん「どうせコピペだしミスのしようがないでしょ」的な感覚のはずです。言っておきますが、<strong>コピペでもミスありますよ！</strong>（ドヤれない）変な空白が入ったり、もともとあったダミーの一部が残っていたり・・・。</p>\n<p>やはり最終的にはブラウザに表示された文字と、原稿を比較すべきだと思います。</p>\n<p>わたしは以下のツールで原稿と表示されたページの文言を比較しています。<br />\n→ <a href=\"https://difff.jp/\" rel=\"noopener noreferrer\" target=\"_blank\">テキスト比較ツール difff《ﾃﾞｭﾌﾌ》</a><br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2018/08/codeing-test5-700x510.jpg\" alt=\"\" class=\"alignnone size-medium wp-image-8140\" width=\"520\" srcset=\"https://haniwaman.com/wp-content/uploads/2018/08/codeing-test5-700x510.jpg 700w, https://haniwaman.com/wp-content/uploads/2018/08/codeing-test5-768x560.jpg 768w, https://haniwaman.com/wp-content/uploads/2018/08/codeing-test5-1200x875.jpg 1200w, https://haniwaman.com/wp-content/uploads/2018/08/codeing-test5.jpg 1490w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<h3><span id=\"i-4\">４、見出し構造が不自然ではないか</span></h3>\n<p>見出し構造の指示はまずありません。見出しをどう設定するかの裁量は完全にコーダーに委ねられています。だからどうでもいいということではなく、だからこそちゃんとしておきましょう、ということですね。</p>\n<p>以下のブックマークレットを使えば、見出し構造を一括で出してくれます。不自然な箇所は一目瞭然ですね！<br />\n→ <a href=\"https://www.pixelimage.jp/blog/2015/08/bookmarklet_seo.html\" rel=\"noopener noreferrer\" target=\"_blank\">https://www.pixelimage.jp/blog/2015/08/bookmarklet_seo.html</a><br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2018/08/codeing-test4-700x630.jpg\" alt=\"\" class=\"alignnone size-medium wp-image-8139\" width=\"520\" srcset=\"https://haniwaman.com/wp-content/uploads/2018/08/codeing-test4-700x630.jpg 700w, https://haniwaman.com/wp-content/uploads/2018/08/codeing-test4-768x692.jpg 768w, https://haniwaman.com/wp-content/uploads/2018/08/codeing-test4.jpg 954w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<h3><span id=\"TDK\">５、TDKは正しく設定されているか</span></h3>\n<p>TDKとは、タイトル、ディスクリプション、キーワードですね。キーワードはなくてもいいですが、タイトルとディスクリプションは必須です。指定されないことは多いので、とりあえず「どうしますか？」って聞いておくと親切です。</p>\n<p>以下のブックマークレットでチェックできます。<br />\n→ <a href=\"https://www.pixelimage.jp/blog/2015/08/bookmarklet_seo.html\" rel=\"noopener noreferrer\" target=\"_blank\">https://www.pixelimage.jp/blog/2015/08/bookmarklet_seo.html</a></p>\n<h3><span id=\"HTML\">６、HTMLタグが正しく対応しているか</span></h3>\n<p>HTMLの閉じタグが正しく対応しているかのチェックは、<strong class=\"marker\">絶対にやっておきたい</strong>項目です。ここがミスっているとコーダーとしての質を疑われるはずです&#8230;。</p>\n<p>以下のブックマークレットかChrome拡張機能の「HTMLエラーチェッカー」を使って確認しています。<br />\n→ <a href=\"http://tockri.blog78.fc2.com/blog-entry-168.html\" rel=\"noopener noreferrer\" target=\"_blank\">HTML内タグの閉じ忘れをチェックするツール[ブックマークレット]</a><br />\n→ <a href=\"https://chrome.google.com/webstore/detail/html%E3%82%A8%E3%83%A9%E3%83%BC%E3%83%81%E3%82%A7%E3%83%83%E3%82%AB%E3%83%BC/ohdllebchmmponnofchalfkegpjojcaf\" rel=\"noopener noreferrer\" target=\"_blank\">Chrome拡張機能「HTMLエラーチェッカー」</a><br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2018/08/codeing-test3-700x500.jpg\" alt=\"\" class=\"alignnone size-medium wp-image-8138\" width=\"520\" srcset=\"https://haniwaman.com/wp-content/uploads/2018/08/codeing-test3-700x500.jpg 700w, https://haniwaman.com/wp-content/uploads/2018/08/codeing-test3-768x549.jpg 768w, https://haniwaman.com/wp-content/uploads/2018/08/codeing-test3-1200x857.jpg 1200w, https://haniwaman.com/wp-content/uploads/2018/08/codeing-test3.jpg 1211w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<h3><span id=\"alt\">７、altが正しく設定されているか</span></h3>\n<p>画像のaltも指定はされないので、つけるかどうかの裁量はこちらにあります。必須レベルでつけるべきはロゴ画像とかですかね。あとは、文字が書いてあるバナーとかは中身がGoogleに伝わるように指定してあげるべきかと思います。</p>\n<p>アイコンとか画像自体に意味のない？ものは不要という感覚です。</p>\n<p>以下のブックマークレットを使うと、画像とaltを一覧で出してくれます。<br />\n→ <a href=\"https://www.trustworks.biz/blog/2008/04/alt.html\" rel=\"noopener noreferrer\" target=\"_blank\">alt属性を確認するブックマークレット。</a></p>\n<h3><span id=\"i-5\">８、スムーズにレスポンシブ化されるか</span></h3>\n<p>カンプって多くてもPC、タブレット、スマホの3パターンのサイズです。その3つのサイズ時の表示の担保は当たり前として、PC → タブレット、タブレット → スマホの表示をいい感じに保たせるのはコーダーの役割です。</p>\n<p>どのサイズでも不具合なく表示されているか、目視にはなりますが、ウインドウサイズを変更しながら確認しましょう。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2018/08/codeing-test.gif\" alt=\"\" class=\"alignnone size-full wp-image-8149\" width=\"520\" /></p>\n<h3><span id=\"i-6\">９、水平スクロールしないか</span></h3>\n<p>意図的に水平スクロールさせている部分は別ですが、水平スクロールを指摘されると、かなり恥ずかしいです&#8230;。</p>\n<p>320px、786pxで水平スクロールが発生しないかは見ておくといいかと思います。<br />\nまたスマホ実機で見れるなら、実機で確認しておくと発見しやすくなるはずです。</p>\n<h3><span id=\"JavaScript\">１０、JavaScriptの挙動は正しいか</span></h3>\n<p>JavaScriptで追加した処理は確実にテストしなければなりません。条件分岐であったりループなど、コーディングというよりはプログラミングに近いので、JavaScriptの部分だけ別途テスト指示書を作成（テスト項目を洗い出し）してもいいかと思います。</p>\n<h3><span id=\"hover\">１１、リンク要素（ボタン等）のhover時の挙動は設定されているか</span></h3>\n<p>なんか暗黙の了解でユーザーが操作できる要素（インタラクティブコンテンツ）には、hovar時の動きは付けておいて当たり前的な雰囲気があるように思います。</p>\n<p>特に指示がない場合は、とりあえず<code>opacity</code>を当てとくといいかと。</p>\n<h3><span id=\"box-shadowopacity\">１２、デザインカンプの効果を再現できているか（box-shadow、opacityなど）</span></h3>\n<p>めっちゃ細かいですが、レイヤー見てると「効果」とか付いている場合があります。こういうのは極力、再現してあげたい（できない部分も多いですが）<br />\nメジャーなところだと、<code>box-shadow</code>ですかね。</p>\n<h3><span id=\"Web\">１３、デザインカンプとWebサイトを見比べてズレがないか</span></h3>\n<p>（フォントが合わせられない環境だと）完全に一致ってほぼ不可能に近いです。ズレすぎてなければ、特に指摘されることもありません。とはいえ、なんのチェックもしないまま提出するのはやめましょう。</p>\n<p>以下のツールは表示されたページと、画像を透過した状態で重ねられるブラウザ拡張ツールです。<br />\n→ <a href=\"http://www.welldonecode.com/perfectpixel/\" rel=\"noopener noreferrer\" target=\"_blank\">PerfectPixel by WellDoneCode</a></p>\n<p>どれだけズレているかが一瞬で分かります。ズレを確認しながら微調整して指摘されないレベルのシンクロ率（率はクライアントに応じて決める）にしましょう。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2018/08/codeing-test2-700x438.jpg\" alt=\"\" class=\"alignnone size-medium wp-image-8113\" width=\"520\" srcset=\"https://haniwaman.com/wp-content/uploads/2018/08/codeing-test2-700x438.jpg 700w, https://haniwaman.com/wp-content/uploads/2018/08/codeing-test2-768x480.jpg 768w, https://haniwaman.com/wp-content/uploads/2018/08/codeing-test2-1200x750.jpg 1200w, https://haniwaman.com/wp-content/uploads/2018/08/codeing-test2.jpg 1280w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<h3><span id=\"ChromeFireFoxIESafariEdge\">１４、Chrome、FireFox、IE、Safari、Edgeで表示 &amp; 動作崩れが起きていないか</span></h3>\n<p>日本で利用されているTOP5のブラウザでデザイン崩れが起きていないか、JavaScriptの挙動が正しいか、目視レベルで確認しておきましょう。IEがくせ者です。<br />\n（Safariやフォントを確認するためだけにMacを持ってたりします&#8230;）</p>\n<p>各ブラウザのシェア率は以下から確認できます。<br />\n→ <a href=\"http://gs.statcounter.com/\" rel=\"noopener noreferrer\" target=\"_blank\">StatCounter</a><br />\n※ 画像は2018年8月現在<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2018/08/codeing-test3-1-700x394.png\" alt=\"\" class=\"alignnone size-medium wp-image-8116\" width=\"520\" srcset=\"https://haniwaman.com/wp-content/uploads/2018/08/codeing-test3-1-700x394.png 700w, https://haniwaman.com/wp-content/uploads/2018/08/codeing-test3-1-768x432.png 768w, https://haniwaman.com/wp-content/uploads/2018/08/codeing-test3-1-1200x675.png 1200w, https://haniwaman.com/wp-content/uploads/2018/08/codeing-test3-1.png 1280w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<h3><span id=\"ver\">１５、担保しているブラウザverを把握しているか</span></h3>\n<p>目視で確認した、Chrome、FireFox、IE、Safari、Edgeのバージョン。および、CSSで付与したベンダープレフィックスの担保してるバージョンなどは、把握しておいた方がいいかと思います。<br />\n（あとから振り返れたりするので）</p>\n<p>目視で確認とともにバージョンもメモ。<br />\nCSSの対応ブラウザについては、Autoprefixerを使っている方は「browserl.ist」の画像をキャプチャしておけばいいかと思います。<br />\n→ <a href=\"http://browserl.ist/\" rel=\"noopener noreferrer\" target=\"_blank\">browserl.ist</a><br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2018/08/codeing-test4-700x395.png\" alt=\"\" class=\"alignnone size-medium wp-image-8130\" width=\"520\" srcset=\"https://haniwaman.com/wp-content/uploads/2018/08/codeing-test4-700x395.png 700w, https://haniwaman.com/wp-content/uploads/2018/08/codeing-test4-768x433.png 768w, https://haniwaman.com/wp-content/uploads/2018/08/codeing-test4-1200x677.png 1200w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p>Autoprefixerは自動でベンダープレフィックス付けれてくれるツールです。<br />\nわたしはGulpで自動付与されるように設定しています。めっちゃ便利です！<br />\n（参考） → <a href=\"https://haniwaman.com/gulp/\" rel=\"noopener noreferrer\" target=\"_blank\">静的HTMLサイト制作を楽にするGulpの基本的な使い方【Webコーダー向け】</a></p>\n<h3><span id=\"i-7\">１６、リンク切れが起きていないか</span></h3>\n<p>公開後のチェックに当てはまるかもしれませんが、リンク切れの存在は、Googleにとってもユーザーにとってもマイナスの影響しか与えません。<br />\n「Frog」というツールを使って、公開されたら必ずチェックするようにしています。</p>\n<p>404ページは放置が一番よくないので、早期発見がとにかく大事です。</p>\n<p>Frogの使い方<br />\n→ <a href=\"https://haniwaman.com/frog/\" rel=\"noopener noreferrer\" target=\"_blank\">404ページもサイト構成も「Frog」で一括チェック！質の高いWeb制作を行いましょう！</a><br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2018/07/frog0.jpg\" width=\"520\" alt=\"\" /></p>\n<h3><span id=\"i-8\">１７、画像が圧縮されているか</span></h3>\n<p>サイトの重さの要因の大半は画像サイズが大きいことにあります。画像が重たいとGoogleが出すスピードスコアも大幅に減少させる傾向にあるので、スピード対策の中でも画像の圧縮だけは確実に行っておきたいです。</p>\n<p>手動で行うなら下記のツールなどを利用します。<br />\n→ <a href=\"https://haniwaman.com/compression/\">PNG、JPG、GIFを圧縮できるWebサービス</a><br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2017/12/compression.png\" alt=\"\"  width=\"520\" /></p>\n<p>自動で行いたいならGulpに登録してタスクを実行したりできます。<br />\n（参考）→ <a href=\"https://haniwaman.com/gulp/\">静的HTMLサイト制作を楽にするGulpの基本的な使い方【Webコーダー向け】</a></p>\n<h3><span id=\"W3C\">１８、W3Cバリデータでチェック</span></h3>\n<p>W3CはHTMLやCSSの標準規格を決めているところです。要するに、W3Cの規格に沿っていれば「<strong class=\"marker\">書き方としては正しい</strong>」ということになります。<br />\n※ SEO的にいいかどうかは別</p>\n<p>コーディングの1つの答えとして、制作会社などはチェックしているところは多いかと思います。</p>\n<p>HTMLのバリデーター<br />\n→ <a href=\"https://validator.w3.org/\" rel=\"noopener noreferrer\" target=\"_blank\">https://validator.w3.org/</a></p>\n<p>CSSのバリデーター<br />\n→ <a href=\"http://jigsaw.w3.org/css-validator/\" rel=\"noopener noreferrer\" target=\"_blank\">http://jigsaw.w3.org/css-validator/</a></p>\n<p>HTMLに関しては以下のブックマークレットを使えば手軽にチェックできます！（作：<a href=\"https://twitter.com/SasaYukiya\" rel=\"noopener noreferrer\" target=\"_blank\">@SasaYukiya</a>さん）</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-0\">コピー</span><code id=\"code-0\" class=\"txt\">javascript:(function(c){var b=c.createElement(\"form\"),a=c.createElement(\"input\"),d=c.createElement(\"textarea\");b.method=\"post\";b.action=\"https://validator.w3.org/nu/#textarea\";b.enctype=\"multipart/form-data\";b.acceptCharset=\"UTF-8\";a.type=\"checkbox\";a.name=\"showsource\";a.value=\"yes\";a.checked=!0;d.name=\"content\";b.append(a);b.append(d);c.body.append(b);(new Promise(function(b){var a=new XMLHttpRequest;a.open(\"GET\",c.URL,!0);a.onload=function(){b(a.response)};a.send()})).then(function(a){d.value=a;b.submit()})})(document);</code></pre>\n<h3><span id=\"i-9\">１９、コンソールエラー（デベロッパーツール）が出てないか</span></h3>\n<p>デベロッパーツールでコンソールエラーが出ていないか確認しましょう。JavaScriptの記述ミスなどを検知できます。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2018/08/codeing-test5-700x141.png\" alt=\"\" class=\"alignnone size-medium wp-image-8132\" width=\"520\" srcset=\"https://haniwaman.com/wp-content/uploads/2018/08/codeing-test5-700x141.png 700w, https://haniwaman.com/wp-content/uploads/2018/08/codeing-test5-768x155.png 768w, https://haniwaman.com/wp-content/uploads/2018/08/codeing-test5.png 1159w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<h3><span id=\"i-10\">２０、ネットワークエラー（デベロッパツール）が出ていないか</span></h3>\n<p>同じくデベロッパーツールでネットワークのパネルを見ておきましょう。主に404が起きてないか（jsやcss、画像でリンクが繋がっていない箇所）<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2018/08/codeing-test6-700x387.png\" alt=\"\" class=\"alignnone size-medium wp-image-8134\" width=\"520\" srcset=\"https://haniwaman.com/wp-content/uploads/2018/08/codeing-test6-700x387.png 700w, https://haniwaman.com/wp-content/uploads/2018/08/codeing-test6-768x424.png 768w, https://haniwaman.com/wp-content/uploads/2018/08/codeing-test6.png 1160w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<h2><span id=\"i-11\">おわり</span></h2><div class=\"matome\"><div class=\"matome-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"></div><div class=\"matome-twitter\"><a href=\"https://twitter.com/haniwa008?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\" data-show-screen-name=\"false\" data-size=\"large\" data-lang=\"ja\" data-show-count=\"true\">Follow @haniwa008</a><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></div></div><!-- /matome -->\n<p>Webコーディング後にチェック（テスト）しておくべき20のチェックポインでした！</p>\n<p>どこまで真剣にチェックするかは、デザインカンプやクライアントによっても変わってくるところかもしれません。20のチェックポイントを参考にご自身でブラッシュアップしながら高品質なコーディングをしていきましょう！</p>\n","date":"August 25, 2018","categories":[{"name":"コーダー","slug":"coder"}],"tags":null,"author":{"name":"はにわまん","slug":"haniwaman"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"fa10a7ac-1f0f-5b22-b9a3-bd4db7e5fdbe"}}}