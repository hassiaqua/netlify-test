{"componentChunkName":"component---src-templates-post-js","path":"/pc-to-responsive/","result":{"data":{"wordpressPost":{"id":"eac1bf72-97ad-5c14-aa2a-47b5b651989e","title":"PCサイトをレスポンシブ化する時の考え方と注意点","slug":"pc-to-responsive","content":"<p>PCサイトをレスポンシブ化する際の流れと注意点を紹介します。シンプルなサイトであれば数時間で終わります。スマホ対応していないサイトは淘汰されていく時代ですので、ぜひレスポンシブ化をご検討ください！</p>\n<div class=\"chat\"><figure class=\"chat-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"><figcaption>はにわまん</figcaption></figure><div class=\"chat-content\">レスポンシブ化するときの注意点を重要なところだけまとめました！</div></div>\n<div id=\"toc_container\" class=\"no_bullets\"><p class=\"toc_title\">目次</p><ul class=\"toc_list\"><li><a href=\"#i\"><span class=\"toc_number toc_depth_1\">1</span> ビューポートを設定する</a></li><li><a href=\"#100\"><span class=\"toc_number toc_depth_1\">2</span> 画像の最大幅を100%にする</a></li><li><a href=\"#i-2\"><span class=\"toc_number toc_depth_1\">3</span> ボックスの定義を変更</a></li><li><a href=\"#100-2\"><span class=\"toc_number toc_depth_1\">4</span> 固定幅に最大幅100%を設定</a></li><li><a href=\"#i-3\"><span class=\"toc_number toc_depth_1\">5</span> 横並びの解除</a></li><li><a href=\"#NG\"><span class=\"toc_number toc_depth_1\">6</span> 高さ指定は基本NG</a></li><li><a href=\"#i-4\"><span class=\"toc_number toc_depth_1\">7</span> 埋め込み要素をはみ出させない</a></li><li><a href=\"#i-5\"><span class=\"toc_number toc_depth_1\">8</span> 英字に注意！</a></li><li><a href=\"#i-6\"><span class=\"toc_number toc_depth_1\">9</span> 水平スクロールは恥ずかしいと心得る</a></li><li><a href=\"#i-7\"><span class=\"toc_number toc_depth_1\">10</span> おわり</a></li></ul></div>\n<h2><span id=\"i\">ビューポートを設定する</span></h2>\n<p>これがないとレスポンシブが始まらないというほど重要なのが、<strong class=\"marker\">ビューポート</strong>。<br />\n<code>&lt;head&gt;</code>タグ内に以下を追記します。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-0\">コピー</span><code id=\"code-0\" class=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\r\n</code></pre>\n<p>参考： <a href=\"https://developers.google.com/web/tools/lighthouse/audits/has-viewport-meta-tag?hl=ja\" rel=\"noopener\" target=\"_blank\">https://developers.google.com/web/tools/lighthouse/audits/has-viewport-meta-tag?hl=ja</a></p>\n<p>これは、各デバイスでの幅の振る舞いを指定するものです。</p>\n<p><code>width=device-width</code>とすることで、デバイスの幅に応じたpxになります。例えば、iPhone7だと横幅は375pxとして認識されるといった具合です。</p>\n<h2><span id=\"100\">画像の最大幅を100%にする</span></h2>\n<p>レスポンシブデザインでは、スマホサイトで画像がはみ出るケースはとても多いです。画像が絶対にはみ出ないように<code>img</code>タグに以下のような指定をしておくことをおすすめします。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-1\">コピー</span><code id=\"code-1\" class=\"css\">img {\r\n  max-width: 100%;\r\n  height: auto;\r\n}</code></pre>\n<p>最大幅を100%にして、アスペクト比を保つために高さをautoとしています。</p>\n<h2><span id=\"i-2\">ボックスの定義を変更</span></h2>\n<p>HTMLにはボックス要素があります。（厳密にはHTML5からその概念はないのですが、、）<br />\n簡単に言うと、<code>div</code>や<code>p</code>などの幅と高さを持つタグですね。</p>\n<p>ボックス要素を細かく分けると、</p>\n<ul>\n<li>width → 黄色</li>\n<li>padding → 青</li>\n<li>border → 赤</li>\n</ul>\n<p>の3つから成り立っています。</p>\n<div style=\"height: 250px; background: #FFEB3B; border: 18px solid #2196F3; outline: 18px solid #F44336; margin: 36px 26px;\"></div>\n<p>デフォルトの設定では、横幅として認識されるのは、widthのエリアのみ。エリア内に収まるようにwidthを指定しているのに画面からはみ出る場合は、<code>border</code>や<code>padding</code>が考慮されていないことが非常に多いです。いちいち計算するのもめっちゃ面倒くさい。。</p>\n<p>この問題は、<code>border-box</code>を使うことで簡単に解決することができます。<br />\n以下のように指定してください。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-2\">コピー</span><code id=\"code-2\" class=\"css\">*,\r\n*::before,\r\n*::after {\r\n  box-sizing: border-box;\r\n}</code></pre>\n<p>これは、「widthの値にborderとpaddingを含めますよ」という指定になります。「widthとborderとpaddingを足して100%になるように&#8230;」といった計算をしなくて済むのでとても楽になります。</p>\n<p>なお、新規で作る場合は上記のようにサイト全体に適応されるように作りますが、PCからのレスポンシブ化の場合はpaddingに依存した幅にしていることもあります。</p>\n<p>サイトの状態を見ながら、どこに<code>border-box</code>を適応させるかは考える必要があります。個別に適応する場合は、横幅を指定した要素やクラスは<code>box-sizing: border-box;</code>といった考え方で大丈夫です。</p>\n<h2><span id=\"100-2\">固定幅に最大幅100%を設定</span></h2>\n<p>PCサイトでは横幅を指定してあることがほとんどです。よく見るのは、以下のような指定の仕方。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-3\">コピー</span><code id=\"code-3\" class=\"css\">.container {\r\n  width: 1024px;\r\n  margin: 0 auto;\r\n}</code></pre>\n<p>widthが固定値のままだとスマホで確実にはみ出してしまいます。レスポンシブデザインでは、固定値のwidthを設定するなら一緒に最大幅も100%に設定します。具体的には以下のとおり。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-4\">コピー</span><code id=\"code-4\" class=\"css\">.container {\r\n  width: 1024px;\r\n\tmax-width: 100%;\r\n  margin: 0 auto;\r\n}</code></pre>\n<p>これで、デバイスの横幅が狭くなっても最大幅は100%として表示させるため、はみ出すことはなくなります。</p>\n<h2><span id=\"i-3\">横並びの解除</span></h2>\n<p>PCデザインでは、横に広いために横並びのデザインが採用されているケースが多いです。一方のスマホの画面は、横に狭いために縦並びに直してあげる配慮が必要になります。</p>\n<p>例えば以下のようなデザインは、幅が狭くなってきたら横並びを解除してあげて縦並びになるようにしてあげましょう。</p>\n<pre>PC<span class=\"code-copy\" data-clipboard-target=\"#code-5\">コピー</span><code id=\"code-5\" class=\"css\">.right {\r\n  float: right;\r\n  width: 300px;\r\n}\r\n.left {\r\n  float: left;\r\n  width: 300px;\r\n}</code></pre>\n<p>768px（iPad）以下なら横並びを解除する処理。</p>\n<pre>レスポンシブ<span class=\"code-copy\" data-clipboard-target=\"#code-6\">コピー</span><code id=\"code-6\" class=\"css\">@media screen and (max-width:768px) {\r\n\t.right {\r\n\t\tfloat: none;\r\n\t\twidth: 100%;\r\n\t\tmax-width: 100%;\r\n\t}\r\n\t.left {\r\n\t\tfloat: none;\r\n\t\twidth: 100%;\r\n\t\tmax-width: 100%;\r\n\t}\r\n}</code></pre>\n<h2><span id=\"NG\">高さ指定は基本NG</span></h2>\n<p>PCサイトでは改行が考慮されていない、高さを固定値で指定してあるケースが多々あります。レスポンシブデザインにおいては、高さを固定させる考えは基本的にダメです（もちろんダメじゃないケースもあったりするのですが&#8230;）</p>\n<ul>\n<li>height</li>\n<li>line-height</li>\n</ul>\n<p>の2つの要素が固定値の場合は注意しましょう。<br />\n例えば、以下のような指定がされている場合。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-7\">コピー</span><code id=\"code-7\" class=\"css\">h1 {\r\n  height: 32px;\r\n  line-height: 32px;\r\n}</code></pre>\n<p>高さは<code>auto</code>で自動調整されるようにして、行間は固定値ではなく倍率で指定します。1.6の場合は文字サイズの1.6倍という解釈です。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-8\">コピー</span><code id=\"code-8\" class=\"css\">h1 {\r\n  height: auto;\r\n  line-height: 1.6;\r\n}</code></pre>\n<h2><span id=\"i-4\">埋め込み要素をはみ出させない</span></h2>\n<p>YoutubeやGoogle Mapなどの埋め込み要素は幅や高さをガッツリ記載するので、スマホ化した際に画面からはみ出しがちです。</p>\n<p>一手間必要ですが、レスポンシブ対応する方法がありますのでコードを紹介します。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-9\">コピー</span><code id=\"code-9\" class=\"html\">&lt;div class=\"liquid\"&gt;\r\n\t&lt;iframe src=\"\" width=\"560\" height=\"315\"&gt;&lt;/iframe&gt;\r\n&lt;/div&gt;</code></pre>\n<p>まずは、iframeを囲う要素を用意します。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-10\">コピー</span><code id=\"code-10\" class=\"css\">.liquid {\r\n  position: relative;\r\n  width: 100%;\r\n  padding-top: 56.25%; /* 高さ ÷ 横幅 × 100 */\r\n}\r\n.liquid iframe {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n}</code></pre>\n<p>上記の例では、iframeの高さが315px、幅が560pxですので、<strong class=\"marker\">315px ÷ 560px × 100 = 56.25%</strong>という計算になります。</p>\n<p>ちなみに、横幅が100%ですが、<code>.liquid { width: 100%; }</code>の値を<code>.liquid { width: 300px; }</code>などに変えることで、横幅の指定も可能です。</p>\n<h2><span id=\"i-5\">英字に注意！</span></h2>\n<p>ブラウザは一応文字の解釈をしていて、意味のまとまりを考慮した改行を行うようになっています。ここで生じる問題は、単語で区切れない文字列の場合は改行されずにどこまでも横に記載されてしまうという点です。</p>\n<p>よくある例としては、「URL」。単語の区切りがないので、改行されずに水平スクロールが発生することが多いです。</p>\n<p>こういった改行できない文字列については、<strong class=\"marker\">強制的に改行させる</strong>CSSを適応させてあげてください。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-11\">コピー</span><code id=\"code-11\" class=\"css\">* {\r\n  word-break: break-word;\r\n}</code></pre>\n<p>賛否ありますが、わたしは全体的に当ててもいいかなと思っています。（もちろん改行されない要素に部分的に当ててもOK）</p>\n<h2><span id=\"i-6\">水平スクロールは恥ずかしいと心得る</span></h2>\n<p>レスポンシブデザインはどのデバイスでも「いい感じに表示できますよ！」といったデザインです。<strong class=\"marker\">最も恥ずかしいのは水平スクロールが生じてしまうこと</strong>&#8230;。</p>\n<p>レスポンシブデザインにしたら、水平スクロールが発生していないか、確認するようにしましょう！<br />\n（コーダーでもできない人がいたりするのですが&#8230;）</p>\n<p>横揺れする要因は以下で詳しくまとめています。<br />\n→ <a href=\"https://haniwaman.com/pc-responsive/\">PCサイトのレスポンシブ化で横揺れさせない3つのポイント</a></p>\n<h2><span id=\"i-7\">おわり</span></h2><div class=\"matome\"><div class=\"matome-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"></div><div class=\"matome-twitter\"><a href=\"https://twitter.com/haniwa008?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\" data-show-screen-name=\"false\" data-size=\"large\" data-lang=\"ja\" data-show-count=\"true\">Follow @haniwa008</a><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></div></div><!-- /matome -->\n<p>難しく考えられがちですが、レスポンシブ化はとても単純です。</p>\n<p>1行で説明すると、<br />\n<strong class=\"marker\">ビューポートでデバイスの幅を横幅に指定して、各要素の横幅を100%にしてはみ出さないようにする</strong>、だけ。</p>\n<p>HTMLとCSSの知識がある人なら少し勉強するだけでできちゃいます。ぜひチャレンジしてみてください！</p>\n","date":"February 02, 2018","categories":[{"name":"CSS","slug":"css"}],"tags":null,"author":{"name":"はにわまん","slug":"haniwaman"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"eac1bf72-97ad-5c14-aa2a-47b5b651989e"}}}