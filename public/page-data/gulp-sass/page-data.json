{"componentChunkName":"component---src-templates-post-js","path":"/gulp-sass/","result":{"data":{"wordpressPost":{"id":"fcaad951-d78d-5afc-a5c6-5f4b525ea1bd","title":"Sassから完璧なCSSファイルを出力するために通したいGulpのタスク【WordPress編】","slug":"gulp-sass","content":"<p>Sassから完璧なCSSファイルを出力するためのgulpfile.jsの書き方や、必要なパッケージpackage.json、.stylelintrcへの記述についてです。</p>\n<p>最初に言っておくと、<strong class=\"marker\">完璧なという表現は完全に主観</strong>です！自分がWordPressサイトを作る上で、特に不満なく作れている方法ということだけご理解の上、読み進めていただければ幸いです。</p>\n<p>また、「Gulpとは？」や「package.jsonの使い方」みたいな話はなく、<strong>知っている前提</strong>で進めていきます。ですので、ある程度gulpなど使い慣れている方でないと理解できないかもしれません。</p>\n<div class=\"chat\"><figure class=\"chat-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"><figcaption>はにわまん</figcaption></figure><div class=\"chat-content\">導入すべきパッケージをドバドバーっと紹介していきます</div></div>\n<div id=\"toc_container\" class=\"no_bullets\"><p class=\"toc_title\">目次</p><ul class=\"toc_list\"><li><a href=\"#gulpfilejs\"><span class=\"toc_number toc_depth_1\">1</span> gulpfile.jsに書くこと</a><ul><li><a href=\"#SassCSS\"><span class=\"toc_number toc_depth_2\">1.1</span> SassからCSS変換の過程でやっていること</a></li><li><a href=\"#gulp-plumbergulp-notify\"><span class=\"toc_number toc_depth_2\">1.2</span> gulp-plumberとgulp-notify</a></li><li><a href=\"#gulp-sass-glob\"><span class=\"toc_number toc_depth_2\">1.3</span> gulp-sass-glob</a></li><li><a href=\"#gulp-sass\"><span class=\"toc_number toc_depth_2\">1.4</span> gulp-sass</a></li><li><a href=\"#autoprefixer\"><span class=\"toc_number toc_depth_2\">1.5</span> autoprefixer</a></li><li><a href=\"#css-declaration-sorter\"><span class=\"toc_number toc_depth_2\">1.6</span> css-declaration-sorter</a></li><li><a href=\"#gulp-merge-media-queries\"><span class=\"toc_number toc_depth_2\">1.7</span> gulp-merge-media-queries</a></li><li><a href=\"#gulp-stylelint\"><span class=\"toc_number toc_depth_2\">1.8</span> gulp-stylelint</a></li></ul></li><li><a href=\"#WordPress-Coding-Standards\"><span class=\"toc_number toc_depth_1\">2</span> WordPress-Coding-Standardsで整形させるために</a><ul><li><a href=\"#stylelint-config-wordpress\"><span class=\"toc_number toc_depth_2\">2.1</span> stylelint-config-wordpressをインストール</a></li><li><a href=\"#stylelintrc\"><span class=\"toc_number toc_depth_2\">2.2</span> .stylelintrcを作成</a></li></ul></li><li><a href=\"#packagejson8230\"><span class=\"toc_number toc_depth_1\">3</span> package.jsonにまとめると&#8230;</a></li><li><a href=\"#WordPress\"><span class=\"toc_number toc_depth_1\">4</span> WordPressのコーディング規約に目を通そう！</a></li><li><a href=\"#i\"><span class=\"toc_number toc_depth_1\">5</span> おわり</a></li></ul></div>\n<h2><span id=\"gulpfilejs\">gulpfile.jsに書くこと</span></h2>\n<p>Gulpで処理させている内容です。最初にどばーっとやっていることの概要を説明して、後から個別に処理内容を深掘りしていきます。</p>\n<h3><span id=\"SassCSS\">SassからCSS変換の過程でやっていること</span></h3>\n<p>大雑把には以下のようなことを行っています。字にするとめっちゃ簡単ですね！</p>\n<div class=\"box\">\n<ol>\n<li>autoprefixerでベンダープレフィックスを付与する</li>\n<li>cssdeclsortでプロパティを並び替える</li>\n<li>gulpStylelint({fix: true})で自動整形</li>\n</ol>\n</div>\n<p>ソースは以下のような感じです。</p>\n<pre><span class=\"filename\">gulpfile.js</span><span class=\"code-copy\" data-clipboard-target=\"#code-0\">コピー</span><code id=\"code-0\" class=\"js\">var gulp = require( 'gulp' );\r\nvar sass = require( 'gulp-sass' );\r\nvar plumber = require( 'gulp-plumber' );\r\nvar notify = require( 'gulp-notify' );\r\nvar sassGlob = require( 'gulp-sass-glob' );\r\nvar mmq = require( 'gulp-merge-media-queries' );\r\nvar gulpStylelint = require( 'gulp-stylelint' );\r\nvar postcss = require( 'gulp-postcss' );\r\nvar autoprefixer = require( 'autoprefixer' );\r\nvar cssdeclsort = require( 'css-declaration-sorter' );\r\n\r\ngulp.task( 'sass', function() {\r\n\tgulp\r\n\t\t.src( './sass/**/*.scss' )\r\n\t\t.pipe( plumber({ errorHandler: notify.onError( 'Error: &lt;%= error.message %&gt;' ) }) )\r\n\t\t.pipe( sassGlob() )\r\n\t\t.pipe( sass({ outputStyle: 'expanded' }) )\r\n\t\t.pipe( postcss([ autoprefixer() ]) )\r\n\t\t.pipe( postcss([ cssdeclsort({ order: 'alphabetically' }) ]) )\r\n\t\t.pipe( mmq() )\r\n\t\t.pipe(\r\n\t\t\tgulpStylelint({\r\n\t\t\t\tfix: true\r\n\t\t\t})\r\n\t\t)\r\n\t\t.pipe( gulp.dest( './css' ) );\r\n});</code></pre>\n<p>1行ずつ見ていきましょう！！！</p>\n<h3><span id=\"gulp-plumbergulp-notify\">gulp-plumberとgulp-notify</span></h3>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-1\">コピー</span><code id=\"code-1\" class=\"js\">.pipe( plumber({ errorHandler: notify.onError( 'Error: &amp;lt;%= error.message %&amp;gt;' ) }) )\r\n</code></pre>\n<p>これはエラーメッセージをポップアップで表示させて「タスクを止めない！」というものですね。CSS変換に関わる部分ではありません。説明はしませんが、watchとかさせている時にエラーで止まらなくなるので役立つものです。</p>\n<h3><span id=\"gulp-sass-glob\">gulp-sass-glob</span></h3>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-2\">コピー</span><code id=\"code-2\" class=\"js\">.pipe( sassGlob() )\r\n</code></pre>\n<p>分割したファイルをstyle.scssなどにimportしてまとめ、CSSに変換するという流れがSassの管理では一般的かと思います。</p>\n<p>Sassのファイルって増えたり減ったりはよくあって、その都度style.scssにimportの記述を書くのはめっちゃ面倒くさいです。</p>\n<p>gulp-sass-globのタスクを通せば、同じ階層の頭のフォルダだけを指定すればOKとなり、それらの下層にいくら足そうが減らそうが、勝手に読み込んでくれます。</p>\n<p>具体的なコード量で示すと、gulp-sass-globを使わずにガッツリ記載した場合は以下。</p>\n<pre><span class=\"filename\">style.scss</span><span class=\"code-copy\" data-clipboard-target=\"#code-3\">コピー</span><code id=\"code-3\" class=\"css\">@import \"setting/color\";\r\n@import \"setting/size\";\r\n@import \"setting/typography\";\r\n@import \"mixin/mixin\";\r\n@import \"mixin/utility\";\r\n@import \"base/base\";\r\n@import \"module/body\";\r\n@import \"module/btn\";\r\n@import \"module/card\";\r\n@import \"module/drawer\";\r\n@import \"page/common/footer\";\r\n@import \"page/common/header\";\r\n@import \"page/common/mainvisual\";\r\n@import \"page/top/menu\";\r\n@import \"page/top/info\";\r\n@import \"page/top/concept\";</code></pre>\n<p>gulp-sass-glob使ってトップフォルダだけ指定した場合が以下。</p>\n<pre><span class=\"filename\">style.scss</span><span class=\"code-copy\" data-clipboard-target=\"#code-4\">コピー</span><code id=\"code-4\" class=\"css\">@import \"setting/**\";\r\n@import \"mixin/**\";\r\n@import \"base/**\";\r\n@import \"module/**\";\r\n@import \"page/**\";</code></pre>\n<p>基本的にトップのフォルダの増減はありません（最初の設定がしっかりしていれば&#8230;）</p>\n<p>コード量もさることながら、フォルダ以下のファイルを<strong class=\"marker\">import記述を意識せずに柔軟に増減できる</strong>というのは、余計な思考に費やす時間がなくなり作業が早くなります。</p>\n<h3><span id=\"gulp-sass\">gulp-sass</span></h3>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-5\">コピー</span><code id=\"code-5\" class=\"js\">.pipe( sass({ outputStyle: 'expanded' }) )\r\n</code></pre>\n<p>Sassをコンパイルするための記述です。一番メインですね。</p>\n<p>outputStyleでは、以下の4つがあります。</p>\n<ul>\n<li>nested</li>\n<li>expanded</li>\n<li>compact</li>\n<li>compressed</li>\n</ul>\n<p>オーソドックスでよく見る出力がexpandedになります。特に理由がなければexpandedで問題ありません。</p>\n<h3><span id=\"autoprefixer\">autoprefixer</span></h3>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-6\">コピー</span><code id=\"code-6\" class=\"js\">.pipe( postcss([ autoprefixer() ]) )\r\n</code></pre>\n<p>ベンダープレフィックスを自動で付与してくれるツールです。Sassで書くときはベンダープレフィックスを一切意識していません。<strong class=\"marker\">どのブラウザまでを担保してベンダープレフィックスを付けるかは、autoprefixerに丸投げ</strong>です。</p>\n<p>自分でやると絶対にミスが起きる（ベンダープレフィックスの追加漏れなど）ので、機械に任せておくと安心できます。</p>\n<p>WordPressでもAutoprefixerを使用しているようです。</p>\n<blockquote><p>ブラウザー固有のベンダープレフィックスを簡単に管理するプレコミットツールとして WordPress では Autoprefixer を使用します。</p></blockquote>\n<h3><span id=\"css-declaration-sorter\">css-declaration-sorter</span></h3>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-7\">コピー</span><code id=\"code-7\" class=\"js\">.pipe( postcss([ cssdeclsort({ order: 'alphabetically' }) ]) )\r\n</code></pre>\n<p>プロパティをソートし直してくれるものです。これがあるからSassファイルの方は思いついたまま好きな順で書くことができています。</p>\n<p>並び替えのパターンは3つあります。</p>\n<ul>\n<li>Alphabetically・・・アルファベット順</li>\n<li>SMACSS・・・重要なプロパティ順</li>\n<li>Concentric CSS・・・ボックスモデルの外から内</li>\n</ul>\n<p>あとは、独自にソート方法をカスタマイズして指定することも可能だそうです。</p>\n<p>わたしはアルファベット順にしています。WordPress.comなどもアルファベット順でして、これで特に問題ないとのことです。</p>\n<blockquote><p>別の方法は Automattic や WordPress.com テーマチームを含む多くのグループで採用されている、例外のあるなしに関係なくアルファベット順にプロパティを並べる方法です。</p></blockquote>\n<h3><span id=\"gulp-merge-media-queries\">gulp-merge-media-queries</span></h3>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-8\">コピー</span><code id=\"code-8\" class=\"js\">.pipe( mmq() )\r\n</code></pre>\n<p>バラバラに記載されているメディアクエリを1つにまとめてくれるツールです。Sassで書いてるとあちこちにメディアクエリが出来てしまいます。</p>\n<p>メディアクエリまとめる系のツールは色々あるのですが、gulp-merge-media-queriesが一番しっかりしている印象です。<br />\n（メディアクエリの順番が記載と逆にするツールもあったりするので&#8230;）</p>\n<h3><span id=\"gulp-stylelint\">gulp-stylelint</span></h3>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-9\">コピー</span><code id=\"code-9\" class=\"js\">.pipe(\r\n\tgulpStylelint({\r\n\t\tfix: true\r\n\t})\r\n)</code></pre>\n<p>Gulpでstylelintを使うためのツール。しかもオプションのfixをtrueにすれば、<strong class=\"marker\">整形までしてくれる！</strong>という優れものです。</p>\n<p>整形ツールと言えば<a href=\"https://github.com/prettier/prettier\" rel=\"noopener noreferrer\" target=\"_blank\">prettier</a>が有名ですが、「これprettierいらんやん！」っていう結論になったのが衝撃でした。<br />\n（ずっとprettierとstylelintを繋げてGulpでどう処理させればいいんだあああって悩んでたので&#8230;）</p>\n<p>ということで、最後にgulp-stylelintでWordPressのコーディングガイドラインに適応されるように整形してあげれば万事OKです！表題の「完璧な」の内、9割以上はgulp-stylelintのおかげです笑</p>\n<h2><span id=\"WordPress-Coding-Standards\">WordPress-Coding-Standardsで整形させるために</span></h2>\n<p>SassからCSSに完璧な変換をさせるときの<strong>正解</strong>は、「<a href=\"https://github.com/WordPress-Coding-Standards/stylelint-config-wordpress\" rel=\"noopener noreferrer\" target=\"_blank\">WordPress-Coding-Standards</a>」です。</p>\n<p>「WordPress-Coding-Standards」は、WordPressのCSSのコーディング規約をstylelintに落とし込んでまとめたものになります。</p>\n<blockquote><p>WordPress CSS &amp; SCSS Coding Standards shareable config for stylelint</p></blockquote>\n<p>上記のgulp-stylelintでCSSコードを整形する際に、「WordPress-Coding-Standards」に則った形で整形されるようにする必要があります。</p>\n<h3><span id=\"stylelint-config-wordpress\">stylelint-config-wordpressをインストール</span></h3>\n<p>それではWordPress用のstylelintをインストールしていきましょう。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-10\">コピー</span><code id=\"code-10\" class=\"cli nohighlight hljs\">npm install stylelint-config-wordpress --save-dev\r\n</code></pre>\n<p>→ <a href=\"https://github.com/WordPress-Coding-Standards/stylelint-config-wordpress\" rel=\"noopener noreferrer\" target=\"_blank\">WordPress-Coding-Standards/stylelint-config-wordpress</a>の「Installation」を参考</p>\n<p>インストール場所は、gulpfile.jsと同じ階層です！</p>\n<h3><span id=\"stylelintrc\">.stylelintrcを作成</span></h3>\n<p><span class=\"filename\">.stylelintrc</span>は、stylelintのルールを記述するための専用のファイルです。こちらもgulpfile.jsと同じ階層に設置し、以下のように「WordPress-Coding-Standards」を使うということ明記してあげてください。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-11\">コピー</span><code id=\"code-11\" class=\"json\">{\r\n\t\"extends\": [\"stylelint-config-wordpress/scss\"],\r\n\t\"rules\": {\r\n\t\t\"no-descending-specificity\": null,\r\n\t\t\"max-line-length\": [\r\n\t\t\t300,\r\n\t\t\t{\r\n\t\t\t\t\"ignore\": \"non-comments\",\r\n\t\t\t\t\"ignorePattern\": [\"/(https?://[0-9,a-z]*.*)|(^description\\\\:.+)|(^tags\\\\:.+)/i\"]\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}</code></pre>\n<p>ルールをいくつか追加していますが、最低限必要なのは、「extends」の部分です。SCSSとCSSの両方を「WordPress-Coding-Standards」のルールでカバーしますよ、という記述になります。</p>\n<p>その他のわたしが追加した2つのルールを軽く紹介すると、</p>\n<ul>\n<li>&#8220;no-descending-specificity&#8221;: null・・・詳細度の低いセレクタがあとから呼び出されていても、OK</li>\n<li>&#8220;max-line-length&#8221;: [300]・・・1行に記載できる文字数の最大を300文字にする</li>\n</ul>\n<p>こんな感じです。</p>\n<h2><span id=\"packagejson8230\">package.jsonにまとめると&#8230;</span></h2>\n<p>今回のGulpタスクで必要なパッケージをまとめると以下のような感じになります。これをプロジェクトのルート配下に設置して<code>npm install</code>すれば、もうそのまま使えるかと思います。</p>\n<pre><span class=\"filename\">package.json</span><span class=\"code-copy\" data-clipboard-target=\"#code-12\">コピー</span><code id=\"code-12\" class=\"json\">{\r\n\t\"name\": \"package-template\",\r\n\t\"version\": \"1.0.0\",\r\n\t\"author\": \"haniwaman\",\r\n\t\"license\": \"GPLv2\",\r\n\t\"devDependencies\": {\r\n\t\t\"autoprefixer\": \"^8.2.0\",\r\n\t\t\"css-declaration-sorter\": \"^3.0.1\",\r\n\t\t\"gulp\": \"^3.9.1\",\r\n\t\t\"gulp-merge-media-queries\": \"^0.2.1\",\r\n\t\t\"gulp-notify\": \"^3.2.0\",\r\n\t\t\"gulp-plumber\": \"^1.2.0\",\r\n\t\t\"gulp-postcss\": \"^7.0.1\",\r\n\t\t\"gulp-stylelint\": \"^7.0.0\",\r\n\t\t\"stylelint\": \"^9.4.0\",\r\n\t\t\"stylelint-config-recommended-scss\": \"^3.2.0\",\r\n\t\t\"stylelint-config-wordpress\": \"^13.0.0\",\r\n\t}\r\n}</code></pre>\n<h2><span id=\"WordPress\">WordPressのコーディング規約に目を通そう！</span></h2>\n<p>これらの自動化はなんのためにやっているかと言うと、すべてはWordPressのCSSコーディング規約を守るためですね。自動でやってくれることを鵜呑みにするのではなく、公式のコーディング規約に目を通してみて、今回の設定も色々とチューニングしてみてください。<br />\n→ <a href=\"https://wpdocs.osdn.jp/CSS_%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E8%A6%8F%E7%B4%84\" rel=\"noopener noreferrer\" target=\"_blank\">CSS コーディング規約 &#8211; WordPress Codex 日本語版</a></p>\n<h2><span id=\"i\">おわり</span></h2><div class=\"matome\"><div class=\"matome-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"></div><div class=\"matome-twitter\"><a href=\"https://twitter.com/haniwa008?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\" data-show-screen-name=\"false\" data-size=\"large\" data-lang=\"ja\" data-show-count=\"true\">Follow @haniwa008</a><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></div></div><!-- /matome -->\n<p>Sassから完璧なCSSファイルを出力するために通すべきGulpのタスクの書き方でした。<span class=\"filename\">package.json</span>とか<span class=\"filename\">gulpfile.js</span>の前提の説明は一切していないので、まずここが分からない方は何を言っているか分からなかったかもしれません&#8230;。</p>\n<p>Gulpはあらゆる処理を自動化してくれます。それを補助するパッケージもたくさんあります。WordPressも答えに近いstylelintを用意してくれています。公式のコーディング規約を読み、stylelint-config-wordpressをベースに色々とチューニングしてみてください！</p>\n","date":"September 22, 2018","categories":[{"name":"環境","slug":"setting"}],"tags":null,"author":{"name":"はにわまん","slug":"haniwaman"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"fcaad951-d78d-5afc-a5c6-5f4b525ea1bd"}}}