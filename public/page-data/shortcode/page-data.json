{"componentChunkName":"component---src-templates-post-js","path":"/shortcode/","result":{"data":{"wordpressPost":{"id":"7dcf3962-74e4-551b-8063-c3b9d7c70800","title":"WordPressで独自ショートコードの作り方！汎用性の高い投稿にしましょう！","slug":"shortcode","content":"<p>WordPress投稿記事の共通化できる部分はショートコードとして作成しておくと運営が楽です。</p>\n<p>わたしのサイトでは次のような吹き出しが全記事にあるわけですが、ショートコードとして作成しておくと、後から「画像を変更したい&#8230;」や「やっぱ全記事から削除したい&#8230;」ってなっても、<strong class=\"marker\">一箇所を修正するだけで全記事を変更できます</strong>。</p>\n<p>この記事では独自のショートコードの作り方と、以下の吹き出しのショートコードの作り方を紹介しています。WordPressで運営している方は<strong>ショートコードを作れるようになっておくと何かと得です！</strong></p>\n<div class=\"chat\"><figure class=\"chat-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"><figcaption>はにわまん</figcaption></figure><div class=\"chat-content\">当ブログ全記事で登場する吹き出しはショートコードで作られています</div></div>\n<div id=\"toc_container\" class=\"no_bullets\"><p class=\"toc_title\">目次</p><ul class=\"toc_list\"><li><a href=\"#i\"><span class=\"toc_number toc_depth_1\">1</span> 独自ショートコードの作り方</a><ul><li><a href=\"#i-2\"><span class=\"toc_number toc_depth_2\">1.1</span> ショートコードの作り方の基本</a></li><li><a href=\"#i-3\"><span class=\"toc_number toc_depth_2\">1.2</span> シンプルに出力させるだけパターン</a></li><li><a href=\"#i-4\"><span class=\"toc_number toc_depth_2\">1.3</span> ショートコードで囲うパターン</a></li><li><a href=\"#i-5\"><span class=\"toc_number toc_depth_2\">1.4</span> 引数を指定するパターン</a></li></ul></li><li><a href=\"#i-6\"><span class=\"toc_number toc_depth_1\">2</span> 吹き出しのショートコードを作ってみよう！</a><ul><li><a href=\"#i-7\"><span class=\"toc_number toc_depth_2\">2.1</span> ソースコード</a></li><li><a href=\"#i-8\"><span class=\"toc_number toc_depth_2\">2.2</span> ショートコードの表示</a></li><li><a href=\"#CSS\"><span class=\"toc_number toc_depth_2\">2.3</span> CSSでデザイン調整</a></li></ul></li><li><a href=\"#i-9\"><span class=\"toc_number toc_depth_1\">3</span> ショートコードを使うメリット</a></li><li><a href=\"#i-10\"><span class=\"toc_number toc_depth_1\">4</span> おわり</a></li></ul></div>\n<h2><span id=\"i\">独自ショートコードの作り方</span></h2>\n<p>3パターンありますが、現実的に使われやすいのは3つ目の「引数を指定するパターン」かと思います。<strong class=\"marker\">必ず次の「ショートコードの作り方の基本」だけは目を通しておいてください！</strong>その後の紹介は説明をかなり省いていますので&#8230;</p>\n<h3><span id=\"i-2\">ショートコードの作り方の基本</span></h3>\n<p>以下のような記述を<span class=\"filename\">functions.php</span>に記載することで任意のショートコードが使えるようになります。</p>\n<pre><span class=\"filename\">functions.php</span><span class=\"code-copy\" data-clipboard-target=\"#code-0\">コピー</span><code id=\"code-0\" class=\"php\">function my_shortcode() {\r\n\treturn '&lt;p&gt;決まった文字列を返すだけのシンプルなショートコードです。&lt;/p&gt;';\r\n}\r\nadd_shortcode( 'hoge', 'my_shortcode' );</code></pre>\n<p>ショートコードの使い方は、投稿画面で<code>[hoge]</code>と入力することで、指定した関数の処理に基づいて値が出力されるというものです。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2018/10/shortcode2-700x288.png\" alt=\"\" class=\"alignnone size-medium wp-image-9645\" srcset=\"https://haniwaman.com/wp-content/uploads/2018/10/shortcode2-700x288.png 700w, https://haniwaman.com/wp-content/uploads/2018/10/shortcode2-768x316.png 768w, https://haniwaman.com/wp-content/uploads/2018/10/shortcode2.png 982w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p>テキストでもビジュアルでも同様に使えます。もちろん<strong class=\"marker\">Gutenbergでも利用可能</strong>です。</p>\n<p><code>add_shortcode</code>で指定している引数は以下のような役割になります。</p>\n<ul class=\"check\">\n<li>第一引数（hoge） → ショートコードの名前</li>\n<li>第二引数（my_shortcode） → 処理を記載する関数名</li>\n</ul>\n<p>投稿画面で第一引数で指定したショートコードを使い、第二引数で指定した関数内で出力させたい文字列を作成する感じです。</p>\n<p>それではショートコードの3つの作成パターンを見ていきましょう！</p>\n<h3><span id=\"i-3\">シンプルに出力させるだけパターン</span></h3>\n<p>ショートコードタグに<strong class=\"marker\">一意の文字列を表示させるだけ</strong>のショートコードです。</p>\n<pre><span class=\"filename\">functions.php</span><span class=\"code-copy\" data-clipboard-target=\"#code-0\">コピー</span><code id=\"code-0\" class=\"php\">function my_shortcode() {\r\n\treturn '&lt;p&gt;決まった文字列を返すだけのシンプルなショートコードです。&lt;/p&gt;';\r\n}\r\nadd_shortcode( 'hoge', 'my_shortcode' );</code></pre>\n<p>投稿画面から、<code>[hoge]</code>と入力すると、「&lt;p&gt;決まった文字列を返すだけのシンプルなショートコードです。&lt;/p&gt;」と出力されるようになります。</p>\n<h3><span id=\"i-4\">ショートコードで囲うパターン</span></h3>\n<p>ショートコードをHTMLタグのように囲って、中の値を編集のように形で取得して表示させるショートコードです。</p>\n<pre><span class=\"filename\">functions.php</span><span class=\"code-copy\" data-clipboard-target=\"#code-2\">コピー</span><code id=\"code-2\" class=\"php\">function my_shortcode2( $atts, $content = null ) {\r\n\treturn '&lt;p&gt;' . $content . '&lt;/p&gt;';\r\n}\r\nadd_shortcode( 'hogetwo', 'my_shortcode2' );</code></pre>\n<p>投稿画面から、<code>[hogetwo]囲われたコンテンツが表示されます[/hogetwo]</code>と入力すると、「&lt;p&gt;囲われたコンテンツが表示されます&lt;/p&gt;」と表示されます。</p>\n<h3><span id=\"i-5\">引数を指定するパターン</span></h3>\n<p>ショートコードに引数を指定して値を変数として受け取り表示させるショートコードです。作り方によって<strong class=\"marker\">引数はいくつでも指定可能</strong>です。</p>\n<pre><span class=\"filename\">functions.php</span><span class=\"code-copy\" data-clipboard-target=\"#code-3\">コピー</span><code id=\"code-3\" class=\"php\">function my_shortcode3( $atts, $content = null ) {\r\n\textract( shortcode_atts( array(\r\n\t\t\t'food'  =&gt; 'ハンバーグ',\r\n\t\t\t'hobby' =&gt; '将棋'\r\n\t), $atts ) );\r\n\r\n\treturn '&lt;p&gt;好きな食べものは' . $food . 'です。趣味は' . $hobby . 'です。&lt;/p&gt;';\r\n}\r\nadd_shortcode( 'hogethree', 'my_shortcode3');</code></pre>\n<p>投稿画面から、<code>[hogethree food=\"みかん\" hobby=\"サッカー\"]</code>と入力すると、「&lt;p&gt;好きな食べものはみかんです。趣味はサッカーです。&lt;/p&gt;」と表示されます。</p>\n<h4>引数の初期値が設定可能</h4>\n<p>上記のコードを見て、<code>shortcode_atts</code>の「ハンバーグ」とか「将棋」が使われない！って思われた方もいるかと思います。ここに設定する値は初期値になるもので、投稿画面から引数が設定されない場合に出力されるものになります。</p>\n<p>具体的に見てみましょう。先程は、<code>[hogethree food=\"みかん\" hobby=\"サッカー\"]</code>で入力しましたが、これを引数を使わずに<code>[hogethree]</code>だけで入力してみると、、</p>\n<p>「&lt;p&gt;好きな食べものはハンバーグです。趣味は将棋です。&lt;/p&gt;」と表示され、関数で指定した初期値が適応されているのが分かります。</p>\n<p>extractの書き方はお決まりの書き方として深く考えずにお使いいただくといいかと思います。</p>\n<h2><span id=\"i-6\">吹き出しのショートコードを作ってみよう！</span></h2>\n<p>パターンだけでは面白くないので、実用的なショートコードを作ってみましょう。わたしが最近追加した吹き出しのショートコードをそのまま作ってみようと思います。</p>\n<div class=\"chat\"><figure class=\"chat-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"><figcaption>はにわまん</figcaption></figure><div class=\"chat-content\">はにわまんがチャット風に喋ってるショートコードを作るよ！（これはショートコードで出してます笑）</div></div>\n<p>任意に変更できる箇所としては、吹き出しのコメント、名前、画像の3点です。上記で紹介した引数を指定するパターンで作ってきます。</p>\n<h3><span id=\"i-7\">ソースコード</span></h3>\n<p>早速コードですが、<span class=\"filename\">functions.php</span>に以下のように記述します。これは、引数を指定するパターンを活用して作っているものです。（もしかしたら、ショートコードで囲うパターンの方が合っているかもしれませんが&#8230;）</p>\n<pre><span class=\"filename\">functions.php</span><span class=\"code-copy\" data-clipboard-target=\"#code-4\">コピー</span><code id=\"code-4\" class=\"php\">function shortcode_chat( $atts, $content = null ) {\r\n\textract( shortcode_atts( array(\r\n\t\t\t'img' =&gt; 'https://haniwaman.com/wp-content/uploads/2018/10/haniwa-150x150.png',\r\n\t\t\t'name' =&gt; 'はにわまん',\r\n\t\t\t'comment'=&gt; '',\r\n\t), $atts ) );\r\n\r\n\treturn '&lt;div class=\"chat\"&gt;&lt;figure class=\"chat-img\"&gt;&lt;img src=\"' . $img . '\" alt=\"\"&gt;&lt;figcaption&gt;' . $name . '&lt;/figcaption&gt;&lt;/figure&gt;&lt;div class=\"chat-content\"&gt;' . $comment . '&lt;/div&gt;&lt;/div&gt;';\r\n}\r\nadd_shortcode( 'chat', 'shortcode_chat' );</code></pre>\n<p>初期値としては以下のとおり設定しています。※ <strong class=\"marker\">imgとnameの初期値はご自身の画像と名前に変更しておいてください！</strong></p>\n<ul class=\"check\">\n<li>img     → ベースとなる画像</li>\n<li>name    → 名前</li>\n<li>comment → 吹き出しの内容</li>\n</ul>\n<p><code>return</code>として返す文字列には、吹き出しの骨格となるHTMLタグを付与してあげてください。デザインはCSSで調整していきます。</p>\n<p>吹き出しの作りは以下のパーツあたりを参考にしてみてください！（今回はわたしのこの記事のコピペでいけると思います）</p>\n<blockquote class=\"wp-embedded-content\" data-secret=\"0xfNIQnIc3\"><p><a href=\"https://haniwaman.com/parts/parts-4077/\">枠線で囲んだ塗りつぶしボックス（左）</a></p></blockquote>\n<p><iframe title=\"&#8220;枠線で囲んだ塗りつぶしボックス（左）&#8221; &#8212; コピペで簡単！Webパーツ屋\" class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" src=\"https://haniwaman.com/parts/parts-4077/embed/#?secret=0xfNIQnIc3\" data-secret=\"0xfNIQnIc3\" width=\"500\" height=\"282\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe></p>\n<h3><span id=\"i-8\">ショートコードの表示</span></h3>\n<p>名前と画像は基本的には変わらないので指定はしません。コメントだけ毎回指定すればいい感じの作りになっています。<br />\n（たまに画像のパターンを変える時にimgを指定する感じです）</p>\n<p><code>[chat comment=\"吹き出しのショーコードができました！\"]</code><br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2018/10/shortcode3-700x307.png\" alt=\"\" class=\"alignnone size-medium wp-image-9657\" srcset=\"https://haniwaman.com/wp-content/uploads/2018/10/shortcode3-700x307.png 700w, https://haniwaman.com/wp-content/uploads/2018/10/shortcode3-768x337.png 768w, https://haniwaman.com/wp-content/uploads/2018/10/shortcode3.png 972w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p>出力はできましたが、デザインが当たっていません&#8230;<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2018/10/shortcode4.png\" alt=\"\" class=\"alignnone size-full wp-image-9659\" width=\"300\" /></p>\n<h3><span id=\"CSS\">CSSでデザイン調整</span></h3>\n<p>自分のコードをコピペします。たぶん人によって書き方の癖があるので、自分流に微調整してみてください！</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-5\">コピー</span><code id=\"code-5\" class=\"css\">.chat {\r\n\tmargin-top: 2em;\r\n}\r\n.chat::after {\r\n  content: '';\r\n  clear: both;\r\n  display: block;\r\n}\r\n.chat .chat-img {\r\n  text-align: center;\r\n  float: left;\r\n  width: 100px;\r\n  box-sizing: border-box;\r\n\tmargin: 0;\r\n}\r\n.chat .chat-img img {\r\n  max-width: 100%;\r\n  height: auto;\r\n  vertical-align: bottom;\r\n\tmargin: 0;\r\n\tborder-radius: 50%;\r\n}\r\n.chat .chat-img figcaption {\r\n  font-size: 0.875em;\r\n  margin: 0.2em 0;\r\n}\r\n.chat .chat-content {\r\n  float: left;\r\n  width: 60%;\r\n  max-width: calc(100% - (100px + 20px));\r\n  box-sizing: border-box;\r\n  background: #ffffcd;\r\n  color: #333;\r\n  padding: .8em;\r\n  margin-left: 20px;\r\n  position: relative;\r\n  border-radius: 8px;\r\n\ttext-align: left;\r\n\tborder: 2px solid #ffecb3;\r\n}\r\n.chat .chat-content::before {\r\n\tcontent: \"\";\r\n  position: absolute;\r\n  top: 50%;\r\n  right: 100%;\r\n  margin-top: -13px;\r\n\tborder: 13px solid transparent;\r\n\tborder-right: 13px solid #ffecb3;\r\n\tz-index: 1;\r\n}\r\n.chat .chat-content::after {\r\n  content: \"\";\r\n  position: absolute;\r\n  top: 50%;\r\n  right: 100%;\r\n  margin-top: -10px;\r\n  border: 10px solid transparent;\r\n  border-right: 10px solid #ffffcd;\r\n  z-index: 2;\r\n}</code></pre>\n<p>それっぽい感じになりました！！！<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2018/10/shortcode5-700x225.png\" alt=\"\" class=\"alignnone size-medium wp-image-9680\" width=\"420\" srcset=\"https://haniwaman.com/wp-content/uploads/2018/10/shortcode5-700x225.png 700w, https://haniwaman.com/wp-content/uploads/2018/10/shortcode5.png 714w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<h2><span id=\"i-9\">ショートコードを使うメリット</span></h2>\n<p>ショートコードの良い点は、「<strong class=\"marker\">全記事を一括で管理できること</strong>」です。ブロガーはお決まりのような型が記事内の随所にあるかとお思います。そいうい箇所を手書きしていると<strong>いざ修正しようと思った時に全記事を直さないといけなくなります</strong>。同じような内容なのに&#8230;</p>\n<p>10記事とかならいいですが、数百、数千記事ある人はそんな対応してられません。「もう変更しなくていいや、、」って柔軟な変更ができなくなってしまいます。</p>\n<p>例えば、今回作成した吹き出しは当ブログ（HPcode）の全記事で表示されている訳ですが、消したくなったら関数内の<code>return '';</code>のように空文字にするだけで全て消えます。画像を変えたくなったら初期値の値を変更すればいいだけです。</p>\n<p>共通して同じような型で作成できる部分はショートコードとして作成しておくと、後々の運用がめっちゃ楽になるはずです！</p>\n<h2><span id=\"i-10\">おわり</span></h2><div class=\"matome\"><div class=\"matome-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"></div><div class=\"matome-twitter\"><a href=\"https://twitter.com/haniwa008?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\" data-show-screen-name=\"false\" data-size=\"large\" data-lang=\"ja\" data-show-count=\"true\">Follow @haniwa008</a><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></div></div><!-- /matome -->\n<p>WordPressのショートコードの作り方でした！エディタがGutenbergに変わっても残る機能です。今作って無駄になるこということはありません。<br />\n（おそらく今後もずっと残る）</p>\n<p>記事をまたいで共通化できる部分はできるだけショートコードで作成して柔軟な変更ができるようにしておくと運営が楽になりますよ！</p>\n","date":"October 27, 2018","categories":[{"name":"WordPress","slug":"wordpress"}],"tags":null,"author":{"name":"はにわまん","slug":"haniwaman"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"7dcf3962-74e4-551b-8063-c3b9d7c70800"}}}