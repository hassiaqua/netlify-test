{"componentChunkName":"component---src-templates-post-js","path":"/js-animate/","result":{"data":{"wordpressPost":{"id":"884dd520-995b-5a68-9250-c53dcc4d099c","title":"jQueryのanimate関数で要素を動かす！","slug":"js-animate","content":"<p>jQueryでアニメーションを設定できる<code>animate</code>関数について紹介します。</p>\n<p>CSSでもアニメーションは可能ですが、jQueryを扱えた方がより動的な表現ができるはずです。ただ欠点として、<code>animate</code>関数では、数字の値しか変更できません。<code>bacground-color</code>のように数字以外の値になってしまうものは適応外ですのでご注意を・・・。</p>\n<div class=\"chat\"><figure class=\"chat-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"><figcaption>はにわまん</figcaption></figure><div class=\"chat-content\">少し難ありなjQueryのanimate関数の使い方です</div></div>\n<div id=\"toc_container\" class=\"no_bullets\"><p class=\"toc_title\">目次</p><ul class=\"toc_list\"><li><a href=\"#animate\"><span class=\"toc_number toc_depth_1\">1</span> animate関数</a><ul><li><a href=\"#params\"><span class=\"toc_number toc_depth_2\">1.1</span> paramsの指定方法</a></li><li><a href=\"#duration\"><span class=\"toc_number toc_depth_2\">1.2</span> [duration]の指定方法</a></li><li><a href=\"#easing\"><span class=\"toc_number toc_depth_2\">1.3</span> [easing]の指定方法</a></li><li><a href=\"#callback\"><span class=\"toc_number toc_depth_2\">1.4</span> [callback]の指定方法</a></li></ul></li><li><a href=\"#i\"><span class=\"toc_number toc_depth_1\">2</span> おわり</a></li></ul></div>\n<h2><span id=\"animate\">animate関数</span></h2>\n<p><code>animate(params, [duration], [easing], [callback])</code><br />\n※ []は省略可能です。</p>\n<table class=\"table\">\n<tr>\n<th>params</th>\n<td>アニメーション後のCSSを指定します。配列で複数の指定が可能。</td>\n</tr>\n<tr>\n<th>[duration]</th>\n<td>アニメーション開始から終了までの時間</td>\n</tr>\n<tr>\n<th>[easing]</th>\n<td>アニメーション時の振る舞い（始めは早く終わりは遅く、一定のスピード、など）</td>\n</tr>\n<tr>\n<th>[callback]</th>\n<td>アニメーション終了時の振る舞いを指定</td>\n</tr>\n</table>\n<h3><span id=\"params\"><code>params</code>の指定方法</span></h3>\n<p><code>params</code>は、配列でいくつでも追加することが可能です。ですが、冒頭でも話した通り、数字以外の値はアニメーションできませんので、ご注意ください。</p>\n<p>実用的には以下のあたりでしょうか。</p>\n<ul>\n<li>width</li>\n<li>height</li>\n<li>top</li>\n<li>left</li>\n<li>right</li>\n<li>bottom</li>\n<li>margin</li>\n<li>padding</li>\n<li>fontSize</li>\n<li>opacity</li>\n</ul>\n<p>単位は、</p>\n<ul>\n<li>px</li>\n<li>em</li>\n<li>%</li>\n</ul>\n<p>に対応しています。</p>\n<p>実例を交えながら、指定の仕方を見ていきましょう。</p>\n<h4>大きさを変えてみる（固定値）</h4>\n<p>アニメーション終了時の大きさを固定値で表現します。</p>\n<div class=\"btn-animate btn-animate-fix\">動かしてみる</div>\n<div class=\"animate animate-fix\"></div>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-0\">コピー</span><code id=\"code-0\" class=\"html\">&lt;div class=\"animate-fix\"&gt;&lt;/div&gt;\r\n</code></pre>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-1\">コピー</span><code id=\"code-1\" class=\"css\">.animate-fix {\r\n\twidth: 100px;\r\n\theight: 100px;\r\n\tbackground-color: #00BCD4;\r\n}</code></pre>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-2\">コピー</span><code id=\"code-2\" class=\"js\">$(\".animate-fix\").animate({\r\n\t\"width\": \"200px\",\r\n\t\"height\": \"200px\"\r\n});</code></pre>\n<h4>大きさを変えてみる（変動値）</h4>\n<p>値として、<code>+=</code>、<code>-=</code>を指定することで、元の大きさからの動的な変化量を表すことができます。アニメーションが実行されるごとに、どんどん増えて（減って）いきます。</p>\n<div class=\"btn-animate btn-animate-change\">動かしてみる</div>\n<div class=\"animate animate-change\"></div>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-3\">コピー</span><code id=\"code-3\" class=\"html\">&lt;div class=\"animate-change\"&gt;&lt;/div&gt;\r\n</code></pre>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-4\">コピー</span><code id=\"code-4\" class=\"css\">.animate-change {\r\n\twidth: 100px;\r\n\theight: 100px;\r\n\tbackground-color: #00BCD4;\r\n}</code></pre>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-5\">コピー</span><code id=\"code-5\" class=\"js\">$(\".animate-change\").animate({\r\n\t\"width\": \"+20px\",\r\n\t\"height\": \"+20px\"\r\n});</code></pre>\n<h4>注意：値はキャメルケースで書く！</h4>\n<p>CSSであれば、<code>font-size</code>と書きますが、animate関数では、ハイフンで繋がず<code>fontSize</code>と記載します。</p>\n<p>このような区切りを大文字にする表現を<strong>キャメルケース</strong>と呼んだりします。</p>\n<p>CSSのプロパティの書き方がちょっと異なりますので注意しましょう。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-6\">コピー</span><code id=\"code-6\" class=\"js\">$(\".animate-hoge\").animate({\r\n\t\"fontSize\": \"2em\" // \"font-size\"とは書かない\r\n});</code></pre>\n<h3><span id=\"duration\"><code>[duration]</code>の指定方法</span></h3>\n<table class=\"table\">\n<tr>\n<th>値</th>\n<th>説明</th>\n</tr>\n<tr>\n<td>slow</td>\n<td>アニメーションの開始から終了までが「ゆっくり」</td>\n</tr>\n<tr>\n<td>normal</td>\n<td>slowとfastの中間の速さでアニメーションが進む（デフォルト）</td>\n</tr>\n<tr>\n<td>fast</td>\n<td>アニメーションの開始から終了までが「早い」</td>\n</tr>\n<tr>\n<td>数字</td>\n<td>ミリ秒で指定。1000と指定したら1秒かけてアニメーションが進む</td>\n</tr>\n</table>\n<p>アニメーションを一斉にスタートさせて動きを見てみましょう。</p>\n<div class=\"btn-animate btn-animate-duration\">動かしてみる</div>\n<div class=\"animate animate-duration animate-duration-slow\">slow</div>\n<div class=\"animate animate-duration animate-duration-normal\">normal</div>\n<div class=\"animate animate-duration animate-duration-fast\">fast</div>\n<div class=\"animate animate-duration animate-duration-3000\">3000</div>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-7\">コピー</span><code id=\"code-7\" class=\"html\">&lt;div class=\"animate-duration animate-duration-slow\"&gt;slow&lt;/div&gt;\r\n&lt;div class=\"animate-duration animate-duration-normal\"&gt;normal&lt;/div&gt;\r\n&lt;div class=\"animate-duration animate-duration-fast\"&gt;fast&lt;/div&gt;\r\n&lt;div class=\"animate-duration animate-duration-3000\"&gt;3000&lt;/div&gt;\r\n</code></pre>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-8\">コピー</span><code id=\"code-8\" class=\"css\">.animate-duration {\r\n\twidth: 100px;\r\n\tpadding: .4em;\r\n\tmargin: 0 0 .6em 0;\r\n\tcolor: #fff;\r\n\tbackground-color: #00BCD4;\r\n}</code></pre>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-9\">コピー</span><code id=\"code-9\" class=\"js\">$(\".animate-duration-slow\").animate({\r\n    \"width\": \"100%\"\r\n}, \"slow\");\r\n$(\".animate-duration-normal\").animate({\r\n    \"width\": \"100%\"\r\n}, \"normal\");\r\n$(\".animate-duration-fast\").animate({\r\n    \"width\": \"100%\"\r\n}, \"fast\");\r\n$(\".animate-duration-3000\").animate({\r\n    \"width\": \"100%\"\r\n}, 3000);</code></pre>\n<h3><span id=\"easing\"><code>[easing]</code>の指定方法</span></h3>\n<p><code>easing</code>とは、アニメーションの中での動きの「ふるまい」のようなイメージで捉えていただくとよいかと思います。jQueryの関数に限らず、CSSの<code>tratision</code>でも<code>animation</code>でも使われている概念なので覚えておきましょう！</p>\n<table class=\"table\">\n<tr>\n<th>値</th>\n<th>説明</th>\n</tr>\n<tr>\n<td>linear</td>\n<td>一定のスピードでアニメーションが進みます</td>\n</tr>\n<tr>\n<td>swing</td>\n<td>始めと終わりは緩やかに、途中は速め（初期値）</td>\n</tr>\n</table>\n<div class=\"btn-animate btn-animate-easing\">動かしてみる</div>\n<div class=\"animate animate-easing animate-easing-base\">base</div>\n<div class=\"animate animate-easing animate-easing-linear\">linear</div>\n<div class=\"animate animate-easing animate-easing-swing\">swing</div>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-10\">コピー</span><code id=\"code-10\" class=\"html\">&lt;div class=\"animate-easing animate-easing-linear\"&gt;linear&lt;/div&gt;\r\n&lt;div class=\"animate-easing animate-easing-swing\"&gt;swing&lt;/div&gt;</code></pre>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-11\">コピー</span><code id=\"code-11\" class=\"css\">.animate-easing {\r\n\tcolor: #fff;\r\n\tbackground-color: #00BCD4;\r\n\twidth: 150px;\r\n\theight: auto;\r\n\tpadding: .4em;\r\n\tmargin: 0 0 .6em 0;\r\n}</code></pre>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-12\">コピー</span><code id=\"code-12\" class=\"js\">$(\".animate-easing-linear\").animate({\r\n    \"width\": \"100%\"\r\n}, 3000, \"linear\");\r\n$(\".animate-easing-swing\").animate({\r\n    \"width\": \"100%\"\r\n}, 3000, \"swing\");</code></pre>\n<h3><span id=\"callback\"><code>[callback]</code>の指定方法</span></h3>\n<p>アニメーション終了後の処理を記述できます。関数なので任意の処理を記載しましょう！</p>\n<p><code>function(){}</code>の中に書いたものがアニメーション終了時に実行されます。</p>\n<h4>アニメーションが終わったら消す</h4>\n<p>実用性はあまりないかもしれませんが、アニメーションを動かして終わったらポップアップを出して要素を消すという処理を動かしてみます。</p>\n<div class=\"btn-animate btn-animate-callback\">動かしてみる</div>\n<div class=\"animate animate-callback\"></div>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-13\">コピー</span><code id=\"code-13\" class=\"html\">&lt;div class=\"animate-callback\"&gt;&lt;/div&gt;\r\n</code></pre>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-14\">コピー</span><code id=\"code-14\" class=\"css\">.animate-callback {\r\n\twidth: 100px;\r\n\theight: 100px;\r\n\tbackground-color: #00BCD4;\r\n}</code></pre>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-15\">コピー</span><code id=\"code-15\" class=\"js\">$(\".animate-callback\").animate({\r\n\t\"width\": \"200px\",\r\n\t\"height\": \"200px\"\r\n}, \"normal\", \"swing\", function(){\r\n\talert(\"消すよ！\");\r\n\t$(this).hide();\r\n});</code></pre>\n<h2><span id=\"i\">おわり</span></h2><div class=\"matome\"><div class=\"matome-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"></div><div class=\"matome-twitter\"><a href=\"https://twitter.com/haniwa008?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\" data-show-screen-name=\"false\" data-size=\"large\" data-lang=\"ja\" data-show-count=\"true\">Follow @haniwa008</a><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></div></div><!-- /matome -->\n<p>jQueryの<code>animate</code>関数の紹介でした。</p>\n<p>動的に処理を加えたい場合はCSSではなくjQueryを使うとはかどります。</p>\n","date":"January 04, 2018","categories":[{"name":"JavaScript","slug":"javascript"}],"tags":null,"author":{"name":"はにわまん","slug":"haniwaman"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"884dd520-995b-5a68-9250-c53dcc4d099c"}}}