{"componentChunkName":"component---src-templates-post-js","path":"/infinite-scroll/","result":{"data":{"wordpressPost":{"id":"4ca0a3d8-c3cc-5cc7-b3f4-ec29a9e7bf95","title":"WordPressで無限スクロールで記事を読み込む方法！【プラグインなし編】","slug":"infinite-scroll","content":"<p>WordPressで無限スクロールを実装する方法です！無限スクロールの実装を理解できていると<strong class=\"marker\">カスタマイズもしやく</strong>、かつ<strong class=\"marker\">WordPressの動きもちょっとだけ深く理解できる</strong>ようになります。</p>\n<p>前提として、<code>WP_Query</code>などWordPress特有のループ処理方法が当たり前のように出てきますが、その辺りの説明はしないのでWordPressの基本は理解している前提で記事が書かれていることをご理解いただけますと幸いです&#8230;。</p>\n<p>一応、サブループについては以下で解説しています。</p>\n<blockquote class=\"wp-embedded-content\" data-secret=\"vW75StPZ0B\"><p><a href=\"https://haniwaman.com/loop/\">WordPressの任意のループ（サブループ）を作る方法と覚えておきたい指定方法</a></p></blockquote>\n<p><iframe title=\"&#8220;WordPressの任意のループ（サブループ）を作る方法と覚えておきたい指定方法&#8221; &#8212; HPcode\" class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" src=\"https://haniwaman.com/loop/embed/#?secret=vW75StPZ0B\" data-secret=\"vW75StPZ0B\" width=\"500\" height=\"282\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe></p>\n<div id=\"toc_container\" class=\"no_bullets\"><p class=\"toc_title\">目次</p><ul class=\"toc_list\"><li><a href=\"#i\"><span class=\"toc_number toc_depth_1\">1</span> 動きのサンプル例</a></li><li><a href=\"#WordPress\"><span class=\"toc_number toc_depth_1\">2</span> WordPressで無限スクロールを実装する方法！</a><ul><li><a href=\"#PHP\"><span class=\"toc_number toc_depth_2\">2.1</span> 追加で表示するようのPHPファイルの作成</a></li><li><a href=\"#AjaxJavaScript\"><span class=\"toc_number toc_depth_2\">2.2</span> Ajaxで表示するためのJavaScriptの記述</a></li></ul></li><li><a href=\"#i-2\"><span class=\"toc_number toc_depth_1\">3</span> ローディング要素を追加する</a></li><li><a href=\"#i-3\"><span class=\"toc_number toc_depth_1\">4</span> ボタンによる読み込みに変更</a><ul><li><a href=\"#i-4\"><span class=\"toc_number toc_depth_2\">4.1</span> ボタン用の要素を一覧の下に追加</a></li><li><a href=\"#Ajax\"><span class=\"toc_number toc_depth_2\">4.2</span> Ajaxと連動してボタンにクラスを付与</a></li><li><a href=\"#i-5\"><span class=\"toc_number toc_depth_2\">4.3</span> 記事の終わりはボタンを非表示</a></li></ul></li><li><a href=\"#i-6\"><span class=\"toc_number toc_depth_1\">5</span> おわり</a></li></ul></div>\n<h2><span id=\"i\">動きのサンプル例</span></h2>\n<p>実際の動きはこんな感じです。スクロールが最後まで行くと、ローディングが開始して記事を取得して表示するという動きになっています。<br />\n<video width=\"520\" src=\"https://haniwaman.com/wp-content/uploads/2019/10/infinite-scroll.mov\" controls autoplay loop></video></p>\n<p>自作できるようになっていると、ローディング時の動きなど柔軟に対応できるようになるはずです。</p>\n<h2><span id=\"WordPress\">WordPressで無限スクロールを実装する方法！</span></h2>\n<p>大きな流れとしては以下の2つです。</p>\n<ul class=\"check\">\n<li>追加で表示する用のPHPファイルの作成</li>\n<li>Ajaxで表示するためのJavaScriptの記述</li>\n</ul>\n<h3><span id=\"PHP\">追加で表示するようのPHPファイルの作成</span></h3>\n<p>では早速、追加で表示する用のPHPファイルを作っていきましょう。</p>\n<p>何を書くかというと、一覧のループの中で回している部分になります。<span class=\"filename\">archive.php</span>や<span class=\"filename\">home.php</span>でループ処理をしているかと思いますが、ループ部分だけを抜き出すようなイメージです。以下のような書き方がされていたとすると<code>&lt;div class=\"entry-items\"&gt;&lt;/div&gt;&lt;!-- /entry-items --&gt;</code>以外の部分ですね。</p>\n<pre><span class=\"filename\">home.php</span><span class=\"code-copy\" data-clipboard-target=\"#code-0\">コピー</span><code id=\"code-0\" class=\"php\">&lt;div class=\"entry-items\"&gt;\r\n&lt;?php\r\nwhile ( $hoge_query-&gt;have_posts() ) :\r\n$hoge_query-&gt;the_post();\r\n?&gt;\r\n\r\n&lt;!-- 一覧のアイテム --&gt;\r\n\r\n\t&lt;?php\r\nendwhile;\r\n?&gt;\r\n&lt;/div&gt;&lt;!-- /entry-items --&gt;\r\nwp_reset_postdata();</code></pre>\n<p><span class=\"filename\">ajax-item.php</span>のような名前で新しいファイルを用意します。ここに上記の<code>&lt;div class=\"entry-items\"&gt;&lt;/div&gt;&lt;!-- /entry-items --&gt;</code>以外の部分をコピーしてあげて、WP_Queryの条件を変えてあげます。</p>\n<p>そして必要なものを色々足して書き直したのが以下のようなコードですね（3分クッキングのような手際&#8230;）。</p>\n<pre><span class=\"filename\">ajax-item.php</span><span class=\"code-copy\" data-clipboard-target=\"#code-1\">コピー</span><code id=\"code-1\" class=\"php\">require_once '../../../../wp-load.php';\r\n\r\n$offset         = isset( $_POST['post_num_now'] ) ? $_POST['post_num_now'] : 1;\r\n$posts_per_page = isset( $_POST['post_num_add'] ) ? $_POST['post_num_add'] : 0;\r\n\r\n$ajax_query = new WP_Query(\r\n\tarray(\r\n\t\t'post_type'      =&gt; 'post',\r\n\t\t'posts_per_page' =&gt; $posts_per_page,\r\n\t\t'offset'         =&gt; $offset,\r\n\t)\r\n);\r\n?&gt;\r\n&lt;?php if ( $ajax_query-&gt;have_posts() ) : ?&gt;\r\n\t&lt;?php while ( $ajax_query-&gt;have_posts() ) : ?&gt;\r\n\t\t&lt;?php $ajax_query-&gt;the_post(); ?&gt;\r\n\r\n\t\t&lt;!-- 一覧のアイテム --&gt;\r\n\r\n\t&lt;?php endwhile; ?&gt;\r\n&lt;?php endif; ?&gt;\r\n&lt;?php\r\nwp_reset_postdata();</code></pre>\n<p>ポイントとしては以下の3点です。</p>\n<h4>１、WordPress関数を使えるようにする</h4>\n<p>次のコードを追加しています。<code>require_once '../../../../wp-load.php';</code></p>\n<p><span class=\"filename\">wp-load.php</span>とは、WordPressの関数を読み込ませるために必要なファイルとなります。Ajaxで通信したファイルはWordPressのファイルの関数を使うことができないので、最初に<span class=\"filename\">wp-load.php</span>を読み込んでWordPressの書き方ができるようにしておく必要があります。</p>\n<h4>2、Ajaxで値を受け取る</h4>\n<p>無限スクロールで記事を読み込む上で大事なのは、<code>何件目から何件目までを読み込むか</code>という情報です。これはJavaScript側で持たせて、PHPに情報を連携してあげます。</p>\n<p>最初の<strong>何件目から</strong>というところは、今表示されている件数を都度取得してPHPに送ってあげる必要がります。値は何でもいいですが、今回は<code>post_num_now</code>という値にしてPOSTで送っているので、<code>$_POST['post_num_now']</code>で取得するという書き方をしています。</p>\n<p><strong>何件目まで</strong>という部分も同様に<code>$_POST['post_num_add']</code>で取得しています。</p>\n<h4>3、<code>WP_Query</code>で追加分を取得</h4>\n<p>そして<code>WP_Query</code>によって追加分を取得しています。パラメーターとして重要なのは以下の２つです。</p>\n<ul>\n<li><code>offset</code>・・・何件目からの情報を取得するか</li>\n<li><code>posts_per_page</code>・・・何件分の情報を取得するか</li>\n</ul>\n<p><code>offset</code>に、今表示されている件数 + 1の値を入れてあげることで、どんどん新しい情報を取得できるといった仕組みですね。</p>\n<h3><span id=\"AjaxJavaScript\">Ajaxで表示するためのJavaScriptの記述</span></h3>\n<p>続いてはJavaScript側での記述内容です。こちらもまずは一気に書いてみます。</p>\n<p>ざっくりとした処理内容としては、一番下までスクロールされたらAjax通信して先ほど作成した<code>ajax-item.php</code>によって記事を取得し読み込むといったものになります。</p>\n<p>jQueryのスクロール処理についても詳しくは解説しないので、以下の記事を参考にしてください&#8230;。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-2\">コピー</span><code id=\"code-2\" class=\"js\">jQuery(function() {\r\n\tlet documentHeight = jQuery(document).height();\r\n\tlet windowsHeight = jQuery(window).height();\r\n\tlet url = \"http://example.com/wp-content/themes/theme-name/ajax-item.php\"; /* ご自身のURL */\r\n\tlet postNumNow = 4; /* 最初に表示されている記事数 */\r\n\tlet postNumAdd = 4; /* 追加する記事数 */\r\n\tlet flag = false;\r\n\tjQuery(window).on(\"scroll\", function() {\r\n\t\tlet scrollPosition = windowsHeight + jQuery(window).scrollTop();\r\n\t\tif (scrollPosition &gt;= documentHeight) {\r\n\t\t\tif (!flag) {\r\n\t\t\t\tflag = true;\r\n\t\t\t\tjQuery.ajax({\r\n\t\t\t\t\ttype: \"POST\",\r\n\t\t\t\t\turl: url,\r\n\t\t\t\t\tdata: {\r\n\t\t\t\t\t\tpost_num_now: postNumNow,\r\n\t\t\t\t\t\tpost_num_add: postNumAdd\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsuccess: function(response) {\r\n\t\t\t\t\t\tjQuery(\".entry-items\").append(response);\r\n\t\t\t\t\t\tdocumentHeight = jQuery(document).height();\r\n\t\t\t\t\t\tpostNumNow += postNumAdd;\r\n\t\t\t\t\t\tflag = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n});</code></pre>\n<h4><span class=\"filename\">ajax-item.php</span>へのURL</h4>\n<p><code>url</code>に入れるのは、先ほど作成した<span class=\"filename\">ajax-item.php</span>までの絶対パスになります。</p>\n<h4>今の記事数と追加する記事数</h4>\n<p><code>postNumNow</code>は、最初（今）に表示されている記事数です。それぞのれサイトで違う値になるかと思います。<code>postNumAdd</code>はスクロール時に何件取得するかという値です。こちらもサイトの設計によって変わってくるはずです。</p>\n<h4>読み込み中か否か</h4>\n<p><code>flag</code>は、処理中かどうかを判定するためのものです。AJAX通信中は読み込み処理を中止するという動きになります。</p>\n<p>成功すると<code>success</code>の関数に移ります。ここで行うのは、取得した記事を画面に表示させる処理です。<code>jQuery(\".entry-items\")</code>は一覧を囲っている親要素となる部分で、この最後に<span class=\"filename\">ajax-item.php</span>の内容を追加します。</p>\n<h4>高さの再取得</h4>\n<p>要素が追加されて画面が高さが変わったので、<code>jQuery(document).height()</code>の値を再度取得しなおします。そして、現在の記事数を持っている<code>postNum</code>も追加した分を足して更新し、Ajax通信中かどうかを判断していた<code>flag</code>を解除してあげるといった動きをしています。</p>\n<p><strong class=\"marker\">どこまでスクロールしたら読み込むか</strong>といった部分はサイトの設計や一覧の表示場所によって各々指定を考えてもらえたらと思います。</p>\n<h2><span id=\"i-2\">ローディング要素を追加する</span></h2>\n<p>記事を読込中であることが分かるように、ローディング表示用の要素を追加して、<strong class=\"marker\">ローディング処理を追加</strong>してみます。要素の中身やデザインは好きなように変更してもらえたらと思います。</p>\n<p>以下のように一覧を囲っている要素である<code>&lt;/div&gt;&lt;!-- /entry-items --&gt;</code>の後に追加して、常に一覧の最後に表示されるようにしました。<code>&lt;div class=\"entry-loading\"&gt;loading...&lt;/div&gt;</code>の部分です。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-3\">コピー</span><code id=\"code-3\" class=\"php\">&lt;div class=\"entry-items\"&gt;\r\n&lt;?php\r\nwhile ( $hoge_query-&gt;have_posts() ) :\r\n$hoge_query-&gt;the_post();\r\n?&gt;\r\n\r\n&lt;!-- 一覧のアイテム --&gt;\r\n\r\n  &lt;?php\r\nendwhile;\r\n?&gt;\r\n&lt;/div&gt;&lt;!-- /entry-items --&gt;\r\n&lt;div class=\"entry-loading\"&gt;loading...&lt;/div&gt;\r\nwp_reset_postdata();</code></pre>\n<p>続いてJavaScriptですが、Ajaxの通信開始時（記事を取得しにいくタイミング）で<code>jQuery(\".entry-loading\").addClass(\"is-show\");</code>で<code>.is-show</code>というクラスを付与して、記事の取得が完了したら、<code>removeClass</code>しているというシンプルな処理です。動きはCSSで作っていきます。<br />\n※ <strong>Ajaxの部分だけ抜粋</strong></p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-4\">コピー</span><code id=\"code-4\" class=\"js\">if (!flag) {\r\n\tjQuery(\".entry-loading\").addClass(\"is-show\");\r\n\tflag = true;\r\n\tjQuery.ajax({\r\n\t\ttype: \"POST\",\r\n\t\turl: url,\r\n\t\tdata: {\r\n\t\t\tpost_num_now: postNumNow,\r\n\t\t\tpost_num_add: postNumAdd\r\n\t\t},\r\n\t\tsuccess: function(response) {\r\n\t\t\tjQuery(\".works-items\").append(response);\r\n\t\t\tjQuery(\".entry-loading\").removeClass(\"is-show\");\r\n\t\t\tdocumentHeight = jQuery(document).height();\r\n\t\t\tpostNumNow += postNumAdd;\r\n\t\t\tflag = false;\r\n\t\t}\r\n\t});\r\n}</code></pre>\n<p>今回のローディング要素のCSSはめっちゃシンプルですが、ここを好きなような変更することで、画面を覆う半透明のローディング画面にしたり、アニメーション付けたりなど色んな表現ができるようになるはずです。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-5\">コピー</span><code id=\"code-5\" class=\"css\">.entry-loading {\r\n\ttext-align: center;\r\n\tmargin: 3em 0;\r\n\tfont-weight: 700;\r\n\twidth: 100%;\r\n\tdisplay: none;\r\n}\r\n\r\n.entry-loading.is-show {\r\n\tdisplay: block;\r\n}</code></pre>\n<p>おさらいすると、ローディング用の要素を一覧の最後につけて、Ajaxの処理と連動してクラスを外したり付けたりして、実際の動きはCSSに書いていく、といった流れになります。</p>\n<p>CSSで動きつけるのが面倒な人は、<strong class=\"marker\">Gif動画などを用意してローディング用の要素のところで画像を差し込めば楽</strong>かもしれません。</p>\n<h2><span id=\"i-3\">ボタンによる読み込みに変更</span></h2>\n<p>スクロールではなく<strong class=\"marker\">ボタンを押した時に読み込むという処理</strong>もよく見ます。スクロールと違うのは、jQueryでのイベント取得の方法と判定の部分だけですね。Ajaxとかの考え方は特に変わりません。</p>\n<p>変わる部分はクリックイベントでの発動になる点と、ボタン要素へのクラスの付与があるという点だけです。</p>\n<h3><span id=\"i-4\">ボタン用の要素を一覧の下に追加</span></h3>\n<p>ローディングと同様にボタン用の要素を一覧の下に追加します。こちらは標準で表示させておくようにします。<code>&lt;div class=\"entry-more\"&gt;もっと読み込む&lt;/div&gt;</code>の部分。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-6\">コピー</span><code id=\"code-6\" class=\"php\">&lt;div class=\"entry-items\"&gt;\r\n&lt;?php\r\nwhile ( $hoge_query-&gt;have_posts() ) :\r\n$hoge_query-&gt;the_post();\r\n?&gt;\r\n\r\n&lt;!-- 一覧のアイテム --&gt;\r\n\r\n  &lt;?php\r\nendwhile;\r\n?&gt;\r\n&lt;/div&gt;&lt;!-- /entry-items --&gt;\r\n&lt;div class=\"entry-more\"&gt;もっと読み込む&lt;/div&gt;\r\n&lt;div class=\"entry-loading\"&gt;loading...&lt;/div&gt;\r\nwp_reset_postdata();</code></pre>\n<h3><span id=\"Ajax\">Ajaxと連動してボタンにクラスを付与</span></h3>\n<p>Ajax通信中（追加の記事を取得中）はボタンを非表示にするように、クラスを付与したり外したりしています。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-7\">コピー</span><code id=\"code-7\" class=\"js\">let url = \"http://example.com/wp-content/themes/theme-name/ajax-item.php\"; /* ご自身のURL */\r\nlet postNumNow = 4;\r\nlet postNumAdd = 4;\r\nlet flag = false;\r\njQuery(document).on(\"click\", \".entry-more\", function() {\r\n\tif (!flag) {\r\n\t\tjQuery(\".entry-more\").addClass(\"is-hide\");\r\n\t\tjQuery(\".entry-loading\").addClass(\"is-show\");\r\n\t\tflag = true;\r\n\t\tjQuery.ajax({\r\n\t\t\ttype: \"POST\",\r\n\t\t\turl: url,\r\n\t\t\tdata: {\r\n\t\t\t\tpost_num_now: postNumNow,\r\n\t\t\t\tpost_num_add: postNumAdd\r\n\t\t\t},\r\n\t\t\tsuccess: function(response) {\r\n\t\t\t\tjQuery(\".works-items\").append(response);\r\n\t\t\t\tjQuery(\".entry-loading\").removeClass(\"is-show\");\r\n\t\t\t\tjQuery(\".entry-more\").removeClass(\"is-hide\");\r\n\t\t\t\tdocumentHeight = jQuery(document).height();\r\n\t\t\t\tpostNumNow += postNumAdd;\r\n\t\t\t\tflag = false;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n});</code></pre>\n<p>ボタンのCSSも自由ですが、今回は単純に表示・非表示のCSSとしています。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-8\">コピー</span><code id=\"code-8\" class=\"css\">.entry-more {\r\n\ttext-align: center;\r\n\twidth: 280px;\r\n\tpadding: 12px 16px;\r\n\ttext-align: center;\r\n\tbackground: #7e7e7e;\r\n\tcolor: #fff;\r\n\tmargin: 3em auto 0;\r\n\tcursor: pointer;\r\n}\r\n\r\n.entry-more.is-hide {\r\n\tdisplay: none;\r\n}</code></pre>\n<h3><span id=\"i-5\">記事の終わりはボタンを非表示</span></h3>\n<p>今のままだと、終了時にボタンが常に表示されてしまいます。<strong class=\"marker\">読み込む記事がなくなったら非表示にする処理</strong>に変更してみましょう。記事を表示するHTMLタグと、これ以上記事があるかどうかを判定する値をAjaxに受け取らせる必要があって、ちょっとだけ面倒です&#8230;。</p>\n<p>Ajax通信した時に表示対象のPHP（今回だと<span class=\"filename\">ajax-item.php</span>）を書き換えます。</p>\n<h4>まずは、全件読み込んだ時の最大件数を取得</h4>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-9\">コピー</span><code id=\"code-9\" class=\"php\">$all_query = new WP_Query(\r\n\tarray(\r\n\t\t'post_type'      =&gt; 'post',\r\n\t\t'posts_per_page' =&gt; -1,\r\n\t)\r\n);\r\n$all_post_count = $all_query-&gt;post_count;</code></pre>\n<h4>一覧取得時に表示させることなく、出力される値を変数として格納</h4>\n<p><code>ob_start()</code>等の出力させずに変数に格納します。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-10\">コピー</span><code id=\"code-10\" class=\"php\">&lt;?php if ( $ajax_query-&gt;have_posts() ) : ?&gt;\r\n\t&lt;?php $entry_item = ''; ?&gt;\r\n\t&lt;?php ob_start(); ?&gt;\r\n  &lt;?php while ( $ajax_query-&gt;have_posts() ) : ?&gt;\r\n    &lt;?php $ajax_query-&gt;the_post(); ?&gt;\r\n\r\n    &lt;!-- 一覧のアイテム → --&gt;&lt;?php get_template_part( 'parts/works-item' ); ?&gt;\r\n\r\n  &lt;?php endwhile; ?&gt;\r\n\t&lt;?php $entry_item .= ob_get_contents(); ?&gt;\r\n\t&lt;?php ob_end_clean(); ?&gt;\r\n&lt;?php endif; ?&gt;\r\n&lt;?php\r\nwp_reset_postdata();</code></pre>\n<h4>追加するHTMLタグと残りの件数を配列で返却</h4>\n<p>上記で取得できる2つの値を配列にしてからJSONに返却します。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-11\">コピー</span><code id=\"code-11\" class=\"php\">echo json_encode( array( $entry_item, $all_post_count - ( $offset + $ajax_query-&gt;post_count ) ) );\r\n</code></pre>\n<h4>JSON形式の値をAjaxで受け取る</h4>\n<p>Ajaxの処理が成功した時にJSONを受け取るうようにします。<code>JSON.parse()</code>で変換して配列のように使えるようになりました。<code>if (data[1] &gt; 0)</code>として、「まだ記事があるときだけボタンを表示させる」という処理にできました。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-12\">コピー</span><code id=\"code-12\" class=\"js\">success: function(response) {\r\n\tdata = JSON.parse(response);\r\n\tjQuery(\".works-items\").append(data[0]);\r\n\tjQuery(\".entry-loading\").removeClass(\"is-show\");\r\n\tif (data[1] &gt; 0) {\r\n\t\tjQuery(\".entry-more\").removeClass(\"is-hide\");\r\n\t}\r\n\tdocumentHeight = jQuery(document).height();\r\n\tpostNumNow += postNumAdd;\r\n\tflag = false;\r\n}</code></pre>\n<h2><span id=\"i-6\">おわり</span></h2><div class=\"matome\"><div class=\"matome-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"></div><div class=\"matome-twitter\"><a href=\"https://twitter.com/haniwa008?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\" data-show-screen-name=\"false\" data-size=\"large\" data-lang=\"ja\" data-show-count=\"true\">Follow @haniwa008</a><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></div></div><!-- /matome -->\n<p>WordPressでのJavaScriptの読み込み、<code>WP_Query()</code>やテンプレート階層などのWordPressのお作法のお話や、そもそものAjaxの使い方など、前提となる知識が多すぎるので、まだ理解できていない方はまずはそれらの知識をインターネット等で検索して保管しながらこの記事を見てもらえたらと思います&#8230;。</p>\n<p>自分で実装するとカスタマイズもしやすく、より知識も深まります。プラグインやライブラリでは不十分、、、という方は自作してゴリゴリカスタマイズできるように自作してみてくださいー！</p>\n","date":"December 04, 2019","categories":[{"name":"WordPress","slug":"wordpress"}],"tags":null,"author":{"name":"はにわまん","slug":"haniwaman"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"4ca0a3d8-c3cc-5cc7-b3f4-ec29a9e7bf95"}}}