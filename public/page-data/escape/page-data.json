{"componentChunkName":"component---src-templates-post-js","path":"/escape/","result":{"data":{"wordpressPost":{"id":"217eeabc-61b9-587d-b214-3ee500bde837","title":"WordPressの主要なエスケープ関数3つとエスケープ対象のコードを見つける方法","slug":"escape","content":"<p>WordPressでテーマを作っていると、こちらから出力しているに<strong class=\"marker\">エスケープしていない箇所があったら怒られます</strong>。誰に怒られるかというと、「<a href=\"https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards\" rel=\"noopener\" target=\"_blank\">WordPressのコーディング規約</a>」ですね。</p>\n<p>WordPress先生いわく、以下のとおりです。</p>\n<blockquote><p>信頼できないデータが、さまざまな情報源から入ってきます (ユーザー、第三者のサイト、あなた自身のデータベースも!…)。そして、これらすべては、入力時と出力時の両方で検証する必要があります。</p>\n<p>→ <a href=\"https://wpdocs.osdn.jp/%E3%83%87%E3%83%BC%E3%82%BF%E6%A4%9C%E8%A8%BC\" rel=\"noopener\" target=\"_blank\">データ検証 &#8211; WordPress Codex 日本語版</a>\n</p></blockquote>\n<p>悪意のある文字列をうっかり出力しそうになった場合もエスケープ処理が正しく行えていれば、トラブルを未然に防げるということですね。WordPressでテーマ作成している方は、確実に覚えておきましょう！！！</p>\n<div class=\"chat\"><figure class=\"chat-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"><figcaption>はにわまん</figcaption></figure><div class=\"chat-content\">公式以外のテーマだとエスケープ処理されていないものも多いです...</div></div>\n<div id=\"toc_container\" class=\"no_bullets\"><p class=\"toc_title\">目次</p><ul class=\"toc_list\"><li><a href=\"#3\"><span class=\"toc_number toc_depth_1\">1</span> 覚えておきたい3つのエスケープ処理</a><ul><li><a href=\"#i\"><span class=\"toc_number toc_depth_2\">1.1</span> 文字のエスケープ</a></li><li><a href=\"#URL\"><span class=\"toc_number toc_depth_2\">1.2</span> URLのエスケープ</a></li><li><a href=\"#HTML\"><span class=\"toc_number toc_depth_2\">1.3</span> HTML属性のエスケープ</a></li></ul></li><li><a href=\"#WordPress\"><span class=\"toc_number toc_depth_1\">2</span> WordPressが出力するものは中でエスケープされている</a></li><li><a href=\"#WordPress-2\"><span class=\"toc_number toc_depth_1\">3</span> WordPressのコーディング規約でチェック</a><ul><li><a href=\"#VSCode\"><span class=\"toc_number toc_depth_2\">3.1</span> VSCode上でチェックさせると楽</a></li></ul></li><li><a href=\"#i-2\"><span class=\"toc_number toc_depth_1\">4</span> おわり</a></li></ul></div>\n<h2><span id=\"3\">覚えておきたい3つのエスケープ処理</span></h2>\n<p>参考になるのはWordPress Codex日本語版の「データ検証」のページになります。<br />\n→ <a href=\"https://wpdocs.osdn.jp/%E3%83%87%E3%83%BC%E3%82%BF%E6%A4%9C%E8%A8%BC\" rel=\"noopener\" target=\"_blank\">データ検証 &#8211; WordPress Codex 日本語版</a></p>\n<p>ザーッと見て適切な箇所で使う必要があるのですが、この記事では特に頻出するエスケープ関数について３つ紹介していけたらと思います。</p>\n<h3><span id=\"i\">文字のエスケープ</span></h3>\n<p>HTMLの特殊文字が入っていても無効化して表示してくれる関数が<code>esc_html()</code>です。<code>&lt;</code>みたいな文字をそのまま出力させちゃうと、HTML構造が崩れちゃいますよね。</p>\n<p>このエスケープ処理を通してあげると、HTMLタグの邪魔になる文字は無効化して<strong class=\"marker\">文字列として表示</strong>してくれます。</p>\n<p>例えば、以下のような感じですね。カスタムフィールドを表示させる時によく使いかすかね&#8230;</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-0\">コピー</span><code id=\"code-0\" class=\"php\">&lt;div class=\"item-name\"&gt;&lt;?php echo esc_html( $items-&gt;name ); ?&gt;&lt;/div&gt;\r\n</code></pre>\n<p>Codex → <a href=\"https://wpdocs.osdn.jp/%E9%96%A2%E6%95%B0%E3%83%AA%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9/esc_html\" rel=\"noopener\" target=\"_blank\">関数リファレンス/esc html &#8211; WordPress Codex 日本語版</a></p>\n<h3><span id=\"URL\">URLのエスケープ</span></h3>\n<p>個人的に一番使うことが多いのが、URLのエスケープ処理です。関数としては<code>esc_url()</code>を使います。</p>\n<p>例えば、ヘッダーのロゴをテーマから出力したい場合は、以下のような感じです。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-1\">コピー</span><code id=\"code-1\" class=\"php\">&lt;img src=\"&lt;?php echo esc_url( get_template_directory_uri() . '/img/logo.svg' ); ?&gt;\" alt=\"\"&gt;\r\n</code></pre>\n<p>http～から始まるURLを記載する時は、この<code>esc_url()</code>を使う癖を付けてください。</p>\n<p>Codex → <a href=\"https://wpdocs.osdn.jp/%E9%96%A2%E6%95%B0%E3%83%AA%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9/esc_url\" rel=\"noopener\" target=\"_blank\">関数リファレンス/esc url &#8211; WordPress Codex 日本語版</a></p>\n<h3><span id=\"HTML\">HTML属性のエスケープ</span></h3>\n<p>classやaltなど、HTMLタグの属性の値を出力する場合に使われるのが、<code>esc_attr()</code>のです。そんなに頻繁に使うことはないですが、HTMLタグの中で使う3兄弟の1人としてセットで覚えています。</p>\n<p>例えば以下のように使います。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-2\">コピー</span><code id=\"code-2\" class=\"php\">&lt;div class=\"&lt;?php echo esc_attr( $class ); ?&gt;\"&gt;\r\n</code></pre>\n<p>Codex → <a href=\"https://wpdocs.osdn.jp/%E9%96%A2%E6%95%B0%E3%83%AA%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9/esc_attr\" rel=\"noopener\" target=\"_blank\">関数リファレンス/esc attr &#8211; WordPress Codex 日本語版</a></p>\n<p><code>esc_html()</code>、<code>esc_url()</code>、<code>esc_attr()</code>は親しいところで使われるのでセットで覚えておくといいでしょう！</p>\n<p>それにしても、WordPressのエスケープ関数は細かく分けられていて、慣れるまでが大変です&#8230;。</p>\n<h2><span id=\"WordPress\">WordPressが出力するものは中でエスケープされている</span></h2>\n<p>エスケープするのは、自分で<code>echo</code>している時に限ります！わたしはコーディング規約で自動チェックされるようにしていますが、動きを見ていると、どうも<code>echo</code>と連動して反応しているような&#8230;笑</p>\n<p>WordPressで値を引っ張ってくるための主要な関数の多くは2種類あります。</p>\n<ul class=\"check\">\n<li><code>the_</code>から始まるもの</li>\n<li><code>get_</code>から始まるもの</li>\n</ul>\n<p>分かりやすいところだと、<code>the_title()</code>と<code>get_the_title()</code>でしょうか。上の説明を見た方ならすぐ分かると思いますが<code>the_title()</code>は<strong class=\"marker\">エスケープ処理が不要</strong>、<code>get_the_title()</code>は<strong class=\"marker\">エスケープ処理が必要</strong>です。</p>\n<p><code>the_title()</code>では、この関数の内部でエスケープ処理をしてくれているからですね。</p>\n<p>並べて書くと以下のような感じです。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-3\">コピー</span><code id=\"code-3\" class=\"php\">&lt;h2&gt;&lt;?php the_title(); ?&gt;&lt;/h2&gt;\r\n&lt;h2&gt;&lt;?php echo esc_html( get_the_title() ); ?&gt;&lt;/h2&gt;\r\n</code></pre>\n<p>特に理由がなければ、<code>the_</code>での出力がおすすめです。エスケープに悩む必要はなくなるので。</p>\n<h2><span id=\"WordPress-2\">WordPressのコーディング規約でチェック</span></h2>\n<p>WordPressのテーマには「<strong>こんなルールで作ってくださいね</strong>」というコーディング規約があります。それをまとめたのが、<a href=\"https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards\" rel=\"noopener\" target=\"_blank\">WordPress-Coding-Standards</a>にまとまっています。</p>\n<p>テーマを作ったら、この<strong class=\"marker\">コーディングルールに準拠しているかを確認するといい</strong>でしょう。おそらく公式に申請するときもチェックされるものかと（申請したことないので分かりませんが&#8230;）</p>\n<p>チェックすると、エスケープ処理が必要かどうかが簡単に分かります。Windowsに導入する方法は以下にまとめているので、参考にしていただければと思います。</p>\n<blockquote class=\"wp-embedded-content\" data-secret=\"24BzJDIUWf\"><p><a href=\"https://haniwaman.com/wordpress-coding-standards/\">Windowsに「WordPress-Coding-Standards」を導入する方法</a></p></blockquote>\n<p><iframe title=\"&#8220;Windowsに「WordPress-Coding-Standards」を導入する方法&#8221; &#8212; HPcode\" class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" src=\"https://haniwaman.com/wordpress-coding-standards/embed/#?secret=24BzJDIUWf\" data-secret=\"24BzJDIUWf\" width=\"500\" height=\"282\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe></p>\n<p>「エスケープしなさい！」というエラーは以下のような感じで表示されます（よく目にします&#8230;）</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-4\">コピー</span><code id=\"code-4\" class=\"txt\"> 7 | ERROR   | [ ] All output should be run through an escaping\r\n    |         |     function (see the Security sections in the\r\n    |         |     WordPress Developer Handbooks), found\r\n    |         |     'get_template_directory_uri'.</code></pre>\n<p>これはさっき例で出したように、<strong class=\"marker\">URLをエスケープせずに表示しているから</strong>ですね。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-5\">コピー</span><code id=\"code-5\" class=\"php\">&lt;img src=\"&lt;?php echo get_template_directory_uri() . '/img/logo.svg'; ?&gt;\" alt=\"\"&gt;\r\n</code></pre>\n<p>以下のようにURLを<code>esc_url()</code>で囲ってあげることで消すことができます。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-1\">コピー</span><code id=\"code-1\" class=\"php\">&lt;img src=\"&lt;?php echo esc_url( get_template_directory_uri() . '/img/logo.svg' ); ?&gt;\" alt=\"\"&gt;\r\n</code></pre>\n<p>このように、WordPress-Coding-Standardsでチェックする癖があると、「あ、この場合もエスケープ処理がいるのか&#8230;」であったり、「じゃあどのエスケープ関数を使うんだろうか&#8230;」みたいに調べるキッカケにもなったりします。</p>\n<p>テーマ開発者はぜひ導入してチェックしてみてください！</p>\n<h3><span id=\"VSCode\">VSCode上でチェックさせると楽</span></h3>\n<p>WindowsとかVSCodeとか、特定の環境下の説明ばかりですみません。。（他の環境でも似たようなことはできると思うので調べてみてください&#8230;）</p>\n<p>ターミナルを開いてコマンド打ってチェックするのは、めちゃくちゃ面倒くさいです。おそらくこの環境のままだと、そのうちチェックしなくなるはずです。</p>\n<p>でも、コーディングしたタイミングですぐにエラーってテキストエディタ上に出してくれたら、「あ、直さなきゃ」ってなりませんか。わたしはVSCodeを拡張させて<strong class=\"marker\">WordPressのコーディング規約からズレたらエラー表示させる</strong>ということをやっています。</p>\n<p>記事としては以下の「phpcs」が参考になるかと思います。</p>\n<blockquote class=\"wp-embedded-content\" data-secret=\"wZrGvdb2op\"><p><a href=\"https://haniwaman.com/vscode-wordpress/\">VSCodeでWordPress開発するための拡張機能とおすすめの設定</a></p></blockquote>\n<p><iframe title=\"&#8220;VSCodeでWordPress開発するための拡張機能とおすすめの設定&#8221; &#8212; HPcode\" class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" src=\"https://haniwaman.com/vscode-wordpress/embed/#?secret=wZrGvdb2op\" data-secret=\"wZrGvdb2op\" width=\"500\" height=\"282\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe></p>\n<p>エラーがあれば、赤い波線で表示され、マウスホバーするとエラーメッセージを見ることができます。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/01/escape-700x106.png\" alt=\"\" class=\"alignnone size-medium wp-image-12824\" srcset=\"https://haniwaman.com/wp-content/uploads/2019/01/escape-700x106.png 700w, https://haniwaman.com/wp-content/uploads/2019/01/escape-768x117.png 768w, https://haniwaman.com/wp-content/uploads/2019/01/escape.png 1015w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p>エラーメッセージに従ってエスケープするとエラーは消えます。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/01/escape2-700x152.png\" alt=\"\" class=\"alignnone size-medium wp-image-12825\" srcset=\"https://haniwaman.com/wp-content/uploads/2019/01/escape2-700x152.png 700w, https://haniwaman.com/wp-content/uploads/2019/01/escape2-768x166.png 768w, https://haniwaman.com/wp-content/uploads/2019/01/escape2.png 1066w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p>「エスケープは大事！」って分かっていたとしても<strong>目視でチェックするのは大変</strong>なので、「WordPress-Coding-Standards」を導入してできるだけ楽に開発していきましょう！</p>\n<h2><span id=\"i-2\">おわり</span></h2><div class=\"matome\"><div class=\"matome-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"></div><div class=\"matome-twitter\"><a href=\"https://twitter.com/haniwa008?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\" data-show-screen-name=\"false\" data-size=\"large\" data-lang=\"ja\" data-show-count=\"true\">Follow @haniwa008</a><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></div></div><!-- /matome -->\n<p>WordPressの主要なエスケープ関数3つとエスケープ対象のコードを見つける方法でした。</p>\n<p>HTMLエリアの出力に関する<code>esc_html()</code>、<code>esc_url()</code>、<code>esc_attr()</code>は、エスケープ関数の中でも使う頻度が高いです。</p>\n<p>その他は以下を参考に都度どれが当てはまりそうか確認してみてください。<br />\n→ <a href=\"https://wpdocs.osdn.jp/%E3%83%87%E3%83%BC%E3%82%BF%E6%A4%9C%E8%A8%BC\" rel=\"noopener\" target=\"_blank\">データ検証 &#8211; WordPress Codex 日本語版 </a></p>\n<p>とりあえず、エラー箇所がチェックできる環境が準備できていれば、あとは足りない部分を調べればいいだけなので、「WordPress-Coding-Standards」はマジで偉大だと思います。</p>\n","date":"January 23, 2019","categories":[{"name":"WordPress","slug":"wordpress"}],"tags":null,"author":{"name":"はにわまん","slug":"haniwaman"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"217eeabc-61b9-587d-b214-3ee500bde837"}}}