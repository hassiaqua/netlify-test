{"componentChunkName":"component---src-templates-post-js","path":"/editorconfig/","result":{"data":{"wordpressPost":{"id":"33267628-5066-539f-bd8c-2749bed4f304","title":"EditorConfigの使い方！テキストエディタ側にコーディングルールを守らせよう","slug":"editorconfig","content":"<p>EditorConfigはテキストエディタで標準で利用するタブ数やインデントをタブにするかスペースにするか、改行コードをどうするか、みたいなことを定義できるツールです。</p>\n<p>多くのテキストエディタ（を拡張すること）でサポートすることができるので、どういうテキストエディタを使っているか、また、その<strong class=\"marker\">テキストエディタでどういう設定をしているかに依存せず、統一感のあるコーディングができます</strong>。</p>\n<p>特に複数人でのコーディングする時に向いているかもしれません。案件ごとやクライアントのコーディング規約によってEditorConfigのルールを事前に作成しておくと、人によってブレることなく最低限のコーディングができるはずです！</p>\n<div class=\"chat\"><figure class=\"chat-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"><figcaption>はにわまん</figcaption></figure><div class=\"chat-content\">わたしは基本的にはWordPressのコーディング規約に合うようにEditorConfigを設定しています</div></div>\n<div id=\"toc_container\" class=\"no_bullets\"><p class=\"toc_title\">目次</p><ul class=\"toc_list\"><li><a href=\"#EditorConfig\"><span class=\"toc_number toc_depth_1\">1</span> EditorConfigの使い方</a><ul><li><a href=\"#EditorConfig-2\"><span class=\"toc_number toc_depth_2\">1.1</span> EditorConfigのプラグインを導入</a></li><li><a href=\"#editorconfig\"><span class=\"toc_number toc_depth_2\">1.2</span> .editorconfigにルールを定義</a></li><li><a href=\"#i\"><span class=\"toc_number toc_depth_2\">1.3</span> 実際の動き</a></li></ul></li><li><a href=\"#EditorConfig-3\"><span class=\"toc_number toc_depth_1\">2</span> EditorConfigの活用パターン</a><ul><li><a href=\"#i-2\"><span class=\"toc_number toc_depth_2\">2.1</span> 複数人でコーディングする時</a></li><li><a href=\"#i-3\"><span class=\"toc_number toc_depth_2\">2.2</span> コーディングを外注する時</a></li><li><a href=\"#i-4\"><span class=\"toc_number toc_depth_2\">2.3</span> ルールが決まっている案件を対応する時</a></li></ul></li><li><a href=\"#i-5\"><span class=\"toc_number toc_depth_1\">3</span> おわり</a></li></ul></div>\n<h2><span id=\"EditorConfig\">EditorConfigの使い方</span></h2>\n<p>EditorConfigは基本的にはテキストエディタと連動させることで力を発揮します。テキストエディタを拡張させる必要があるわけですが、ほとんどのテキストエディタで対応しているのでご安心ください。</p>\n<h3><span id=\"EditorConfig-2\">EditorConfigのプラグインを導入</span></h3>\n<p><img src=\"https://haniwaman.com/wp-content/uploads/2019/02/editorconfig-700x167.png\" alt=\"\" class=\"alignnone size-medium wp-image-13439\" srcset=\"https://haniwaman.com/wp-content/uploads/2019/02/editorconfig-700x167.png 700w, https://haniwaman.com/wp-content/uploads/2019/02/editorconfig-768x183.png 768w, https://haniwaman.com/wp-content/uploads/2019/02/editorconfig.png 1051w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p>まずは、お使いのテキストエディタに応じてプラグインをEditorConfigを導入しましょう。有名どころのテキストエディタだと以下のとおりです。</p>\n<div class=\"box box-link\">\n<ul>\n<li>VSCode → <a href=\"https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig\" rel=\"noopener\" target=\"_blank\">https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig</a></li>\n<li>Atom → <a href=\"https://github.com/sindresorhus/atom-editorconfig#readme\" rel=\"noopener\" target=\"_blank\">https://github.com/sindresorhus/atom-editorconfig#readme</a></li>\n<li>Sublime Text → <a href=\"https://github.com/sindresorhus/editorconfig-sublime#readme\" rel=\"noopener\" target=\"_blank\">https://github.com/sindresorhus/editorconfig-sublime#readme</a></li>\n<li>Brackets → <a href=\"https://github.com/kidwm/brackets-editorconfig/\" rel=\"noopener\" target=\"_blank\">https://github.com/kidwm/brackets-editorconfig/</a></li>\n</ul>\n</div>\n<p>以下に対応しているプラグインの一覧がありますので、上位にない場合は参照してください。<br />\n→ <a href=\"https://editorconfig.org/#download\" rel=\"noopener\" target=\"_blank\">EditorConfig Download a Plugin</a></p>\n<p>わたしはVSCodeをメインに使っているので、以後のキャプチャ等はVSCode上での説明となります。<br />\n（他のエディタでもおそらく似たような使い方かとは思います）</p>\n<h3><span id=\"editorconfig\"><span class=\"filename\">.editorconfig</span>にルールを定義</span></h3>\n<p>インストールすると、<span class=\"filename\">.editorconfig</span>に書いたルールが反映されるようになります。</p>\n<p>わたしが基本として記述している内容をそのまま移すと以下のとおりです。完全にWordPressに寄せたルール設定です笑</p>\n<pre><span class=\"filename\">.editorconfig</span><span class=\"code-copy\" data-clipboard-target=\"#code-0\">コピー</span><code id=\"code-0\" class=\"txt\">root = true\r\n\r\n[*]\r\nindent_style = tab\r\nindent_size = 2\r\nend_of_line = lf\r\ncharset = utf-8\r\ntrim_trailing_whitespace = true\r\ninsert_final_newline = true</code></pre>\n<p>指定できるパラメータとしては6つだけのシンプル設計です。</p>\n<table class=\"table\">\n<tr>\n<th width=\"100\">root</th>\n<td><code>true</code>にすることで<span class=\"filename\">.editorconfig</span>より下の階層を対象とするという意味の記述になります。プロジェクトごとに設定すると思うので、基本的には<code>root = true</code>で記述します。</td>\n</tr>\n<tr>\n<th width=\"100\">[*]</th>\n<td>カッコの中に対象のファイルを指定します。<code>*</code>はすべてのファイルという意味で、この後ろに記述するルールがすべてに及ぶと考えてもらえたらと思います。この形式でファイルのパターンごとにいくつでもルールを追加していくことが可能です。</td>\n</tr>\n<tr>\n<th>indent_style</th>\n<td>インデント時のスタイルを指定できます。指定できる値は<code>space</code>か<code>tab</code>かの2つです。</td>\n</tr>\n<tr>\n<th>indent_size</th>\n<td>インデント時のサイズを指定できます。一般的には4な気がしますが、個人的には2が見やすいです。</td>\n</tr>\n<tr>\n<th>end_of_line</th>\n<td>改行コードを指定できます。<code>lf</code>、<code>cr</code>、<code>crlf</code>が選択可能です。WordPress案件の場合は、<code>lf</code>じゃないと怒られます;;</td>\n</tr>\n<tr>\n<th>charset</th>\n<td>文字コードを指定できます。<code>latin1</code>、<code>utf-8</code>、<code>utf-8-bom</code>、<code>utf-16be</code>、<code>utf-16le</code>など選べますが、<code>utf-8</code>が無難な選択かと思います。</td>\n</tr>\n<tr>\n<th>trim_trailing_whitespace</th>\n<td>文末にスペースがあった場合は取り除くかどうかの指定です。文末に意図的にスペースを入れることは（わたしの場合は）ないので、<code>true</code>にして保存と同時に取り除いてもらっています。</td>\n</tr>\n<tr>\n<th>insert_final_newline</th>\n<td>最終行に改行を入れるかどうかの指定です。<code>ture</code>にすると保存時に勝手に最終行を改行してくれます。WordPressでは「最終行に改行しろ！」って怒られるので、わたしは<code>true</code>にしています。</td>\n</tr>\n</table>\n<h3><span id=\"i\">実際の動き</span></h3>\n<p>実際にどんな感じの動きになるか見てみましょう！</p>\n<p><span class=\"folder\">test</span>を作って、その中に<span class=\"filename\">.editorconfig</span>を以下のように作ってみました。<span class=\"filename\">text.txt</span>ファイルを保存したときの動きがどうなるか見てみます。</p>\n<p>ちょっとだけ分かりやすくなるように以下のような設定にしています。<span class=\"key\">tab</span>を押した時に10個のスペースの扱いとなって、改行コードは「crlf」。保存時は文末のスペースが取り除かれ、行末が改行されていなかったら改行されるというルールです。</p>\n<pre><span class=\"filename\">.editorconfig</span><span class=\"code-copy\" data-clipboard-target=\"#code-1\">コピー</span><code id=\"code-1\" class=\"txt\">root = true\r\n\r\n[*]\r\nindent_style = space\r\nindent_size = 10\r\nend_of_line = crlf\r\ncharset = utf-8\r\ntrim_trailing_whitespace = true\r\ninsert_final_newline = true\r\n</code></pre>\n<p>タブ入力して文末に無駄にスペース打って、保存してみました。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/02/editorconfig.gif\" alt=\"\" class=\"alignnone size-full wp-image-13444\" /></p>\n<p>地味ですが、最終行もちゃんと改行れていますね。</p>\n<p>こんな感じにEditorConfigを使うことで、最低限のコーディングルールを担保することができるようになります！</p>\n<h2><span id=\"EditorConfig-3\">EditorConfigの活用パターン</span></h2>\n<p>EditorConfigをどういうケースで使うべきかをまとめました。それぞれの立場によって、使えそうだなと感じたら導入して試してみてください！</p>\n<h3><span id=\"i-2\">複数人でコーディングする時</span></h3>\n<p><strong class=\"marker\">EditorConfigを使う王道としては、複数人でコーディングするとき</strong>だと思います。人によってテキストエディタの環境は違いまし、改行の設定も各人バラバラのはずです。</p>\n<p>そんなバラバラな状況で自由に作ってしまうと、改行コードも文字コードもタブ数もバラバラな集合体が出来上がってしまいます。</p>\n<p><strong class=\"marker\">共通の<span class=\"filename\">.editorconfig</span>を使うことで、最低限のルールを強制的に全員のエディタ環境で適応させることが可能</strong>です。</p>\n<h3><span id=\"i-3\">コーディングを外注する時</span></h3>\n<p><span class=\"filename\">.editorconfig</span>を使えば、誰がどんなテキストエディタを使っていようとも、今回紹介したレベル感でのルールは担保させることができます。</p>\n<p>例えば、「タブは〇〇で改行コードは〇〇で・・・」といったルールが決まっているのであれば、EditorConfigを使う前提で<span class=\"filename\">.editorconfig</span>ファイルを1つ渡してもらえれば、何も意識しなくても全ての人が対応することが可能です。</p>\n<p><strong class=\"marker\">ドキュメントを渡されて各個人が設定するよりもミスが起こりにくい</strong>のではないでしょうか。</p>\n<p>わたしが誰かにコーディングを依頼するなら、<span class=\"filename\">.editorconfig</span>をあらかじめ用意して、渡すと思います。</p>\n<p>めっちゃくちゃ簡単な仕組みなので、こういうのは積極的に使っていきたいなと思います。</p>\n<h3><span id=\"i-4\">ルールが決まっている案件を対応する時</span></h3>\n<p>最後は個人で使うパターンです。わたしはWordPressをメインにお仕事させていただいてますが、WordPressには<a href=\"https://wpdocs.osdn.jp/WordPress_%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E5%9F%BA%E6%BA%96\" rel=\"noopener\" target=\"_blank\">コーディング規約</a>があります。</p>\n<p>厳密に考えすぎる必要はないと思いますが、なんとなく守っていたほうが気持ちいですし、たぶん知っている人がコードを見ると「あ、こいつ分かってるな」って思ってもらえる気がします。</p>\n<p><strong class=\"marker\">WordPressのコーディング規約はEditorConfigに改行コードのルールとか書いておくだけで守れる部分も多い</strong>の、個人的には使わない理由がないと思っています。</p>\n<h2><span id=\"i-5\">おわり</span></h2><div class=\"matome\"><div class=\"matome-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"></div><div class=\"matome-twitter\"><a href=\"https://twitter.com/haniwa008?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\" data-show-screen-name=\"false\" data-size=\"large\" data-lang=\"ja\" data-show-count=\"true\">Follow @haniwa008</a><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></div></div><!-- /matome -->\n<p>EditorConfigの使い方と、使い所の紹介でした。EditorConfigを使うことで、文字コードや改行コードは何も考えなくても担保されます。</p>\n<p>複数人で最も力を発揮するツールだと思いますが、個人でもめっちゃ使えます。<strong class=\"marker\">とりあえずで設置してくことによる安心感は半端ない</strong>です。</p>\n<p>文字コードとか改行コードのチェックまではやっていられないので、そいうった基本的な決まりごとは、EditorConfigに任せちゃいましょう！</p>\n","date":"February 09, 2019","categories":[{"name":"環境","slug":"setting"}],"tags":null,"author":{"name":"はにわまん","slug":"haniwaman"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"33267628-5066-539f-bd8c-2749bed4f304"}}}