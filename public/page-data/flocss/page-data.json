{"componentChunkName":"component---src-templates-post-js","path":"/flocss/","result":{"data":{"wordpressPost":{"id":"e9cabd1c-9d28-5dc2-b130-a5ab4c5f42d8","title":"FLOCSSを使って破綻しにくいCSS設計を！","slug":"flocss","content":"<p>CSS設計をしっかり行うことで破綻のしにくく再利用しやすい、保守性の高いCSSを書くことができるようになります。CSS設計の手法は有名なものがいくつかあるのですが、自分が（今のところ）好きなのはFLOCSSです。<br />\n→ <a href=\"https://github.com/hiloki/flocss\" rel=\"noopener\" target=\"_blank\">FLOCSSの公式ドキュメント</a></p>\n<p>この記事では、FLOCSSの基本的な考え方と自分の解釈の仕方について紹介していけたらと思います。</p>\n<div id=\"toc_container\" class=\"no_bullets\"><p class=\"toc_title\">目次</p><ul class=\"toc_list\"><li><a href=\"#FLOCSS\"><span class=\"toc_number toc_depth_1\">1</span> FLOCSSとは？</a></li><li><a href=\"#FLOCSS-2\"><span class=\"toc_number toc_depth_1\">2</span> FLOCSSの書き方</a></li><li><a href=\"#FLOCSS-3\"><span class=\"toc_number toc_depth_1\">3</span> FLOCSSの命名規則（ネーミングルール）</a><ul><li><a href=\"#BEM\"><span class=\"toc_number toc_depth_2\">3.1</span> BEMがベース</a></li><li><a href=\"#i\"><span class=\"toc_number toc_depth_2\">3.2</span> プレフィックス（接頭辞）をつける</a></li><li><a href=\"#i-2\"><span class=\"toc_number toc_depth_2\">3.3</span> 状態をもたせる場合</a></li></ul></li><li><a href=\"#i-3\"><span class=\"toc_number toc_depth_1\">4</span> 読み込む順番</a></li><li><a href=\"#FLOCSSQ_A\"><span class=\"toc_number toc_depth_1\">5</span> FLOCSSに関する（勝手に）Q &amp; A</a><ul><li><a href=\"#Layout\"><span class=\"toc_number toc_depth_2\">5.1</span> 「Layout」っている？</a></li><li><a href=\"#ComponentProject8230\"><span class=\"toc_number toc_depth_2\">5.2</span> 「Component」か「Project」にするか迷う&#8230;</a></li><li><a href=\"#mixinfunction\"><span class=\"toc_number toc_depth_2\">5.3</span> mixinやfunctionや定数はどこ？</a></li><li><a href=\"#idOK\"><span class=\"toc_number toc_depth_2\">5.4</span> idは使ってOK？</a></li><li><a href=\"#Component\"><span class=\"toc_number toc_depth_2\">5.5</span> 「Component」を上書きしてもいい？</a></li></ul></li><li><a href=\"#FLOCSS8230\"><span class=\"toc_number toc_depth_1\">6</span> FLOCSSの拡張（勝手に&#8230;）</a><ul><li><a href=\"#i-4\"><span class=\"toc_number toc_depth_2\">6.1</span> 設定部分は分ける</a></li><li><a href=\"#JavaScriptjs\"><span class=\"toc_number toc_depth_2\">6.2</span> JavaScriptと関わる部分は.js-のプレフィックスを付与</a></li><li><a href=\"#a-id\"><span class=\"toc_number toc_depth_2\">6.3</span> サイト内リンクの受け取りは#a-プレフィックスのid</a></li><li><a href=\"#CSSExternal\"><span class=\"toc_number toc_depth_2\">6.4</span> 外部ライブラリのCSSを上書きする「External」</a></li></ul></li><li><a href=\"#FLOCSS0\"><span class=\"toc_number toc_depth_1\">7</span> FLOCSSベースで0から書いてみるのが一番理解が進む</a></li><li><a href=\"#i-5\"><span class=\"toc_number toc_depth_1\">8</span> おわり</a></li></ul></div>\n<h2><span id=\"FLOCSS\">FLOCSSとは？</span></h2>\n<p>FLOCSSは、株式会社サイバーエージェントのエンジニアであるHiroki Taniさんが提唱したCSS設計手法で、日本人が作成していてドキュメントが日本語ということで、日本での利用頻度が高まっていると思われる（実際の数字は知らない&#8230;）CSS設計になります。</p>\n<p>ドキュメントはGithubの<span class=\"filename\">README.md</span>がすべてです。<br />\n→ <a href=\"https://github.com/hiloki/flocss\" rel=\"noopener\" target=\"_blank\">FLOCSSの公式ドキュメント</a></p>\n<p>また、CSS設計の本といえばこの本！という「Web制作者のためのCSS設計の教科書」の著者でもあるので、FLOCSS含めて考え方を学ぶには最適な1冊なので、基本についてはこちらを読んでみてください。</p>\n<div class=\"cstmreba\">\n<div class=\"booklink-box\">\n<div class=\"booklink-image\"><a href=\"https://www.amazon.co.jp/exec/obidos/asin/4844336355/haniwaman-22/\" target=\"_blank\"  rel=\"noopener\"><img src=\"//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&#038;ASIN=B00M0ESXUI&#038;Format=_SL160_&#038;ID=AsinImage&#038;MarketPlace=JP&#038;ServiceVersion=20070822&#038;WS=1&#038;tag=haniwaman-22&#038;language=ja_JP\" style=\"border: none;\" /></a></div>\n<div class=\"booklink-info\">\n<div class=\"booklink-name\"><a href=\"https://www.amazon.co.jp/exec/obidos/asin/4844336355/haniwaman-22/\" target=\"_blank\"  rel=\"noopener\">Web制作者のためのCSS設計の教科書</a></p>\n<div class=\"booklink-powered-date\">posted with <a href=\"https://yomereba.com\" rel=\"nofollow noopener\" target=\"_blank\">ヨメレバ</a></div>\n</div>\n<div class=\"booklink-detail\">谷拓樹 インプレス 2014年08月    </div>\n<div class=\"booklink-link2\">\n<div class=\"shoplinkrakuten\"><a href=\"https://hb.afl.rakuten.co.jp/hgc/117225c0.b43e75d1.117225c1.f4ba597a/yomereba_main_20191014111716681?pc=http%3A%2F%2Fbooks.rakuten.co.jp%2Frb%2F12845305%2F%3Fscid%3Daf_ich_link_urltxt%26m%3Dhttp%3A%2F%2Fm.rakuten.co.jp%2Fev%2Fbook%2F\" target=\"_blank\"  rel=\"noopener\">楽天ブックス</a></div>\n<div class=\"shoplinkamazon\"><a href=\"https://www.amazon.co.jp/exec/obidos/asin/4844336355/haniwaman-22/\" target=\"_blank\"  rel=\"noopener\">Amazon</a></div>\n<div class=\"shoplinkkindle\"><a href=\"https://www.amazon.co.jp/gp/search?keywords=Web%E5%88%B6%E4%BD%9C%E8%80%85%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AECSS%E8%A8%AD%E8%A8%88%E3%81%AE%E6%95%99%E7%A7%91%E6%9B%B8&#038;__mk_ja_JP=%83J%83%5E%83J%83i&#038;url=node%3D2275256051&#038;tag=haniwaman-22\" target=\"_blank\"  rel=\"noopener\">Kindle</a></div>\n</p></div>\n</div>\n<div class=\"booklink-footer\"></div>\n</div>\n</div>\n<p>この記事では個人的に大事だと思う部分を自分の解釈と共に紹介していくような感じとなります。</p>\n<h2><span id=\"FLOCSS-2\">FLOCSSの書き方</span></h2>\n<p>FLOCSSは大きくは「Foundation」「Layout」「Object」の3つ。そして。「Object」の中の「Component」「Project」「Utility」から成り立っています。<strong class=\"marker\">この5つの構成を正しく守り順番に読み込むことで破綻しにくいCSSとなる</strong>わけです。</p>\n<p>それぞれに記載する内容をざっくり分けると以下のような感じです。</p>\n<div class=\"box\">\n<ul class=\"check\">\n<li>Foundation ・・・ 要素の初期化やmixinなどのベースを設定。リセットCSSなど。</li>\n<li>Layout ・・・ ヘッダーやフッターなど大枠のレイアウトに関する定義。装飾はなく枠だけを用意しているイメージ。</li>\n<li>Component ・・・ 再利用ができる最小限のパーツ。どの案件でも使える単位でのパーツです。</li>\n<li>Project ・・・ サイト固有のまとまりを定義してパターン化するパーツ。案件に応じて追加していくパーツです。</li>\n<li>Utility ・・・ ちょっとした調整のために使われます。余白の調整や非表示など。</li>\n</ul>\n</div>\n<p>ものすごく唐突ですが、FLOCSSベースで以下のようなCSSテンプレートを以前作成しました。ダンロードすればFLOCSSのファイル構成などはおおよそ分かるのでぜひ見てみてください（名前は仮）<br />\n→ <a href=\"https://haniwaman.com/template/\" rel=\"noopener\" target=\"_blank\">CSSParts｜HTMLコーディングを効率化するCSSテンプレート</a></p>\n<h2><span id=\"FLOCSS-3\">FLOCSSの命名規則（ネーミングルール）</span></h2>\n<p>命名規則とは、簡単にいうとクラス名の付け方ですね。</p>\n<h3><span id=\"BEM\">BEMがベース</span></h3>\n<p>FLOCSSのネーミングルールは、BEMがベースとなっています。ここではBEMについて詳しく説明しませんが、「Block」「Element」「Modifier」の3つの役割を分かりやすく記載する方法です。</p>\n<h3><span id=\"i\">プレフィックス（接頭辞）をつける</span></h3>\n<p>BEMとは異なる<strong class=\"marker\">FLOCSS特有のルールとしては、プレフィックス（接頭辞）をつける</strong>という点になります。「Component」には<code>.c-</code>、「Project」には<code>.p-</code>、「Utility」には<code>.u-</code>をそれぞれ付与します。</p>\n<p>汎用的に使えるボタンの「Component」クラスを作るとすると、例えば<code>.c-button</code>という名前で作成するといった具合ですね。</p>\n<p>プロジェクト単位で使う記事用の汎用クラスを作るなら「Project」で<code>.p-entry-item</code>といった感じになります「Component」と「Project」の切り分ける考え方としては、他の案件でも使えそうなら「Component」、この案件でしか使えそうにないなら「Project」といった考え方でいいかと思います（話がちょっと脱線しました&#8230;）</p>\n<p>「Utility」は、「スマホだけ非表示にする」とか、「10pxの余白」みたいな調整用のクラスを定義する部分で、どういったものを定義するかは<a href=\"https://cccabinet.jpn.org/bootstrap4/utilities/display\" rel=\"noopener\" target=\"_blank\">Bootstrap</a>などのメジャーなCSS設計を参考にしてもらえたらと思うのですが、<code>.u-hidden-sp</code>のような形で定義して、HTML側から非表示にしたい要素に対して適応していくようなイメージです。</p>\n<h3><span id=\"i-2\">状態をもたせる場合</span></h3>\n<p>アクティブになった時、など状態を表す場合は、<code>is-</code>というSMACSSでのCSS設計パターンも用いることが可能です。ボタンがクリックされた時と表したい場合は、<code>.c-button.is-click</code>みたいな書き方も可能になります。</p>\n<h2><span id=\"i-3\">読み込む順番</span></h2>\n<p>「Foundation」「Layout」「Component」「Project」「Utility」の5つから成り立つFLOCSSですが、正しい順番で読み込むことで破綻しにくいCSSとなります。具体的には以下の順番です。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-0\">コピー</span><code id=\"code-0\" class=\"sass\">@import \"foundation/**\";\r\n@import \"layout/**\";\r\n@import \"component/**\";\r\n@import \"project/**\";\r\n@import \"utility/**\";</code></pre>\n<p>上記の書き方は「gulp-sass-glob」を使ってまとめてしまっていますが、foundation内などちゃんと順番を決めて読み込まないとダメなケースもあるので、大枠の順番と、書くフォルダ内の読み込み順番も意識した方がいいかもしれません。</p>\n<h2><span id=\"FLOCSSQ_A\">FLOCSSに関する（勝手に）Q &amp; A</span></h2>\n<p>自分がFLOCSSを触った時に感じた疑問を勝手に自問自答します。</p>\n<h3><span id=\"Layout\">「Layout」っている？</span></h3>\n<p>わたしが使っていて真っ先に感じたのが「Layout」の役割の薄さ&#8230;。「Layout」は、「○%で横並びにする」であったり、「横幅100%にする」みたいな、レイアウトに関する見栄えのCSSだけを持つ部分です。</p>\n<p>「全部「Project」でよくね？」って思ったりしましたが、<strong class=\"marker\">「Component」や「Project」を横幅とかに依存せずにキープする</strong>って考えると、大枠を囲う意味は必要になってくるのかなと思います。</p>\n<p>具体的なコードとしては以下のような感じかと。これなら<code>.p-header</code>の「Project」をレイアウト部分と分離して管理できるようになります。（つまりは、<strong class=\"marker\">別のレイアウトに移動して組み込むことが容易になるということ</strong>です。）</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-1\">コピー</span><code id=\"code-1\" class=\"html\">&lt;header class=\"l-header\"&gt;\r\n\t&lt;div class=\"p-header\"&gt;\r\n\t\t&lt;div class=\"p-header__logo\"&gt;ロゴ&lt;/div&gt;&lt;!-- /p-header-logo --&gt;\r\n\t\t&lt;nav class=\"p-header__nav\"&gt;\r\n\t\t\t&lt;ul class=\"c-navigation\"&gt;\r\n\t\t\t\t&lt;li&gt;&lt;a href=\"\"&gt;&lt;/a&gt;メニュー1&lt;/li&gt;\r\n\t\t\t\t&lt;li&gt;&lt;a href=\"\"&gt;&lt;/a&gt;メニュー2&lt;/li&gt;\r\n\t\t\t\t&lt;li&gt;&lt;a href=\"\"&gt;&lt;/a&gt;メニュー3&lt;/li&gt;\r\n\t\t\t&lt;/ul&gt;&lt;!-- /c-navigation --&gt;\r\n\t\t&lt;/nav&gt;&lt;!-- /p-header__nav --&gt;\r\n\t&lt;/div&gt;&lt;!-- /p-header --&gt;\r\n&lt;/header&gt;&lt;!-- /l-header --&gt;</code></pre>\n<h3><span id=\"ComponentProject8230\">「Component」か「Project」にするか迷う&#8230;</span></h3>\n<p>FLOCSSでたぶん一番質問が多いであろう、このパーツは「Component」か「Project」のどっちにしますか？っていうもの。個人的な解釈としては、<strong class=\"marker\">他の案件でも使えるなら「Component」</strong>。<strong class=\"marker\">この案件でしか使えないなら「Project」</strong>といったイメージです。</p>\n<p>わたしは迷ったら「Project」って感じにしています。</p>\n<h3><span id=\"mixinfunction\"><code>mixin</code>や<code>function</code>や定数はどこ？</span></h3>\n<p>FLOCSSでは、<strong class=\"marker\">定義系は全部「Foundation」で管理</strong>します。「Foundation」では、リセットCSSや、要素に対する標準のCSSも定義したりするので、もしここで変数を使うなら、読み込む順番を意識しないとエラーとなります。<br />\n（もしかしたらFLOCSSでは変数や関数を使わない説もあり&#8230;）</p>\n<ul>\n<li><span class=\"filename\">setting.scss</span></li>\n<li><span class=\"filename\">function.scss</span></li>\n<li><span class=\"filename\">reset.scss</span></li>\n<li><span class=\"filename\">base.scss</span></li>\n</ul>\n<p>みたいな感じで読み込む順番を指定してあげた方が無難です。</p>\n<h3><span id=\"idOK\">idは使ってOK？</span></h3>\n<p><a href=\"https://github.com/hiloki/flocss\" rel=\"noopener\" target=\"_blank\">公式のドキュメント</a>を見ると「Layout」については、<code>#header</code>が例に挙がっています。</p>\n<p>抜粋すると以下のような感じです。</p>\n<blockquote><p>ただしIDセレクタは高い詳細度を持つため、それを懸念する場合には、<code>l-*</code> プレフィックスをつけた命名を採用するか、あるいは <code>[id=\"header\"]</code> のような属性セレクタを用いることを推奨します。</p></blockquote>\n<p>この文章を簡単に言うと、「Layout」は以下のどちらかで記載しましょう、というものです。</p>\n<ul>\n<li><code>.l-header</code></li>\n<li><code>#header</code></li>\n</ul>\n<p>他のプレフィックスの命名規則を考えると<code>.l-</code>の方がしっくりくるのですが、idを使うことに抵抗がなければどちらを利用してもOKということです。</p>\n<h3><span id=\"Component\">「Component」を上書きしてもいい？</span></h3>\n<p>「Component」は単体で成り立つように作るべき（もし見栄えを変えたい場合は「Component」で「Modify」を追加する）ですが、FLOCSSでは<strong class=\"marker\">例外として親の「Project」から上書きはOK</strong>としています。</p>\n<blockquote><p>\n例外として、レイヤー間におけるカスケーディング、例えば、次のようなProjectレイヤーがComponentレイヤーのモジュールを変更することは許容します。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-2\">コピー</span><code id=\"code-2\" class=\"html\">&lt;div class=\"p-profile c-media\"&gt;\r\n  &lt;img src=\"user.jpg\" class=\"c-media__image\"&gt;\r\n  &lt;div class=\"c-media__body\"&gt;...&lt;/div&gt;\r\n&lt;/div&gt;</code></pre>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-3\">コピー</span><code id=\"code-3\" class=\"css\">// Component\r\n.c-media__image {\r\n  float: left;\r\n  margin-left: 10px;\r\n}\r\n\r\n.p-profile &gt; .c-media__image {\r\n  float: right;\r\n  margin-left: 0; // Cancel '.c-media__image' value\r\n  margin-right: 10px;\r\n}</code></pre>\n</blockquote>\n<p>あまりスマートな書き方でないことは確かですが&#8230;</p>\n<h2><span id=\"FLOCSS8230\">FLOCSSの拡張（勝手に&#8230;）</span></h2>\n<p>FLOCSSを触っていて自分なりに「こうしたい！」って部分があるので、自分1人でFLOCSSやる時は微妙に拡張しています。ついでというかおまけ的な感じで共有します。</p>\n<p><strong class=\"marker\">チームで拡張する場合は、全体での共有は必須</strong>です。</p>\n<h3><span id=\"i-4\">設定部分は分ける</span></h3>\n<p>要素の初期化でも変数を使いたいわたしは、「Foundation」内にまとまっている作りがちょっと馴染めませんでした&#8230;。というのもフォルダ内のまとまりは、順不同で読み込んでも機能するのがキレイだなってイメージがあったためです。</p>\n<p>2つのフォルダを追加しています。</p>\n<ul>\n<li>「setting」には、変数の定義と値の設定</li>\n<li>「function」では、<code>mixin</code>と<code>function</code>の定義</li>\n</ul>\n<p>をそれぞれ書いています。</p>\n<p>そして、全体の読み込みは以下のような順番となります。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-4\">コピー</span><code id=\"code-4\" class=\"sass\">@import \"setting/**\";\r\n@import \"function/**\";\r\n@import \"foundation/**\";\r\n@import \"layout/**\";\r\n@import \"component/**\";\r\n@import \"project/**\";\r\n@import \"utility/**\";</code></pre>\n<h3><span id=\"JavaScriptjs\">JavaScriptと関わる部分は<code>.js-</code>のプレフィックスを付与</span></h3>\n<p>CSSのクラスの中でもJavScriptと結びつくクラスがあるかと思います。</p>\n<p>JavScriptと連動しているクラスには<code>.js-btn</code>のような感じでJavaScriptと連動していることを明示してあげると、後の人が誤って消したりするリスクが減るはずです。</p>\n<p><code>.js-</code>には見栄えに関する記述は一切せずに、あくまでもJavaScript側で使うだけの用途となります。</p>\n<h3><span id=\"a-id\">サイト内リンクの受け取りは<code>#a-</code>プレフィックスのid</span></h3>\n<p>ページ内リンクで<code>href=\"#hoge\"</code>といった指定することがあります。この移動先はIDで指定する必要がありますが、ここも分かりやすくするために、<code>id=\"a-hoge\"</code>と記載してあげれば、メージ内リンクの移動先用のIDであることがひと目で分かります。</p>\n<p>先ほどのJavaScriptと同様に、見栄えで使われないIDってことで誰かが誤って消したりするリスクを減らすための記述です。</p>\n<h3><span id=\"CSSExternal\">外部ライブラリのCSSを上書きする「External」</span></h3>\n<p>実際に案件をしていると、外部ライブラリで使われているCSSを上書きしたいケースが出てきます。この外部ライブラリを上書きする用の場所を用意してあげます。</p>\n<p>名前は何でもいいと思いますが「External」と名前を付けていて、これはFLOCSSの一番最後に読み込ませる部分となります。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-5\">コピー</span><code id=\"code-5\" class=\"sass\">@import \"setting/**\";\r\n@import \"function/**\";\r\n@import \"foundation/**\";\r\n@import \"layout/**\";\r\n@import \"component/**\";\r\n@import \"project/**\";\r\n@import \"utility/**\";\r\n@import \"external/**\";</code></pre>\n<p>例えば、<a href=\"https://haniwaman.com/swiper/\">Swiper</a>のクラスであったり、WordPressが独自で吐き出すクラスとかですね。ライブラリごとにファイルを作ってあげると管理しやすくなると思います。</p>\n<h2><span id=\"FLOCSS0\">FLOCSSベースで0から書いてみるのが一番理解が進む</span></h2>\n<p>インターネット上とか、書籍とか、いろんな情報がありますが、一通り読んで表面を理解したら実際の案件や模写コーディング時でもいいですが、<strong class=\"marker\">自分で0からFLOCSSベースで書いてみるのが一番理解が進みます</strong>。</p>\n<p>0から書いてみると、「このケースはどうするんだろう？」って自分が疑問が嫌でも出てきます。それらをインターネットで検索したり解釈を自分なりに推測することで、自分のものとして定着していくので、ぜひ実際にコーディングしてみてください！</p>\n<blockquote class=\"wp-embedded-content\" data-secret=\"z6GHijFqjb\"><p><a href=\"https://haniwaman.com/replication-coding/\">Webサイトをコーディング模写するやり方と使用するツール</a></p></blockquote>\n<p><iframe title=\"&#8220;Webサイトをコーディング模写するやり方と使用するツール&#8221; &#8212; HPcode\" class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" src=\"https://haniwaman.com/replication-coding/embed/#?secret=z6GHijFqjb\" data-secret=\"z6GHijFqjb\" width=\"500\" height=\"282\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe></p>\n<h2><span id=\"i-5\">おわり</span></h2><div class=\"matome\"><div class=\"matome-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"></div><div class=\"matome-twitter\"><a href=\"https://twitter.com/haniwa008?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\" data-show-screen-name=\"false\" data-size=\"large\" data-lang=\"ja\" data-show-count=\"true\">Follow @haniwa008</a><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></div></div><!-- /matome -->\n<p>FLOCSSの基本的な使い方を自分なりの解釈（や勝手な追加）を交えて紹介しました。</p>\n<p>CSS設計は自分1人よりもチームで管理していく案件で効力を発揮します。自分以外の未来の誰かが楽できる設計をして保守し続けられるサイトにしていきましょう！</p>\n<p>FLOCSSが難しいという方は、CSS設計の基本的な考え方が理解できていない可能性があるので、FLOCSSの著者が書いている以下の本をまずは1周読んでみることをおすすめします。</p>\n<div class=\"cstmreba\">\n<div class=\"booklink-box\">\n<div class=\"booklink-image\"><a href=\"https://www.amazon.co.jp/exec/obidos/asin/4844336355/haniwaman-22/\" target=\"_blank\"  rel=\"noopener\"><img src=\"//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&#038;ASIN=B00M0ESXUI&#038;Format=_SL160_&#038;ID=AsinImage&#038;MarketPlace=JP&#038;ServiceVersion=20070822&#038;WS=1&#038;tag=haniwaman-22&#038;language=ja_JP\" style=\"border: none;\" /></a></div>\n<div class=\"booklink-info\">\n<div class=\"booklink-name\"><a href=\"https://www.amazon.co.jp/exec/obidos/asin/4844336355/haniwaman-22/\" target=\"_blank\"  rel=\"noopener\">Web制作者のためのCSS設計の教科書</a></p>\n<div class=\"booklink-powered-date\">posted with <a href=\"https://yomereba.com\" rel=\"nofollow noopener\" target=\"_blank\">ヨメレバ</a></div>\n</div>\n<div class=\"booklink-detail\">谷拓樹 インプレス 2014年08月    </div>\n<div class=\"booklink-link2\">\n<div class=\"shoplinkrakuten\"><a href=\"https://hb.afl.rakuten.co.jp/hgc/117225c0.b43e75d1.117225c1.f4ba597a/yomereba_main_20191014111716681?pc=http%3A%2F%2Fbooks.rakuten.co.jp%2Frb%2F12845305%2F%3Fscid%3Daf_ich_link_urltxt%26m%3Dhttp%3A%2F%2Fm.rakuten.co.jp%2Fev%2Fbook%2F\" target=\"_blank\"  rel=\"noopener\">楽天ブックス</a></div>\n<div class=\"shoplinkamazon\"><a href=\"https://www.amazon.co.jp/exec/obidos/asin/4844336355/haniwaman-22/\" target=\"_blank\"  rel=\"noopener\">Amazon</a></div>\n<div class=\"shoplinkkindle\"><a href=\"https://www.amazon.co.jp/gp/search?keywords=Web%E5%88%B6%E4%BD%9C%E8%80%85%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AECSS%E8%A8%AD%E8%A8%88%E3%81%AE%E6%95%99%E7%A7%91%E6%9B%B8&#038;__mk_ja_JP=%83J%83%5E%83J%83i&#038;url=node%3D2275256051&#038;tag=haniwaman-22\" target=\"_blank\"  rel=\"noopener\">Kindle</a></div>\n</p></div>\n</div>\n<div class=\"booklink-footer\"></div>\n</div>\n</div>\n","date":"November 21, 2019","categories":[{"name":"CSS","slug":"css"}],"tags":null,"author":{"name":"はにわまん","slug":"haniwaman"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"e9cabd1c-9d28-5dc2-b130-a5ab4c5f42d8"}}}