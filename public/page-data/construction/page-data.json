{"componentChunkName":"component---src-templates-post-js","path":"/construction/","result":{"data":{"wordpressPost":{"id":"18144f0e-c4c4-5adc-8893-6ed1392fd544","title":"【具体例あり】構造化データ「microdata」「JSON-LD」「RDFa」の違いとメリット・デメリット","slug":"construction","content":"<p>構造化データには、「microdata」「JSON-LD」「RDFa」の3種類の書き方があります。一般的にはシンタックスと呼ばれていたりしますが、用語が難しいので「書き方」としています。</p>\n<p>Googleが推奨しているのは「JSON-LD」ですが、別にどの書き方を選んでも問題はありません。</p>\n<p>覚え方としては、</p>\n<ul>\n<li>HTMLタグに直接書くのが、microdataとRDFa</li>\n<li>scritpとして1箇所にまとめておくのが、JSON-LD</li>\n</ul>\n<p>といった感じです。</p>\n<p>書き方の違いとメリット、デメリットをまとめました。<br />\n自分が書きやすいと思う方法で書いていけばいいでしょう！</p>\n<div class=\"chat\"><figure class=\"chat-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"><figcaption>はにわまん</figcaption></figure><div class=\"chat-content\">そもそも書き方が1つだけなら迷わずに済むのに...と思うのはわたしだけでしょうか笑</div></div>\n<div id=\"toc_container\" class=\"no_bullets\"><p class=\"toc_title\">目次</p><ul class=\"toc_list\"><li><a href=\"#i\"><span class=\"toc_number toc_depth_1\">1</span> パンくずリストを構造化で表現してみる</a><ul><li><a href=\"#microdata\"><span class=\"toc_number toc_depth_2\">1.1</span> 「microdata」の書き方</a></li><li><a href=\"#RDFa\"><span class=\"toc_number toc_depth_2\">1.2</span> 「RDFa」の書き方</a></li><li><a href=\"#JSON-LD\"><span class=\"toc_number toc_depth_2\">1.3</span> 「JSON-LD」の書き方</a></li></ul></li><li><a href=\"#microdataJSON-LDRDFa\"><span class=\"toc_number toc_depth_1\">2</span> 「microdata」「JSON-LD」「RDFa」どれがいい？</a></li><li><a href=\"#Google\"><span class=\"toc_number toc_depth_1\">3</span> Googleに認知してもらうためのルール</a><ul><li><a href=\"#i-2\"><span class=\"toc_number toc_depth_2\">3.1</span> 構造にエラーがないこと</a></li><li><a href=\"#i-3\"><span class=\"toc_number toc_depth_2\">3.2</span> コンテンツと関連のある構造化データにすること</a></li><li><a href=\"#i-4\"><span class=\"toc_number toc_depth_2\">3.3</span> 最も具体的な型で明示すること</a></li></ul></li><li><a href=\"#i-5\"><span class=\"toc_number toc_depth_1\">4</span> おわり</a></li></ul></div>\n<h2><span id=\"i\">パンくずリストを構造化で表現してみる</span></h2>\n<p>構造化を定義している「schema.org」にもパンくずの参考があるので、こちらをもとにしていきます。<br />\n→ <a href=\"http://schema.org/BreadcrumbList\" rel=\"noopener\" target=\"_blank\">http://schema.org/BreadcrumbList</a></p>\n<p>元となるHTML構文は以下のとおりです。何も構造化データは入っていません。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-0\">コピー</span><code id=\"code-0\" class=\"html\">&lt;ol&gt;\r\n  &lt;li&gt;\r\n    &lt;a href=\"https://example.com/dresses\"&gt;Dresses&lt;/a&gt;\r\n  &lt;/li&gt;\r\n  &lt;li&gt;\r\n    &lt;a href=\"https://example.com/dresses/real\"&gt;Real Dresses&lt;/a&gt;\r\n  &lt;/li&gt;\r\n&lt;/ol&gt;</code></pre>\n<p>パンくずリストは<strong class=\"marker\">検索結果にも使われる</strong>構造化データです。こういう構造化データを「リッチスニペット」と呼ばれたりします。この機にご自身のサイトのパンくずリストを構造化してみましょう！</p>\n<p><a href=\"https://developers.google.com/search/docs/guides/search-gallery\" rel=\"noopener\" target=\"_blank\"><img src=\"https://haniwaman.com/wp-content/uploads/2018/04/construction.png\" alt=\"\" width=\"405\" height=\"177\" class=\"alignnone size-full wp-image-5396\" /></a><br />\n参考：<a href=\"https://developers.google.com/search/docs/guides/search-gallery\" rel=\"noopener\" target=\"_blank\">検索ギャラリー</a></p>\n<h3><span id=\"microdata\">「microdata」の書き方</span></h3>\n<ul>\n<li>itemscope</li>\n<li>itemtype</li>\n<li>itemprop</li>\n</ul>\n<p>の3つのプロパティを使って、構造を定義していきます。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-1\">コピー</span><code id=\"code-1\" class=\"html\">&lt;ol itemscope itemtype=\"http://schema.org/BreadcrumbList\"&gt;\r\n  &lt;li itemprop=\"itemListElement\" itemscope itemtype=\"http://schema.org/ListItem\"&gt;\r\n    &lt;a itemprop=\"item\" href=\"https://example.com/dresses\"&gt;\r\n    &lt;span itemprop=\"name\"&gt;Dresses&lt;/span&gt;&lt;/a&gt;\r\n    &lt;meta itemprop=\"position\" content=\"1\" /&gt;\r\n  &lt;/li&gt;\r\n  &lt;li itemprop=\"itemListElement\" itemscope itemtype=\"http://schema.org/ListItem\"&gt;\r\n    &lt;a itemprop=\"item\" href=\"https://example.com/dresses/real\"&gt;\r\n    &lt;span itemprop=\"name\"&gt;Real Dresses&lt;/span&gt;&lt;/a&gt;\r\n    &lt;meta itemprop=\"position\" content=\"2\" /&gt;\r\n  &lt;/li&gt;\r\n&lt;/ol&gt;</code></pre>\n<h4>microdataのメリット</h4>\n<ul>\n<li><code>itemscope</code>、<code>itemtype</code>、<code>itemprop</code>が、W3Cの提唱するマークアップに含まれる</li>\n<li><code>head</code>タグ要素以外の場所でも、<code>meta</code>や<code>link</code>要素を使って記述できる</li>\n<li>HTML5 の構文に違反しない</li>\n<li>schema.orgはmicrodataをメインとして進めていた ※1</li>\n</ul>\n<p>※1）<a href=\"https://schema.org/docs/faq.html#14\" rel=\"noopener\" target=\"_blank\">https://schema.org/docs/faq.html#14</a></p>\n<h4>microdataのデメリット</h4>\n<ul>\n<li>Googleの推奨ではない（使ってはダメというわけではありません）</li>\n</ul>\n<h3><span id=\"RDFa\">「RDFa」の書き方</span></h3>\n<ul>\n<li>vocab</li>\n<li>typeof</li>\n<li>property</li>\n</ul>\n<p>の3つのプロパティを使って作られています。書き方としてはmicrodataと似ていますね。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-2\">コピー</span><code id=\"code-2\" class=\"html\">&lt;ol vocab=\"http://schema.org/\" typeof=\"BreadcrumbList\"&gt;\r\n  &lt;li property=\"itemListElement\" typeof=\"ListItem\"&gt;\r\n    &lt;a property=\"item\" typeof=\"WebPage\" href=\"https://example.com/dresses\"&gt;\r\n     &lt;span property=\"name\"&gt;Dresses&lt;/span&gt;&lt;/a&gt;\r\n     &lt;meta property=\"position\" content=\"1\"&gt;\r\n  &lt;/li&gt;\r\n  &lt;li property=\"itemListElement\" typeof=\"ListItem\"&gt;\r\n    &lt;a property=\"item\" typeof=\"WebPage\" href=\"https://example.com/dresses/real\"&gt;\r\n    &lt;span property=\"name\"&gt;Real Dresses&lt;/span&gt;&lt;/a&gt;\r\n    &lt;meta property=\"position\" content=\"2\"&gt;\r\n  &lt;/li&gt;\r\n&lt;/ol&gt;</code></pre>\n<h4>RDFaのメリット</h4>\n<ul>\n<li>XMLでも使える</li>\n</ul>\n<h4>RDFaのデメリット</h4>\n<ul>\n<li>Googleの推奨ではない（使ってはダメというわけではありません）</li>\n<li>XHTML1.1やHTML4などを対象としているため形式として古い</li>\n<li>Webサイトで使わている例をほぼ見たことがない（※ わたしの主観）</li>\n</ul>\n<h3><span id=\"JSON-LD\">「JSON-LD」の書き方</span></h3>\n<p><code>script</code>タグを使ってJSON形式で記述する方法です。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-3\">コピー</span><code id=\"code-3\" class=\"html\">&lt;script type=\"application/ld+json\"&gt;\r\n{\r\n \"@context\": \"http://schema.org\",\r\n \"@type\": \"BreadcrumbList\",\r\n \"itemListElement\":\r\n [\r\n  {\r\n   \"@type\": \"ListItem\",\r\n   \"position\": 1,\r\n   \"item\":\r\n   {\r\n    \"@id\": \"https://example.com/dresses\",\r\n    \"name\": \"Dresses\"\r\n    }\r\n  },\r\n  {\r\n   \"@type\": \"ListItem\",\r\n  \"position\": 2,\r\n  \"item\":\r\n   {\r\n     \"@id\": \"https://example.com/dresses/real\",\r\n     \"name\": \"Real Dresses\"\r\n   }\r\n  }\r\n ]\r\n}\r\n&lt;/script&gt;</code></pre>\n<h4>JSON-LDのメリット</h4>\n<ul>\n<li>Googleが推奨している</li>\n<li>JSONなので、各システムでデータを取得・解析しやすい</li>\n<li>CSSなどの影響を受けづらく、既存のWebページに埋め込みやすい</li>\n<li>データが1箇所にまとまる</li>\n</ul>\n<h4>JSON-LDのデメリット</h4>\n<ul>\n<li>scriptとして分離はするが、HTML内には記述する必要がある（外部ファイルにはできない）</li>\n</ul>\n<h2><span id=\"microdataJSON-LDRDFa\">「microdata」「JSON-LD」「RDFa」どれがいい？</span></h2>\n<p>気になるのは「どの記述方法で書けばいいの？」という点ではないでしょうか？</p>\n<p><strong class=\"marker\">どれでもいい</strong>というのが答えではあるのですが、優先順位を付けるとすると、</p>\n<ul>\n<li>1位：JSON-LD</li>\n<li>2位：microdata</li>\n<li>3位：RDFa</li>\n</ul>\n<p>といった感じです。</p>\n<p>SEOやGoogleへの認知を目的に構造化データを入れているのであれば、Google先生から「JSON-LDを推奨する！」って言われたら、もう何も言えません笑</p>\n<p>ただし、「JSON-LDじゃないと読み込みません！」って言ってるわけではないので、好きな方法で書いても問題はありません。<br />\n（数年前は、Googleも「microdataを推奨！」と言ってたわけですし）</p>\n<p>なんの書き方でもいいですが、<strong class=\"marker\">ルールに則って記述しないと認識してくれない可能性があるので注意してください！</strong></p>\n<h2><span id=\"Google\">Googleに認知してもらうためのルール</span></h2>\n<p>構造化データをGoogleはすべて把握していると言われています。</p>\n<p>参考：<a href=\"https://www.suzukikenichi.com/blog/google-recommends-marking-up-as-many-structured-data-as-possible/\" rel=\"noopener\" target=\"_blank\">すべてのschema.orgをGoogleはサポートする、可能な限り多くの構造化データをマークアップするといい</a></p>\n<p>構造化データのためのガイドラインもあり、Googleに認知してもらうためには、Googleのルールにも従う必要があります。<br />\n参考：<a href=\"https://developers.google.com/search/docs/guides/sd-policies\" rel=\"noopener\" target=\"_blank\">構造化データの一般的なガイドライン</a></p>\n<p>※ 日本語訳はありませんが、翻訳ツールなどを使ってご一読ください。</p>\n<p>代表的なルールを列挙します。</p>\n<h3><span id=\"i-2\">構造にエラーがないこと</span></h3>\n<p>構造化データを記述した際は、ちゃんとしたフォーマット、書き方で書かれているかテストしましょう。</p>\n<p>Googleが丁寧に「構造化データテストツール」というツールを出してくれています。<br />\n→ <a href=\"https://search.google.com/structured-data/testing-tool/u/0/\" rel=\"noopener\" target=\"_blank\">構造化データテストツール</a></p>\n<p>テキストのコピペ、URLの入力でチェックできますので、エラーが出ないかチェックするといいでしょう。<br />\n<a href=\"https://search.google.com/structured-data/testing-tool/u/0/\" rel=\"noopener\" target=\"_blank\"><img src=\"https://haniwaman.com/wp-content/uploads/2018/04/construction2-700x391.png\" alt=\"\" width=\"700\" height=\"391\" class=\"alignnone size-medium wp-image-5399\" srcset=\"https://haniwaman.com/wp-content/uploads/2018/04/construction2-700x391.png 700w, https://haniwaman.com/wp-content/uploads/2018/04/construction2-768x429.png 768w, https://haniwaman.com/wp-content/uploads/2018/04/construction2-1200x670.png 1200w, https://haniwaman.com/wp-content/uploads/2018/04/construction2.png 1227w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></a></p>\n<p>特に「必須」のプロパティはなるべく含めるようにしたいところです。</p>\n<h3><span id=\"i-3\">コンテンツと関連のある構造化データにすること</span></h3>\n<p>レシピの構造化データを求人のコンテンツに記述するのは「おかしい」ということは誰もが分かるはずです。</p>\n<p>レシピのコンテンツに対して、ちゃんとレシピを示すための構造化データを使用しないといけないということですね。</p>\n<h3><span id=\"i-4\">最も具体的な型で明示すること</span></h3>\n<p>今回のパンくずの例では、「BreadcrumbList」でなくても、その親要素である「ItemList」でも記述することは可能です。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2018/04/construction3.png\" alt=\"\" width=\"427\" height=\"151\" class=\"alignnone size-full wp-image-5404\" /></p>\n<ul>\n<li>「ItemList」は、リストであること示す</li>\n<li>「BreadcrumbList」は、パンくずリストであることを示す</li>\n</ul>\n<p>パンくずリストもリストであることは変わりないですが、どちらがより正確な情報を伝えているかは明確ですよね。</p>\n<p>構造化データを使う際は、<strong class=\"marker\">最も具体的に表現できる構造化データ</strong>を使うようにしましょう。</p>\n<p>どういった構造化データが使えるかは、schema.orgの「Full Hierarchy」から確認できます。<br />\n→ <a href=\"http://schema.org/docs/full.html\" rel=\"noopener\" target=\"_blank\">http://schema.org/docs/full.html</a></p>\n<h2><span id=\"i-5\">おわり</span></h2><div class=\"matome\"><div class=\"matome-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"></div><div class=\"matome-twitter\"><a href=\"https://twitter.com/haniwa008?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\" data-show-screen-name=\"false\" data-size=\"large\" data-lang=\"ja\" data-show-count=\"true\">Follow @haniwa008</a><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></div></div><!-- /matome -->\n<p>構造化データ「microdata」「JSON-LD」「RDFa」を書き方の違いや、それぞれのメリット、デメリットを紹介しました。</p>\n<p>Googleの推奨は「JSON-LD」ですが、<strong class=\"marker\">どの書き方を選んでも問題はありません！</strong></p>\n<p>ただし、<a href=\"https://developers.google.com/search/docs/guides/sd-policies\" rel=\"noopener\" target=\"_blank\">Googleの構造化ガイドライン</a>や、構造化を定義している<a href=\"http://schema.org/docs/full.html\" rel=\"noopener\" target=\"_blank\">schema.org</a>を読み、「ルールを守っているか」「書き方は合っているか」を確認しながら、Googleに伝わる構造化データを書くようにしましょう。</p>\n","date":"April 18, 2018","categories":[{"name":"HTML","slug":"html"}],"tags":null,"author":{"name":"はにわまん","slug":"haniwaman"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"18144f0e-c4c4-5adc-8893-6ed1392fd544"}}}