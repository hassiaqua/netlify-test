{"componentChunkName":"component---src-templates-post-js","path":"/ejs/","result":{"data":{"wordpressPost":{"id":"bdca2eb5-50bf-56c0-a857-be45eabf40ef","title":"EJSの使い方！静的なHTMLサイトで「共通パーツ」と「変数」を使おう","slug":"ejs","content":"<p>EJS（イージェーエス）はテンプレートエンジン呼ばれるNode.jsのパッケージの１つです。JavaScriptとHTMLを混ぜた感じでHTMLサイトが作れることをイメージしてもらえたらと思います。</p>\n<p>1番のメリットとしては、ヘッダーやフッターなど複数ページにまたがる共通パーツと呼ばれるコードを1つのファイルで管理できることですね。100ページある普通のHTMLサイトなら、ヘッダーの一部分を変更するときに100ファイル分の修正が発生しますが、EJSでヘッダーを１つのファイルで共通に管理すれば1ファイルの修正で済みます。</p>\n<p>静的なHTMLサイトで数十ページを超えるようなサイトをコーディングする場合はぜひ使ってみてください。</p>\n<div class=\"chat\"><figure class=\"chat-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"><figcaption>はにわまん</figcaption></figure><div class=\"chat-content\">WordPressのテンプレートみたいな感覚です。</div></div>\n<div id=\"toc_container\" class=\"no_bullets\"><p class=\"toc_title\">目次</p><ul class=\"toc_list\"><li><a href=\"#EJSGulp\"><span class=\"toc_number toc_depth_1\">1</span> EJSを使うために必要な環境「Gulp」</a><ul><li><a href=\"#Nodejs\"><span class=\"toc_number toc_depth_2\">1.1</span> 必要なNode.jsのパッケージ</a></li></ul></li><li><a href=\"#EJS\"><span class=\"toc_number toc_depth_1\">2</span> EJSの使い方</a><ul><li><a href=\"#EJS-2\"><span class=\"toc_number toc_depth_2\">2.1</span> EJS用のフォルダを用意しておく</a></li><li><a href=\"#ejs\"><span class=\"toc_number toc_depth_2\">2.2</span> 拡張子は「.ejs」</a></li><li><a href=\"#i\"><span class=\"toc_number toc_depth_2\">2.3</span> 共通パーツを読み込む書き方</a></li></ul></li><li><a href=\"#HTMLGulp\"><span class=\"toc_number toc_depth_1\">3</span> HTMLファイルとして出力させるGulp</a><ul><li><a href=\"#i-2\"><span class=\"toc_number toc_depth_2\">3.1</span> 下層ページを作った時の動きも確認</a></li><li><a href=\"#i-3\"><span class=\"toc_number toc_depth_2\">3.2</span> 冒頭の余白を削除する</a></li></ul></li><li><a href=\"#i-4\"><span class=\"toc_number toc_depth_1\">4</span> おわり</a></li></ul></div>\n<h2><span id=\"EJSGulp\">EJSを使うために必要な環境「Gulp」</span></h2>\n<p>今回の記事の通りにEJSを動かすための前提の条件としては<strong class=\"marker\">Gulpが動かせる状態であること</strong>です。</p>\n<p>Gulpが使えない方は、先に使える状態にしておいてくだくさい。</p>\n<p>Windowsでの導入方法については下記を参考にしていただければと思います。</p>\n<blockquote class=\"wp-embedded-content\" data-secret=\"tSI0aXVNml\"><p><a href=\"https://haniwaman.com/gulp-windows/\">5分で終わる！WindowsでGulpを使えるようになるまでの手順</a></p></blockquote>\n<p><iframe title=\"&#8220;5分で終わる！WindowsでGulpを使えるようになるまでの手順&#8221; &#8212; HPcode\" class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" src=\"https://haniwaman.com/gulp-windows/embed/#?secret=tSI0aXVNml\" data-secret=\"tSI0aXVNml\" width=\"500\" height=\"282\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe></p>\n<h3><span id=\"Nodejs\">必要なNode.jsのパッケージ</span></h3>\n<p>下記の3つのNode.jpのパッケージが必要になります。</p>\n<ul>\n<li>gulp</li>\n<li>gulp-ejs</li>\n<li>gulp-rename</li>\n</ul>\n<p>それぞれ<code>npm</code>コマンドでインストールするようにしてください。<br />\n※ 階層はプロジェクトフォルダ（gulpfile.jsがあるフォルダ）へ移動した状態でインストールする必要があります。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-0\">コピー</span><code id=\"code-0\" class=\"cli nohighlight hljs\">npm install --save-dev gulp\r\n</code></pre>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-1\">コピー</span><code id=\"code-1\" class=\"cli nohighlight hljs\">npm install --save-dev gulp-ejs\r\n</code></pre>\n<p><code>gulp-rename</code>は、HTMLファイルとして出力させるために必要。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-2\">コピー</span><code id=\"code-2\" class=\"cli nohighlight hljs\">npm install --save-dev gulp-rename\r\n</code></pre>\n<p><code>gulp-replace</code>は、不要な余白を削除するために使いました（必須ではない）</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-3\">コピー</span><code id=\"code-3\" class=\"cli nohighlight hljs\">npm install --save-dev gulp-replace\r\n</code></pre>\n<h2><span id=\"EJS\">EJSの使い方</span></h2>\n<p>ファイルの構成としては以下のような感じで作っていきます。真似して作ってもらえると同様のコードで動かせるはずです！<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/03/ejs.png\" alt=\"\" class=\"alignnone size-full wp-image-14418\" /></p>\n<h3><span id=\"EJS-2\">EJS用のフォルダを用意しておく</span></h3>\n<p>EJSはテンプレートなので、それ単体はWebサイトとして認識されません。あくまでも補助的な機能なので、フォルダの中でも邪魔にならないように専用のフォルダを作ってまとめて格納しておくとスッキリするかと思います。</p>\n<p>上の画像で言うと、<span class=\"folder\">ejs</span>フォルダですね。</p>\n<h3><span id=\"ejs\">拡張子は「.ejs」</span></h3>\n<p>EJSの拡張子は「.ejs」です。基本的にはHTMLファイルと同じような記載をしていきます。<strong>一部だけ</strong>EJS特有のタグで囲んでJavaScriptのような記述ができるってイメージですね。</p>\n<h3><span id=\"i\">共通パーツを読み込む書き方</span></h3>\n<p>HTMLファイルと異なるのは変数を使う部分と共通パーツを読み込む部分です。例えば、<span class=\"filename\">index.ejs</span>では以下のように<code>include</code>の記載をしています。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-4\">コピー</span><code id=\"code-4\" class=\"ejs\">&lt;% var title = 'トップページのタイトルタグ'; %&gt;\r\n&lt;% var description = 'トップページのディスクリプション'; %&gt;\r\n&lt;% var path = '.'; %&gt;\r\n&lt;% include common/_header %&gt;\r\n\r\n&lt;!-- content --&gt;\r\n&lt;div id=\"content\"&gt;\r\n&lt;div class=\"inner\"&gt;\r\n\r\n&lt;p&gt;トップページに出力すること&lt;/p&gt;\r\n\r\n&lt;/div&gt;&lt;!-- /inner --&gt;\r\n&lt;/div&gt;&lt;!-- /content --&gt;\r\n\r\n&lt;% include common/_footer %&gt;</code></pre>\n<p><code>&lt;% include common/_header %&gt;</code>と<code>&lt;% include common/_footer %&gt;</code>の部分が別のファイルを読み込んでいる部分です。</p>\n<p>そして、<code>var title</code>や<code>var description</code>は変数で表現している部分で、共通パーツである<span class=\"filename\">_header.ejs</span>内の<code>&lt;%- title %&gt;</code>と<code>&lt;%- description %&gt;</code>に反映されることになります。</p>\n<pre><span class=\"filename\">common/_header.ejs</span><span class=\"code-copy\" data-clipboard-target=\"#code-5\">コピー</span><code id=\"code-5\" class=\"ejs\">&lt;!DOCTYPE html&gt;\r\n&lt;html lang=\"ja\"&gt;\r\n&lt;head&gt;\r\n&lt;meta charset=\"UTF-8\"&gt;\r\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\r\n&lt;meta name=\"format-detection\" content=\"telephone=no\"&gt;\r\n&lt;link rel=\"stylesheet\" href=\"&lt;%= path %&gt;/css/style.css\"&gt;\r\n&lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;\r\n&lt;meta name=\"description\" content=\"&lt;%= description %&gt;\"&gt;\r\n&lt;/head&gt;\r\n\r\n\r\n&lt;body&gt;\r\n\r\n&lt;!-- 以下ちょい端折り... --&gt;\r\n</code></pre>\n<h2><span id=\"HTMLGulp\">HTMLファイルとして出力させるGulp</span></h2>\n<p>ejsのままだとWebサイトとして機能しないので<strong class=\"marker\">HTMLファイルに変換してあげる</strong>必要があります。Node.jsでインストールしたパッケージを読み込んであげて、タスクを登録してあげましょう。</p>\n<p>以下のコードを簡単に解説すると、「<span class=\"folder\">ejs</span>フォルダ内の.ejs拡張子のファイルを対象にHTMLファイルとして出力してください」という記述になります。</p>\n<p>ただし共通パーツの_header.ejsとかは無視してほしいので、「アンダーバーから始まる.ejs拡張子は除く」という指定をしています。</p>\n<pre><span class=\"filename\">gulpfile.js</span><span class=\"code-copy\" data-clipboard-target=\"#code-6\">コピー</span><code id=\"code-6\" class=\"js\">var gulp = require(\"gulp\");\r\nvar rename = require(\"gulp-rename\");\r\nvar ejs = require(\"gulp-ejs\");\r\nvar replace = require(\"gulp-replace\");\r\n\r\ngulp.task(\"ejs\", (done) =&gt; {\r\n\tgulp\r\n\t\t.src([\"ejs/**/*.ejs\", \"!\" + \"ejs/**/_*.ejs\"])\r\n\t\t.pipe(ejs({}, {}, {ext:'.html'}))\r\n\t\t.pipe(rename({ extname: \".html\" }))\r\n\t\t.pipe(gulp.dest(\"./\"));\r\n\tdone();\r\n});</code></pre>\n<p><code>src</code>の中のパスはご自身の環境に応じて変更してあげてください。わたし同様の階層で作っている方は特に問題ないかと思います。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/03/ejs.png\" alt=\"\" class=\"alignnone size-full wp-image-14418\" /></p>\n<p>準備ができたら実行してあげます。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-7\">コピー</span><code id=\"code-7\" class=\"cli nohighlight hljs\">gulp ejs\r\n</code></pre>\n<p>すると、<span class=\"filename\">index.html</span>ファイルが作られて、さらに指定した変数もちゃんと文字に変換されていることが分かります！<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/03/ejs2-700x329.png\" alt=\"\" class=\"alignnone size-medium wp-image-14420\" srcset=\"https://haniwaman.com/wp-content/uploads/2019/03/ejs2-700x329.png 700w, https://haniwaman.com/wp-content/uploads/2019/03/ejs2-768x361.png 768w, https://haniwaman.com/wp-content/uploads/2019/03/ejs2-1200x563.png 1200w, https://haniwaman.com/wp-content/uploads/2019/03/ejs2.png 1242w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<h3><span id=\"i-2\">下層ページを作った時の動きも確認</span></h3>\n<p>今は<span class=\"filename\">index.ejs</span>だけで動かしてみましたが、これを複数の下層ページを作った状態で動かしてみましょう。複数ファイルを管理するときにこそEJSは力を発揮します。</p>\n<p>aboutとcontactの下層ページを追加してみました。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/03/ejs3.png\" alt=\"\" class=\"alignnone size-full wp-image-14421\" /></p>\n<p>下層ページを作るときに注意が必要なのは、<strong class=\"marker\">共通パーツへのパスが変わること</strong>です。aboutを例にすると、以下のように「<span class=\"filename\">../common/_header</span>」という風に、1つ上の階層へのパスを指定してあげる必要があります。</p>\n<p>また、変数の値も変更しているので、この辺の値も反映していけたらと思います。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-8\">コピー</span><code id=\"code-8\" class=\"ejs\">&lt;% var title = 'aboutのタイトルタグ'; %&gt;\r\n&lt;% var description = 'aboutのディスクリプション'; %&gt;\r\n&lt;% var path = '..'; %&gt;\r\n&lt;% include ../common/_header %&gt;\r\n\r\n&lt;!-- /content --&gt;\r\n&lt;div id=\"content\"&gt;\r\n&lt;div class=\"inner\"&gt;\r\n\r\n&lt;p&gt;ここはaboutページです&lt;/p&gt;\r\n\r\n&lt;/div&gt;&lt;!-- /inner --&gt;\r\n&lt;/div&gt;&lt;!-- /content --&gt;\r\n\r\n&lt;% include ../common/_footer %&gt;</code></pre>\n<p>gulpを実行してあげて&#8230;</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-7\">コピー</span><code id=\"code-7\" class=\"cli nohighlight hljs\">gulp ejs\r\n</code></pre>\n<p>このように、全部の.ejsファイルが階層を維持したまま作られて、かつ変数の値もそれぞれタイトルタグに反映されています。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/03/ejs4-700x333.png\" alt=\"\" class=\"alignnone size-medium wp-image-14422\" srcset=\"https://haniwaman.com/wp-content/uploads/2019/03/ejs4-700x333.png 700w, https://haniwaman.com/wp-content/uploads/2019/03/ejs4-768x365.png 768w, https://haniwaman.com/wp-content/uploads/2019/03/ejs4.png 1103w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p>ヘッダーやフッターといった共通部分を1ファイルで管理できるので、それぞれのコンテンツ部分に集中できで、かつファイルの管理もめちゃくちゃ楽になるのがEJSです。</p>\n<h3><span id=\"i-3\">冒頭の余白を削除する</span></h3>\n<p>画像では隠してきましたが、、、このままだと変数の行数分だけ冒頭に余白が出来た状態で出力されてしまいます。対処法として、無理矢理感はありますが、<code>&lt;!DOCTYPE</code>までの余白を正規表現で置換するという処理を加えてあげます。</p>\n<p>Gulpで置換するために<code>gulp-replace</code>のパッケージを加えてあげてください。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-3\">コピー</span><code id=\"code-3\" class=\"cli nohighlight hljs\">npm install --save-dev gulp-replace\r\n</code></pre>\n<p>出力するまえに、<code>.pipe(replace(/[\\s\\S]*?(&lt;!DOCTYPE)/, \"$1\"))</code>といった具合に置換してあげましょう。[\\s\\S]が改行も含めてすべての文字を表す正規表現です（わたしはめっちゃ使ってます）</p>\n<p>冒頭の<code>&lt;!DOCTYPE</code>までの空白を全部取り除いてくれます。今までのGulpのコードとまとめると以下のような感じです。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-11\">コピー</span><code id=\"code-11\" class=\"js\">gulp.task(\"ejs\", done =&gt; {\r\n\tgulp\r\n\t\t.src([\"ejs/**/*.ejs\", \"!ejs/**/_*.ejs\"])\r\n\t\t.pipe(ejs({}, {}, { ext: \".html\" }))\r\n\t\t.pipe(rename({ extname: \".html\" }))\r\n\t\t.pipe(replace(/[\\s\\S]*?(&lt;!DOCTYPE)/, \"$1\"))\r\n\t\t.pipe(gulp.dest(\"./\"));\r\n\tdone();\r\n});</code></pre>\n<h2><span id=\"i-4\">おわり</span></h2><div class=\"matome\"><div class=\"matome-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"></div><div class=\"matome-twitter\"><a href=\"https://twitter.com/haniwa008?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\" data-show-screen-name=\"false\" data-size=\"large\" data-lang=\"ja\" data-show-count=\"true\">Follow @haniwa008</a><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></div></div><!-- /matome -->\n<p>EJSの基本的な使い方でした。ヘッダーやフッターを共通パーツとして使えて、値を変数管理できるのがめちゃくちゃ楽です。</p>\n<p>Gulpの扱いに慣れていれば環境構築することは難しくはないと思うので、ぜひHTMLサイトを制作する際に活用してみほしいと思います。特にページ数の多いHTMLサイト案件で力を発揮するかと！</p>\n","date":"March 27, 2019","categories":[{"name":"環境","slug":"setting"}],"tags":null,"author":{"name":"はにわまん","slug":"haniwaman"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"bdca2eb5-50bf-56c0-a857-be45eabf40ef"}}}