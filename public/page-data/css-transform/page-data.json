{"componentChunkName":"component---src-templates-post-js","path":"/css-transform/","result":{"data":{"wordpressPost":{"id":"5c145eef-824f-51c7-9fa9-b94e1dd6d596","title":"マテリアルデザインを設計する上で欠かせないCSS「transform」について解説","slug":"css-transform","content":"<p><code>transform</code>プロパティでは、以下の変形を実現できます。</p>\n<ul>\n<li>移動</li>\n<li>縮尺</li>\n<li>回転</li>\n<li>傾斜</li>\n<li>遠近効果</li>\n</ul>\n<p><code>transform</code>自体は要素を変形させるだけの役割ですが、<br />\n<a href=\"https://haniwaman.com/css-transition/\">transition</a>などと組み合わせることで、マテリアルデザインで表現されているような、繋がりのあるアニメーションを実現することができたりします。</p>\n<p>実際の変化を見ながら、<code>transform</code>の変形について見ていきましょう。</p>\n<div class=\"chat\"><figure class=\"chat-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"><figcaption>はにわまん</figcaption></figure><div class=\"chat-content\">transformが操れるとサイトの表現の幅がグッと広がります！</div></div>\n<div id=\"toc_container\" class=\"no_bullets\"><p class=\"toc_title\">目次</p><ul class=\"toc_list\"><li><a href=\"#i\"><span class=\"toc_number toc_depth_1\">1</span> 初期値</a></li><li><a href=\"#i-2\"><span class=\"toc_number toc_depth_1\">2</span> 移動</a></li><li><a href=\"#i-3\"><span class=\"toc_number toc_depth_1\">3</span> 縮尺</a></li><li><a href=\"#i-4\"><span class=\"toc_number toc_depth_1\">4</span> 回転</a></li><li><a href=\"#i-5\"><span class=\"toc_number toc_depth_1\">5</span> 傾斜</a></li><li><a href=\"#i-6\"><span class=\"toc_number toc_depth_1\">6</span> 遠近効果</a></li><li><a href=\"#i-7\"><span class=\"toc_number toc_depth_1\">7</span> おわり</a></li></ul></div>\n<h2><span id=\"i\">初期値</span></h2>\n<p>初期値は<code>none</code>です。つまり何も変形させません。</p>\n<p><code>transform: none;</code></p>\n<h2><span id=\"i-2\">移動</span></h2>\n<p>もともと配置される場所から「どれだけ移動させるか」を指定できます。</p>\n<p>指定の仕方は以下の通り。</p>\n<ul>\n<li>translate(X方向の移動距離, Y方向の移動距離)</li>\n<li>translateX(X方向の移動距離)</li>\n<li>translateY(Y方向の移動距離)</li>\n<li>translateZ(Z方向の移動距離)</li>\n<li>translate3d(X方向の移動距離, Y方向の移動距離, Z方向の移動距離)</li>\n</ul>\n<p>実際の例を見てみましょう。(破線は元々表示されるはずだった場所)</p>\n<p><code>transform: translate(20px, 20px);</code>でx方向に20px、y方向に20px動かしています。</p>\n<div class=\"transform-wrap\">\n<div class=\"transform transform-base\"></div>\n<div class=\"transform transform-translate\"></div>\n</div>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-0\">コピー</span><code id=\"code-0\" class=\"html\">&lt;div class=\"transform-translate\"&gt;&lt;/div&gt;\r\n</code></pre>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-1\">コピー</span><code id=\"code-1\" class=\"css\">.transform-translate {\r\n\twidth: 100px;\r\n\theight: 100px;\r\n\tbackground: #00BCD4;\r\n\ttransform: translate(20px, 20px);\r\n}</code></pre>\n<h2><span id=\"i-3\">縮尺</span></h2>\n<p>縮尺では、要素の拡大と縮小を指定できます。</p>\n<p>指定の仕方は以下の通り。</p>\n<ul>\n<li>scale(X方向の縮尺比率, Y方向の縮尺比率)</li>\n<li>scaleX(X方向の縮尺比率)</li>\n<li>scaleY(Y方向の縮尺比率)</li>\n<li>scaleZ(Z方向の縮尺比率)</li>\n<li>scale3d(X方向の縮尺比率, Y方向の縮尺比率, Z方向の縮尺比率)</li>\n</ul>\n<p>実際の例を見てみましょう。(破線は元々表示されるはずだった大きさ)</p>\n<p><code>transform: scale(.5, .5);</code>で、縦、横ともに0.5倍しています。</p>\n<div class=\"transform-wrap\">\n<div class=\"transform transform-base\"></div>\n<div class=\"transform transform-scale\"></div>\n</div>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-2\">コピー</span><code id=\"code-2\" class=\"html\">&lt;div class=\"transform-scale\"&gt;&lt;/div&gt;\r\n</code></pre>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-3\">コピー</span><code id=\"code-3\" class=\"css\">.transform-scale {\r\n\twidth: 100px;\r\n\theight: 100px;\r\n\tbackground: #00BCD4;\r\n\ttransform: scale(.5, .5);\r\n}</code></pre>\n<h2><span id=\"i-4\">回転</span></h2>\n<p>要素を回転させることができる値</p>\n<p>指定の仕方は以下の通り。</p>\n<ul>\n<li>rotate(回転角度)</li>\n<li>rotate3d(数値, 数値, 数値, 回転角度)</li>\n<li>rotateX(X軸を軸とする回転角度)</li>\n<li>rotateY(Y軸を軸とする回転角度)</li>\n<li>rotateZ(Z軸を軸とする回転角度)</li>\n</ul>\n<p>実際の例を見てみましょう。(破線は元々表示されるはずだった位置)</p>\n<p><code>transform: rotate(45deg);</code>のように、degという単位で指定します。「度」と置き換えると分かりやすいと思います。時計回りに回転します。</p>\n<div class=\"transform-wrap\">\n<div class=\"transform transform-base\"></div>\n<div class=\"transform transform-rotate\"></div>\n</div>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-4\">コピー</span><code id=\"code-4\" class=\"html\">&lt;div class=\"transform-rotate\"&gt;&lt;/div&gt;\r\n</code></pre>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-5\">コピー</span><code id=\"code-5\" class=\"css\">.transform-rotate {\r\n\twidth: 100px;\r\n\theight: 100px;\r\n\tbackground: #00BCD4;\r\n\ttransform: rotate(45deg);\r\n}</code></pre>\n<p>コインのようにくるくる回転させるアニメーションに使えたりします。</p>\n<h2><span id=\"i-5\">傾斜</span></h2>\n<p>並行四辺形を表現する際に使用する<code>transform</code>の値です。</p>\n<p>指定の仕方は以下の通り。</p>\n<ul>\n<li>skew(X軸の傾斜角度, Y軸の傾斜角度)</li>\n<li>skewX(X軸の傾斜角度)</li>\n<li>skewY(Y軸の傾斜角度)</li>\n</ul>\n<p>実際の例を見てみましょう。(破線は元々表示されるはずだった位置)</p>\n<p><code>transform: skew(20deg,20deg);</code>で、X軸を時計回りに20度、Y軸を時計回りに20度、傾けた形のオブジェクトが出来上がります。</p>\n<div class=\"transform-wrap\">\n<div class=\"transform transform-base\"></div>\n<div class=\"transform transform-skew\"></div>\n</div>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-6\">コピー</span><code id=\"code-6\" class=\"html\">&lt;div class=\"transform-skew\"&gt;&lt;/div&gt;\r\n</code></pre>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-7\">コピー</span><code id=\"code-7\" class=\"css\">.transform-skew {\r\n\twidth: 100px;\r\n\theight: 100px;\r\n\tbackground: #00BCD4;\r\n\ttransform: skew(20deg,20deg);\r\n}</code></pre>\n<h2><span id=\"i-6\">遠近効果</span></h2>\n<p>基本的には<code>rotate</code>と組み合わせて使うものになります。遠くのものは小さく見えて近くのものは大きく見えるという効果です。</p>\n<div class=\"transform-wrap\">\n<div class=\"transform transform-base\"></div>\n<div class=\"transform transform-perspective\"></div>\n</div>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-8\">コピー</span><code id=\"code-8\" class=\"html\">&lt;div class=\"transform-perspective\"&gt;&lt;/div&gt;\r\n</code></pre>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-9\">コピー</span><code id=\"code-9\" class=\"css\">.transform-perspective {\r\n\twidth: 100px;\r\n\theight: 100px;\r\n\tbackground: #00BCD4;\r\n\ttransform: perspective(100px) rotateY(20deg);\r\n}</code></pre>\n<p><code>rotateY(20deg)</code>だけだと、遠近なく回転するだけになります。上のと見比べることで<code>perspective</code>の効果が分かるのではないでしょうか。<br />\n（20degだと回転してるかどうかも分かりづらいですが&#8230;）</p>\n<div class=\"transform-wrap\">\n<div class=\"transform transform-base\"></div>\n<div class=\"transform transform-rotate-y\"></div>\n</div>\n<h2><span id=\"i-7\">おわり</span></h2><div class=\"matome\"><div class=\"matome-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"></div><div class=\"matome-twitter\"><a href=\"https://twitter.com/haniwa008?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\" data-show-screen-name=\"false\" data-size=\"large\" data-lang=\"ja\" data-show-count=\"true\">Follow @haniwa008</a><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></div></div><!-- /matome -->\n<p><code>transform</code>の基本的な使い方について解説しました。</p>\n<p>冒頭でも言いましたが、アニメーション系のCSS、例えば<code>transition</code>などと組み合わせることで、その効果は何倍にも膨れ上がります。</p>\n<p>ぜひとも両方マスターしてください！</p>\n","date":"January 02, 2018","categories":[{"name":"CSS","slug":"css"}],"tags":null,"author":{"name":"はにわまん","slug":"haniwaman"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"5c145eef-824f-51c7-9fa9-b94e1dd6d596"}}}