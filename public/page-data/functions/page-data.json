{"componentChunkName":"component---src-templates-post-js","path":"/functions/","result":{"data":{"wordpressPost":{"id":"ae1cdc9c-42c5-5c38-a91e-40e967f293dd","title":"テーマ作成時にfunctions.phpに書く5つの構成要素とコーディング例","slug":"functions","content":"<p>真っ更な状態からWordPressのテーマを作成する時に、<span class=\"filename\">functions.php</span>に決まって書く決まり文句ようなコードがあります。</p>\n<p>項目だけ並べると以下のとおりです。</p>\n<ul class=\"check\">\n<li>標準機能</li>\n<li>CSS/JavaScript</li>\n<li>メニュー</li>\n<li>ウィジェット</li>\n<li>画像サイズ</li>\n</ul>\n<p>今回はこれらの機能がWordPressに対してどういう作用をもたらすか、そして、具体的にどうやってコーディングすればいいか、について紹介していければと思います。</p>\n<div class=\"chat\"><figure class=\"chat-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"><figcaption>はにわまん</figcaption></figure><div class=\"chat-content\">WordPressの機能ごとに大まかにまとめると頭の中で整理しやすくなります。</div></div>\n<div id=\"toc_container\" class=\"no_bullets\"><p class=\"toc_title\">目次</p><ul class=\"toc_list\"><li><a href=\"#functionsphp5\"><span class=\"toc_number toc_depth_1\">1</span> functions.phpに書く5つの構成要素</a><ul><li><a href=\"#i\"><span class=\"toc_number toc_depth_2\">1.1</span> 標準機能</a></li><li><a href=\"#CSSJavaScript\"><span class=\"toc_number toc_depth_2\">1.2</span> CSS/JavaScript</a></li><li><a href=\"#i-2\"><span class=\"toc_number toc_depth_2\">1.3</span> メニュー</a></li><li><a href=\"#i-3\"><span class=\"toc_number toc_depth_2\">1.4</span> ウィジェット</a></li><li><a href=\"#i-4\"><span class=\"toc_number toc_depth_2\">1.5</span> 画像サイズ</a></li></ul></li><li><a href=\"#i-5\"><span class=\"toc_number toc_depth_1\">2</span> 自分用に使いやすいテーマを持っておくと楽</a></li><li><a href=\"#i-6\"><span class=\"toc_number toc_depth_1\">3</span> おわり</a></li></ul></div>\n<h2><span id=\"functionsphp5\">functions.phpに書く5つの構成要素</span></h2>\n<h3><span id=\"i\">標準機能</span></h3>\n<p>実は本当に真っ更な状態でテーマを作ると、アイキャッチの機能など馴染みのある機能も存在しない状態でできあがります。</p>\n<p><strong class=\"marker\">「これらの機能を使いますよ」という宣言</strong>をWordPressに対して行うことで、利用できるようになるものです。</p>\n<p>書き方としては以下のような感じになります。<code>add_theme_support()</code>の引数に必要な機能を書いていくイメージです。</p>\n<pre><span class=\"filename\">functions.php</span><span class=\"code-copy\" data-clipboard-target=\"#code-0\">コピー</span><code id=\"code-0\" class=\"php\">/**\r\n * WordPress標準機能\r\n *\r\n * @codex https://wpdocs.osdn.jp/%E9%96%A2%E6%95%B0%E3%83%AA%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9/add_theme_support\r\n */\r\nfunction my_setup() {\r\n\tadd_theme_support( 'post-thumbnails' ); /* アイキャッチ */\r\n\tadd_theme_support( 'automatic-feed-links' ); /* RSSフィード */\r\n\tadd_theme_support( 'title-tag' ); /* タイトルタグ自動生成 */\r\n\tadd_theme_support( 'html5', array( /* HTML5のタグで出力 */\r\n\t\t'search-form',\r\n\t\t'comment-form',\r\n\t\t'comment-list',\r\n\t\t'gallery',\r\n\t\t'caption',\r\n\t) );\r\n}\r\nadd_action( 'after_setup_theme', 'my_setup' );</code></pre>\n<p>少なくともアイキャッチの<code>post-thumbnails</code>は必須レベルで使うと思うので、追加しておくといいかと思います。その他にも、カスタマイザーを拡張するためのもろもろの記述ができますが、この辺は案件に応じて検討すればいいかと。</p>\n<p><code>add_theme_support()</code>について、詳しくは以下のでまとまっているので参考にしてもらえたらと思います。<br />\n公式Codex → <a href=\"https://wpdocs.osdn.jp/%E9%96%A2%E6%95%B0%E3%83%AA%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9/add_theme_support\" rel=\"noopener\" target=\"_blank\">関数リファレンス/add theme support &#8211; WordPress Codex 日本語版</a></p>\n<h3><span id=\"CSSJavaScript\">CSS/JavaScript</span></h3>\n<p>WordPressでCSSやJavaScriptは、<span class=\"filename\">functions.php</span>から一括で読み込みます。これは、プラグインやその他<strong class=\"marker\">WordPressが独自で読み込んでいるスクリプトとの依存関係を整理して問題なく出力させるための仕組み</strong>ですね。</p>\n<p>例えば、WordPressは標準でjQueryを出力するので、HTMLの方にもjQueryを読み込んでしまうと2重になってエラーとなるはずです。</p>\n<p>読み込ませ方としては、<code>wp_enqueue_style()</code>と<code>wp_enqueue_script()</code>を使って以下のような感じです。</p>\n<pre><span class=\"filename\">functions.php</span><span class=\"code-copy\" data-clipboard-target=\"#code-1\">コピー</span><code id=\"code-1\" class=\"php\">/**\r\n * CSSとJavaScriptの読み込み\r\n *\r\n * @codex https://wpdocs.osdn.jp/%E3%83%8A%E3%83%93%E3%82%B2%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%A1%E3%83%8B%E3%83%A5%E3%83%BC\r\n */\r\nfunction my_script_init() {\r\n\twp_enqueue_style( 'style-name', get_template_directory_uri() . '/css/style.css', array(), '1.0.0', 'all' );\r\n\twp_enqueue_script( 'script-name', get_template_directory_uri() . '/js/script.js', array( 'jquery' ), '1.0.0', true );\r\n}\r\nadd_action( 'wp_enqueue_scripts', 'my_script_init' );</code></pre>\n<p>詳しくは以下の記事で解説しているので、参考にして実装してください。</p>\n<blockquote class=\"wp-embedded-content\" data-secret=\"kBRO6pszd6\"><p><a href=\"https://haniwaman.com/load-css-js/\">WordPressテーマからCSSファイルとJSファイルを読み込む正しい方法</a></p></blockquote>\n<p><iframe title=\"&#8220;WordPressテーマからCSSファイルとJSファイルを読み込む正しい方法&#8221; &#8212; HPcode\" class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" src=\"https://haniwaman.com/load-css-js/embed/#?secret=kBRO6pszd6\" data-secret=\"kBRO6pszd6\" width=\"500\" height=\"282\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe></p>\n<h3><span id=\"i-2\">メニュー</span></h3>\n<p>メニューは、外観 → メニュー から設定できる機能ですね。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/01/functions2.png\" alt=\"\" class=\"alignnone size-full wp-image-13011\" /></p>\n<p>登録は以下のように<code>register_nav_menus</code>を使います。複数のメニューを登録することができて、<code>global</code>はプログラムの裏側で使う値で、「グローバルメニュー」は管理画面から見えるユーザー用の値となります。</p>\n<pre><span class=\"filename\">functions.php</span><span class=\"code-copy\" data-clipboard-target=\"#code-2\">コピー</span><code id=\"code-2\" class=\"php\">/**\r\n * メニューの登録\r\n *\r\n * @codex https://wpdocs.osdn.jp/%E9%96%A2%E6%95%B0%E3%83%AA%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9/register_nav_menus\r\n */\r\nfunction my_menu_init() {\r\n\tregister_nav_menus( array(\r\n\t\t'global'  =&gt; 'グローバルメニュー',\r\n\t\t'utility' =&gt; 'ユーティリティメニュー',\r\n\t\t'drawer'  =&gt; 'ドロワーメニュー',\r\n\t) );\r\n}\r\nadd_action( 'init', 'my_menu_init' );</code></pre>\n<p>公式Codex → <a href=\"https://wpdocs.osdn.jp/%E9%96%A2%E6%95%B0%E3%83%AA%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9/register_nav_menusex 日本語版\" rel=\"noopener\" target=\"_blank\">関数リファレンス/register nav menus &#8211; WordPress Codex 日本語版</a></p>\n<p>こうやって登録すると、管理画面から「メニューの位置」を選べるようになります。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/01/functions-700x454.png\" alt=\"\" class=\"alignnone size-medium wp-image-13009\" srcset=\"https://haniwaman.com/wp-content/uploads/2019/01/functions-700x454.png 700w, https://haniwaman.com/wp-content/uploads/2019/01/functions-768x498.png 768w, https://haniwaman.com/wp-content/uploads/2019/01/functions-1200x779.png 1200w, https://haniwaman.com/wp-content/uploads/2019/01/functions.png 1365w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p>登録したメニューを表示するには、<code>wp_nav_menu()</code>関数を使って<code>theme_location</code>に対応する値を指定してあげればOKです。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-3\">コピー</span><code id=\"code-3\" class=\"php\">wp_nav_menu( array(\r\n\t'theme_location' =&gt; 'global',\r\n) );</code></pre>\n<p>他にもidやクラスなど細かく設定できるので、実際に作成する際は以下の公式ドキュメントを見ながら色んなオプションを試してみてください。<br />\n公式Codex → <a href=\"https://wpdocs.osdn.jp/%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%BF%E3%82%B0/wp_nav_menu\" rel=\"noopener\" target=\"_blank\">テンプレートタグ/wp nav menu &#8211; WordPress Codex 日本語版</a></p>\n<h3><span id=\"i-3\">ウィジェット</span></h3>\n<p>ウィジェットも案件によりますが、ウィジェットで操作したそうな機能がある場合は必要な分だけ追加しましょう。外観 → ウィジェットの機能になります。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/01/functions3.png\" alt=\"\" class=\"alignnone size-full wp-image-13017\" /></p>\n<p><code>register_sidebar()</code>の関数を使うことで<strong>いくつでも</strong>作成することが可能です。増やす場合はidの値だけは被らないように作成していく必要があります。</p>\n<pre><span class=\"filename\">functions.php</span><span class=\"code-copy\" data-clipboard-target=\"#code-4\">コピー</span><code id=\"code-4\" class=\"php\">/**\r\n * ウィジェットの登録\r\n *\r\n * @codex http://wpdocs.osdn.jp/%E9%96%A2%E6%95%B0%E3%83%AA%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9/register_sidebar\r\n */\r\nfunction my_widget_init() {\r\n\tregister_sidebar( array(\r\n\t\t'name'          =&gt; 'サイドバー',\r\n\t\t'id'            =&gt; 'sidebar',\r\n\t\t'before_widget' =&gt; '&lt;div id=\"%1$s\" class=\"widget %2$s\"&gt;',\r\n\t\t'after_widget'  =&gt; '&lt;/div&gt;',\r\n\t\t'before_title'  =&gt; '&lt;div class=\"widget-title\"&gt;',\r\n\t\t'after_title'   =&gt; '&lt;/div&gt;',\r\n\t) );\r\n}\r\nadd_action( 'widgets_init', 'my_widget_init' );</code></pre>\n<p>→ <a href=\"http://wpdocs.osdn.jp/%E9%96%A2%E6%95%B0%E3%83%AA%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9/register_sidebar\" rel=\"noopener\" target=\"_blank\">関数リファレンス/register sidebar &#8211; WordPress Codex 日本語版</a></p>\n<p>登録すると、以下のようにウィジェットエリアが追加されます。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/01/functions4-700x316.png\" alt=\"\" class=\"alignnone size-medium wp-image-13018\" srcset=\"https://haniwaman.com/wp-content/uploads/2019/01/functions4-700x316.png 700w, https://haniwaman.com/wp-content/uploads/2019/01/functions4-768x347.png 768w, https://haniwaman.com/wp-content/uploads/2019/01/functions4-1200x542.png 1200w, https://haniwaman.com/wp-content/uploads/2019/01/functions4.png 1525w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<p>ウィジェトを表示するには、<code>dynamic_sidebar()</code>を使います。引数には登録時に指定したidの値を入れてあげれば、該当のウィジェットが表示される仕組みです。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-5\">コピー</span><code id=\"code-5\" class=\"php\">if ( is_active_sidebar( 'sidebar' ) ) {\r\n\tdynamic_sidebar( 'sidebar' );\r\n}</code></pre>\n<p>CSSを全く当てていませんが、以下のように表示されたことが分かります。<br />\n<img width=\"320\" src=\"https://haniwaman.com/wp-content/uploads/2019/01/functions5.png\" alt=\"\" class=\"alignnone size-full wp-image-13019\" /></p>\n<p>公式Codex → <a href=\"https://wpdocs.osdn.jp/%E9%96%A2%E6%95%B0%E3%83%AA%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9/dynamic_sidebar\" rel=\"noopener\" target=\"_blank\">関数リファレンス/dynamic sidebar &#8211; WordPress Codex 日本語版</a></p>\n<h3><span id=\"i-4\">画像サイズ</span></h3>\n<p>画像サイズは、設定 → メディア から指定できるのですが、管理画面に依存させないほうがユーザーが意図せずこの値を変えてしまってもトラブルになりません。</p>\n<p>なのでテーマ独自で使う用の画像サイズは、<span class=\"filename\">functions.php</span>に持たせることが個人的には多いです。使う関数は<code>add_image_size()</code>になります。</p>\n<pre><span class=\"filename\">functions.php</span><span class=\"code-copy\" data-clipboard-target=\"#code-6\">コピー</span><code id=\"code-6\" class=\"php\">add_image_size( 'my_thumbnail', 420, 300, true );\r\n</code></pre>\n<p><code>my_thumbnail</code>はプログラム側で使う値です。これを書いておくと、幅420px、高さ300pxでトリミングして画像を作成してくれるようになります。</p>\n<p>より詳細な使い方は以下を参照してください。<br />\n公式Codex → <a href=\"https://wpdocs.osdn.jp/%E9%96%A2%E6%95%B0%E3%83%AA%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9/add_image_size\" rel=\"noopener\" target=\"_blank\">関数リファレンス/add image size &#8211; WordPress Codex 日本語版</a></p>\n<p>呼び出す時は、標準のアイキャッチ画像を出力する時と同様で引数に、先ほど作成した<code>my_thumbnail</code>を入れるだけです。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-7\">コピー</span><code id=\"code-7\" class=\"php\">the_post_thumbnail( 'my_thumbnail' );\r\n</code></pre>\n<h2><span id=\"i-5\">自分用に使いやすいテーマを持っておくと楽</span></h2>\n<p>今回紹介したことは暗記するというよりは<strong class=\"marker\">概念とできることだけ覚えておけばOK</strong>です。あとはコピペできるものを手元に用意しておいて作成してけばいいかと。</p>\n<p>もっと言えば、汎用的な仕組みを網羅したようなテーマを作っておいて、案件時は<strong class=\"marker\">子テーマを作って足りない機能とデザインを追加</strong>しておくと、めちゃくちゃ捗るはずです。<br />\n（わたしも汎用的なテーマを作成しているのですが中々しっくりくるのができなくて、未だに1から作っていますが&#8230;）</p>\n<p>ここに紹介していないようなカスタマイザーの機能の拡張であったり、ウィジェットやメニュー（WordPressが独自のHTMLタグやクラスで出力する部分）の基本デザインなども事前に用意しておくといいでしょう。</p>\n<h2><span id=\"i-6\">おわり</span></h2><div class=\"matome\"><div class=\"matome-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"></div><div class=\"matome-twitter\"><a href=\"https://twitter.com/haniwa008?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\" data-show-screen-name=\"false\" data-size=\"large\" data-lang=\"ja\" data-show-count=\"true\">Follow @haniwa008</a><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></div></div><!-- /matome -->\n<p>テーマ作成時に<span class=\"filename\">functions.php</span>に書く5つの構成要素とコーディング例の紹介でした。今回紹介したものは本当に最低限のものになります。</p>\n<p>まずは、これらの機能が問題なく作れるようなることを優先して勉強してみてください！コードを覚えるといよりは、機能と<strong class=\"marker\">それを書くことによって何ができるかの紐づけ</strong>ができることが理解の定着に繋がると思います。</p>\n<p>実際に自分で0からWordPressを作成してみてこれらのコードを書くことによって変わるかの、before/afterみたいなことを肌で感じてみてください！</p>\n","date":"January 28, 2019","categories":[{"name":"WordPress","slug":"wordpress"}],"tags":null,"author":{"name":"はにわまん","slug":"haniwaman"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"ae1cdc9c-42c5-5c38-a91e-40e967f293dd"}}}