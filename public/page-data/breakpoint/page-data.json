{"componentChunkName":"component---src-templates-post-js","path":"/breakpoint/","result":{"data":{"wordpressPost":{"id":"772b825c-ad2f-5dbd-a0cf-ca9afbfc0b0a","title":"レスポンシブのブレークポイントの決め方！PCデザインカンプから再現する際のベスト","slug":"breakpoint","content":"<p>「<strong>ブレークポイントをどうしよう&#8230;</strong>」、レスポンシブデザインでは常に悩みの種かもしれません。日頃コーダーとしてデザインカンプからPCデザインだけ渡されて「<strong class=\"marker\">スマホもレスポンシブでいい感じによろしく！</strong>」的な指示を受けることが多いわたしは、もう悩むことは止めて、ほぼ決まった型で作るようにしています。</p>\n<p>今のところ、ブレークポイントに関して特にダメ出しを受けていないので、おそらくこの決め方でおおよそいいのだろうと個人的には思っています。</p>\n<p>この記事では、PCのデザインカンプからコーディングする時のブレークポイントの決め方についてわたし考え方を共有していきます！</p>\n<div class=\"chat\"><figure class=\"chat-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"><figcaption>はにわまん</figcaption></figure><div class=\"chat-content\">スマホデザインまでガチガチ固まっているよりも、「それなりに作って！」の方が作りやすかったりします。</div></div>\n<div id=\"toc_container\" class=\"no_bullets\"><p class=\"toc_title\">目次</p><ul class=\"toc_list\"><li><a href=\"#i\"><span class=\"toc_number toc_depth_1\">1</span> レスポンシブのブレークポイントの決め方！</a><ul><li><a href=\"#i-2\"><span class=\"toc_number toc_depth_2\">1.1</span> インナーの幅を知る</a></li><li><a href=\"#PC\"><span class=\"toc_number toc_depth_2\">1.2</span> PCのブレークポイントの決め方</a></li><li><a href=\"#i-3\"><span class=\"toc_number toc_depth_2\">1.3</span> タブレットのブレークポイントの決め方</a></li><li><a href=\"#i-4\"><span class=\"toc_number toc_depth_2\">1.4</span> スマホのブレークポイントの決め方</a></li></ul></li><li><a href=\"#Sass\"><span class=\"toc_number toc_depth_1\">2</span> おまけ：Sassを使ったブレークポイントの書き方</a></li><li><a href=\"#i-5\"><span class=\"toc_number toc_depth_1\">3</span> おわり</a></li></ul></div>\n<h2><span id=\"i\">レスポンシブのブレークポイントの決め方！</span></h2>\n<p>わたしのブレークポイントは標準で3分割です。PC、タブレット、スマホの3つ。</p>\n<p>それぞれの定義としては、以下のように決めています。</p>\n<div class=\"box\">\n<ul>\n<li>PC → インナーの幅まで</li>\n<li>タブレット → インナーの幅からiPad（768px）まで</li>\n<li>スマホ → iPadより小さい（767px）からiPhone SE（320px）まで</li>\n</ul>\n</div>\n<p>「スマホは〇〇、PCは〇〇でタブレットは不要です」、みたいなのもあると思いますが、自分としてはインナーからiPadが一番崩れやすく、ここの表現はどうやってるんだろうととても不思議に思っています。<br />\n（PCは固定幅でスマホに移行するまでは水平スクロールOKとかなら分かりますが&#8230;）</p>\n<p>今回は例題として、以下のデザインカンプをいただいたとして、どのようにブレークポイントを決めるかを紹介していきます。こちらのカンプはnoteでも販売しているものになりますので、実践したい方はぜひ！<br />\n→ <a href=\"https://note.mu/haniwaman/n/nefa48db83682\" rel=\"noopener noreferrer\" target=\"_blank\" onclick=\"gtag('event', 'link', {'event_category': 'click', 'event_label': 'breakpoint_Photoshop、Illustrator、XDからのコーディングに慣れよう！'});\">Photoshop、Illustrator、XDからのコーディングに慣れよう！</a><br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/01/breakpoint-700x758.jpg\" alt=\"\" class=\"alignnone size-medium wp-image-12792\" srcset=\"https://haniwaman.com/wp-content/uploads/2019/01/breakpoint-700x758.jpg 700w, https://haniwaman.com/wp-content/uploads/2019/01/breakpoint-768x832.jpg 768w, https://haniwaman.com/wp-content/uploads/2019/01/breakpoint-1200x1300.jpg 1200w, https://haniwaman.com/wp-content/uploads/2019/01/breakpoint.jpg 1366w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<h3><span id=\"i-2\">インナーの幅を知る</span></h3>\n<p>ブレークポイントを決める上で重要視しているのは、インナーの幅です。インナーとは、サイトの実質的な横幅です。ウインドウサイズは可変なので、どこまでの幅を担保するかはデザインカンプの時点で基本的には決まっているはずです。</p>\n<p>このインナーの幅を基準として、PCとタブレットの境目を決めるといった感じになります。今回、例にするサイトだとインナーの範囲は以下のようになります。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/01/breakpoint1-700x758.png\" alt=\"\" class=\"alignnone size-medium wp-image-12791\" srcset=\"https://haniwaman.com/wp-content/uploads/2019/01/breakpoint1-700x758.png 700w, https://haniwaman.com/wp-content/uploads/2019/01/breakpoint1-768x832.png 768w, https://haniwaman.com/wp-content/uploads/2019/01/breakpoint1-1200x1300.png 1200w, https://haniwaman.com/wp-content/uploads/2019/01/breakpoint1.png 1366w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<h3><span id=\"PC\">PCのブレークポイントの決め方</span></h3>\n<p>PCのブレークポイントは、<strong class=\"marker\">インナーの幅以上</strong>ということで考えています。PC表現の領域では基本的にはデザインカンプを完全再現して、ウインドウを広げまくっても、コンテンツは中央で維持されるみたいな感じになります。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/01/breakpoint.gif\" alt=\"\" class=\"alignnone size-medium wp-image-12793\" /></p>\n<h3><span id=\"i-3\">タブレットのブレークポイントの決め方</span></h3>\n<p>タブレットは、インナーより小さくなったタイミング（PCを基準としている場合）で発動します。PCのデザインカンプしか用意されていない場合は、ここから<strong class=\"marker\">「いい感じ」に表現するための腕が試される</strong>感じですね&#8230;。</p>\n<p>固定値ではなく<strong>パーセントで変化</strong>させるように設計したり、<strong>文字サイズや余白を調整</strong>したり、<strong>3列から2列</strong>にしたり（今回の例では対応していませんが、、）など、大まかに調整していく必要が出てくるエリアです。</p>\n<p>以下の例では、パーセントと余白の調整で、インナー以下の幅になっても表示が担保されているようにしました。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/01/breakpoint2.gif\" alt=\"\" class=\"alignnone size-medium wp-image-12794\" /></p>\n<p>タブレットの終わりは、iPadまでとしています。iPadは誰がなんと言おうとタブレットなので、、ここの幅は担保してあげる必要があると思ってます。</p>\n<h3><span id=\"i-4\">スマホのブレークポイントの決め方</span></h3>\n<p>スマホはiPad以下（767px以下）としています。iPadの幅（768px）を基準にして、タブレットかスマホかを分けるといいかと思います。</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\">\n<p lang=\"ja\" dir=\"ltr\">&#x1f4dd; 最低限の表示を担保したいウインドウ幅</p>\n<p>&#x2705; PC → カンプの幅<br />&#x2705; タブレット → 768px（iPad）<br />&#x2705; スマホ → 320px（iPhoneSE）</p>\n<p>あと768より小さいサイズは、もうスマホ表示でいいかと思いますが、どうなんでしょうか&#8230;。</p>\n<p>基本↓をスマホにしてる&#8230;<a href=\"https://twitter.com/Media?ref_src=twsrc%5Etfw\">@media</a> screen and (max-width: 767px) {}</p>\n<p>&mdash; はにわまん (@haniwa008) <a href=\"https://twitter.com/haniwa008/status/1034001663806328832?ref_src=twsrc%5Etfw\">2018年8月27日</a></p></blockquote>\n<p><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n<p>ここからは一般的によく見るスマホの表示にさせます。レスポンシブのスマホは横幅いっぱいにして縦並びにするのが基本なので、（タブレットの表現に比べると、）悩むことはほぼありません。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2019/01/breakpoint3.gif\" alt=\"\" class=\"alignnone size-full wp-image-12795\" /></p>\n<h2><span id=\"Sass\">おまけ：Sassを使ったブレークポイントの書き方</span></h2>\n<p>ブレークポイントをほぼ決め打ちしているので、サイト制作する際のテンプレートもこの考え方に基づいて用意していあります。具体的には以下のようなコードです。<br />\n（いきなりSassを出してすみません、、こんな感じで設計できればブレークポイントの管理が楽そう&#8230;という具合で思っていただければ幸いです。）</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-0\">コピー</span><code id=\"code-0\" class=\"sass\">// レイアウト幅\r\n$layout-width-inner: 1180px;\r\n\r\n// ブレークポイント\r\n$breakpoints: (\r\n\t\"sp\": \"screen and (max-width: 767px)\",\r\n\t\"tab\": \"screen and (max-width: #{$layout-width-inner - 1px})\",\r\n\t\"pc\": \"screen and (min-width: #{$layout-width-inner})\",\r\n);</code></pre>\n<p>インナー幅（1180px）を指定すれば、そこを基準にてPC、タブレットと分けられます。スマホは先ほど紹介したように767px以下ということで設定されるようになります。</p>\n<p>上記のブレークポイントを反映させてメディアクエリを作るmixinを用意しておき、、</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-1\">コピー</span><code id=\"code-1\" class=\"sass\">// メディアクエリー\r\n@mixin mq($breakpoint: sp) {\r\n\r\n\t@media #{map-get($breakpoints, $breakpoint)} {\r\n\r\n\t\t@content;\r\n\t}\r\n}</code></pre>\n<p>例えば、以下のようなコードを記述したとして、これをコンパイルすれば、、</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-2\">コピー</span><code id=\"code-2\" class=\"sass\">.item {\r\n\twidth: 360px;\r\n\tmargin: 0 50px 50px 0;\r\n\r\n\t@include mq('tab') {\r\n\t\twidth: calc(33.33333333% - 20px);\r\n\t\tmargin-right: 30px;\r\n\t\tmargin-bottom: 30px;\r\n\t}\r\n\r\n\t@include mq('sp') {\r\n\t\twidth: 100%;\r\n\t\tmargin-right: 0;\r\n\t}\r\n}</code></pre>\n<p>以下のようなCSSとして出来上がるという仕組みとなっています。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-3\">コピー</span><code id=\"code-3\" class=\"css\">.item {\r\n\twidth: 360px;\r\n\tmargin: 0 50px 50px 0;\r\n}\r\n\r\n@media screen and (max-width: 1179px) {\r\n\r\n\t.item {\r\n\t\twidth: calc(33.33333333% - 20px);\r\n\t\tmargin-right: 30px;\r\n\t\tmargin-bottom: 30px;\r\n\t}\r\n}\r\n\r\n@media screen and (max-width: 767px) {\r\n\r\n\t.item {\r\n\t\twidth: 100%;\r\n\t\tmargin-right: 0;\r\n\t}\r\n}</code></pre>\n<p>こんな感じでSassを使えば、<code>$layout-width-inner</code>に幅をしてするだけで、全てのブレークポイントの設定が完了し、あとは入れ子の構造で直感的にCSSを書いていけるのでおすすめです。</p>\n<p>Sassについては、以下の記事でまとめていますので参考にしていただければと思います！</p>\n<blockquote class=\"wp-embedded-content\" data-secret=\"vFnKRih4TJ\"><p><a href=\"https://haniwaman.com/sass/\">Sassを使うメリットとよく使う機能を４つだけ厳選！</a></p></blockquote>\n<p><iframe title=\"&#8220;Sassを使うメリットとよく使う機能を４つだけ厳選！&#8221; &#8212; HPcode\" class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" src=\"https://haniwaman.com/sass/embed/#?secret=vFnKRih4TJ\" data-secret=\"vFnKRih4TJ\" width=\"500\" height=\"282\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe></p>\n<h2><span id=\"i-5\">おわり</span></h2><div class=\"matome\"><div class=\"matome-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"></div><div class=\"matome-twitter\"><a href=\"https://twitter.com/haniwa008?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\" data-show-screen-name=\"false\" data-size=\"large\" data-lang=\"ja\" data-show-count=\"true\">Follow @haniwa008</a><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></div></div><!-- /matome -->\n<p>わたしのブレークポイントの決め方をおさらいすると、以下のとおりです。</p>\n<div class=\"box\">\n<ul>\n<li>PC → インナーの幅まで</li>\n<li>タブレット → インナーの幅からiPad（768px）まで</li>\n<li>スマホ → iPadより小さい（767px）からiPhone SE（320px）まで</li>\n</ul>\n</div>\n<p>特に、タブレットで定義している「インナーの幅からiPad（768px）まで」は<strong class=\"marker\">マジで崩れやすい</strong>ですし、固定値とか適当なコーディングしていると、ガッタガタになりやすい部分です。</p>\n<p>コーディングし終わったら、PCがデザインカンプと合っているかの確認はもちろんのこと、インナーより小さくなった時の挙動もで<strong class=\"marker\">デベロッパーツールなどで横幅を動かしながらしっかりと確認</strong>した方がいいかもしれません&#8230;。</p>\n","date":"January 22, 2019","categories":[{"name":"CSS","slug":"css"}],"tags":null,"author":{"name":"はにわまん","slug":"haniwaman"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"772b825c-ad2f-5dbd-a0cf-ca9afbfc0b0a"}}}