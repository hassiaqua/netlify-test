{"componentChunkName":"component---src-templates-post-js","path":"/pug/","result":{"data":{"wordpressPost":{"id":"25daeb46-aa42-52fd-abfe-5771d80becb8","title":"GulpでPugの環境を構築！静的HTMLサイトを効率的に作ろう","slug":"pug","content":"<p>GulpでPugの環境を構築する方法です！</p>\n<p>同列に語られがちなHTMLのテンプレートエンジンである<a href=\"https://haniwaman.com/ejs/\">EJS</a>と近いかと思いきや、意外とDreamweaverのテンプレート機能と近いという感覚でした。</p>\n<p>使えるようになれば、<strong class=\"marker\">静的なHTMLサイトの構築が楽になるのは間違いない</strong>ので、時間がある時にでも触ってみてください。</p>\n<div class=\"chat\"><figure class=\"chat-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"><figcaption>はにわまん</figcaption></figure><div class=\"chat-content\">PubはHTMLと書き方が変わりすぎて最初は苦労するかもしれません...</div></div>\n<div id=\"toc_container\" class=\"no_bullets\"><p class=\"toc_title\">目次</p><ul class=\"toc_list\"><li><a href=\"#GulpPug\"><span class=\"toc_number toc_depth_1\">1</span> GulpでPugを導入してみる</a><ul><li><a href=\"#i\"><span class=\"toc_number toc_depth_2\">1.1</span> フォルダ構成</a></li><li><a href=\"#gulpfile\"><span class=\"toc_number toc_depth_2\">1.2</span> gulpfileのコード</a></li><li><a href=\"#Pug\"><span class=\"toc_number toc_depth_2\">1.3</span> Pugのコード</a></li><li><a href=\"#Pug-2\"><span class=\"toc_number toc_depth_2\">1.4</span> Pugのレイアウトを作る</a></li></ul></li><li><a href=\"#Pug-3\"><span class=\"toc_number toc_depth_1\">2</span> 初心者がつまづきがちなPugのルール</a><ul><li><a href=\"#i-2\"><span class=\"toc_number toc_depth_2\">2.1</span> 階層によって構造を理解している</a></li><li><a href=\"#i-3\"><span class=\"toc_number toc_depth_2\">2.2</span> タブかスペースで統一</a></li><li><a href=\"#i-4\"><span class=\"toc_number toc_depth_2\">2.3</span> 属性は「カッコ」で囲んで複数ある場合は「スペース」で区切る</a></li><li><a href=\"#11\"><span class=\"toc_number toc_depth_2\">2.4</span> 1要素につき1行を使う</a></li></ul></li><li><a href=\"#i-5\"><span class=\"toc_number toc_depth_1\">3</span> おわり</a></li></ul></div>\n<h2><span id=\"GulpPug\">GulpでPugを導入してみる</span></h2>\n<p>最小構成で考えると、必要なパッケージは<code>gulp</code>と<code>gulp-pug</code>の2つになります。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-0\">コピー</span><code id=\"code-0\" class=\"cli\">npm install -seve-dev gulp\r\n</code></pre>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-1\">コピー</span><code id=\"code-1\" class=\"cli\">npm install -seve-dev gulp-pug\r\n</code></pre>\n<h3><span id=\"i\">フォルダ構成</span></h3>\n<p>フォルダの構成としては以下のような感じで作りました。pugファイルの位置はなんでもいいのですが、gulpfileでの変わってくるという感じですね。<strong class=\"marker\">この記事のコピペで同様に進めたい方は下記のフォルダ構成を真似</strong>してもらえたらと思います。</p>\n<p><span class=\"folder\">pug</span><br />\n&#8211; <span class=\"folder\">common</span><br />\n &#8212; <span class=\"filename\">_layout.pug</span><br />\n<span class=\"filename\">index.pug</span><br />\n<span class=\"filename\">gulpfile.js</span></p>\n<p><img src=\"https://haniwaman.com/wp-content/uploads/2019/06/pug1.png\" alt=\"\" width=\"296\" class=\"alignnone size-full wp-image-15569\" /></p>\n<h3><span id=\"gulpfile\">gulpfileのコード</span></h3>\n<p>では、実際にgulpfileにコードを書いていきます。めちゃくちゃシンプルで以下のように数行だけで実行させることができます。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-2\">コピー</span><code id=\"code-2\" class=\"js\">var gulp = require( 'gulp' );\r\nvar pug = require( 'gulp-pug' );\r\n\r\ngulp.task( 'pug', function() {\r\n\treturn gulp\r\n\t\t.src([ 'pug/**/*.pug', '!pug/**/_*.pug' ])\r\n\t\t.pipe(pug({\r\n\t\t\tpretty: true\r\n\t\t}))\r\n\t\t.pipe( gulp.dest( './' ) );\r\n});</code></pre>\n<p>ザックリ解説すると、「<strong>pugフォルダ内の.pugの拡張子のファイルを変換対象にしてください、ただし、_（アンダーバー）から始まるファイルは変換させないでね。</strong>」という処理を行っているものになります。</p>\n<h3><span id=\"Pug\">Pugのコード</span></h3>\n<p>今回の例では以下のような感じで作ってみました。Pugの書き方のルールについては、後ほど紹介しています。ひとまずは実行できればなんでもOKです！</p>\n<p>こちらは<span class=\"folder\">pugフォルダ</span>内の<span class=\"filename\">index.pug</span>に記載しています。</p>\n<pre><span class=\"filename\">pug/index.pug</span><span class=\"code-copy\" data-clipboard-target=\"#code-3\">コピー</span><code id=\"code-3\" class=\"pug\">doctype html\r\nhtml(lang='ja')\r\n\thead\r\n\t\tmeta(charset='UTF-8')\r\n\t\tmeta(name='viewport', content='width=device-width, initial-scale=1.0')\r\n\t\tlink(rel='stylesheet', href='css/style.css')\r\n\t\ttitle タイトル\r\n\t\tmeta(name='description', content='')\r\n\t\tmeta(name='keywords', content='')\r\n\tbody\r\n\t\t#content\r\n\t\t\t.inner\r\n\t\t\t\tp Hello Pug!\r\n\t\tscript(src='js/script.js')</code></pre>\n<p>これを実行してみます。実行するには、先ほどgulpで作成した以下のコマンドを実行します。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-4\">コピー</span><code id=\"code-4\" class=\"cli\">gulp pug</code></pre>\n<p>以下のような<span class=\"filename\">index.html</span>が出来上がるはずです。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-5\">コピー</span><code id=\"code-5\" class=\"html\">&lt;!DOCTYPE html&gt;\r\n&lt;html lang=\"ja\"&gt;\r\n  &lt;head&gt;\r\n    &lt;meta charset=\"UTF-8\"/&gt;\r\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/&gt;\r\n    &lt;link rel=\"stylesheet\" href=\"css/style.css\"/&gt;\r\n\t\t&lt;title&gt;タイトル&lt;/title&gt;\r\n    &lt;meta name=\"description\" content=\"\"/&gt;\r\n    &lt;meta name=\"keywords\" content=\"\"/&gt;\r\n  &lt;/head&gt;\r\n  &lt;body&gt;\r\n    &lt;div id=\"content\"&gt;\r\n      &lt;div class=\"inner\"&gt;\r\n        &lt;p&gt;Hello Pug!&lt;/p&gt;\r\n      &lt;/div&gt;\r\n    &lt;/div&gt;\r\n    &lt;script src=\"js/script.js\"&gt;&lt;/script&gt;\r\n  &lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\n<h3><span id=\"Pug-2\">Pugのレイアウトを作る</span></h3>\n<p><a href=\"https://haniwaman.com/ejs/\">EJS</a>もそうですが、この手のテンプレートエンジンは、効率的なコーディングができるようになることが導入の主な目的になります。</p>\n<p>Pugはテンプレートを作って使い回すことが代表的な使い方のようです。なんとなくDreamweaverの感覚に近いかもしれません。</p>\n<p><span class=\"filename\">common/_layout.pug</span>って名前で作成して、以下のような変数とか<code>block</code>を配置します。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-6\">コピー</span><code id=\"code-6\" class=\"pug\">block value\r\ndoctype html\r\nhtml(lang='ja')\r\n\thead\r\n\t\tmeta(charset='UTF-8')\r\n\t\tmeta(name='viewport', content='width=device-width, initial-scale=1.0')\r\n\t\ttitle #{title}\r\n\t\tmeta(name='description', content=description)\r\n\t\tmeta(name='keywords', content=keywords)\r\n\r\n\t\tblock addcss\r\n\r\n\tbody\r\n\t\tblock content\r\n\r\n\tblock addjs\r\n</code></pre>\n<p>そして、<span class=\"filename\">index.pug</span>にテンプレートを適応させてあげると以下のような記述になります。（この辺は説明するより実際に実行して変数を変更しながらどういった結果になるか確認した方が早いかもしれません。）</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-7\">コピー</span><code id=\"code-7\" class=\"pug\">extend common/_layout\r\n\r\nappend value\r\n\t- var title= \"トップページ\";\r\n\t- var description= \"ディスクリプション\";\r\n\t- var keywords= \"キーワード,キーワード2,キーワード3\";\r\n\r\nappend addcss\r\n\tlink(rel=\"stylesheet\" href=\"css/index.css\")\r\n\r\nappend addjs\r\n\tscript(src=\"js/index.js\")\r\n\r\n//- ページのコンテンツ\r\nblock content\r\n\t#content\r\n\t\t\t.inner\r\n\t\t\t\tp Hello Pug!</code></pre>\n<p>テンプレートで<code>block</code>を配置したところに<code>append</code>で定義した値が入ります。</p>\n<p><code>append value</code>で定義している変数はJavaScriptの記述なので、行頭に「-（ハイフン）」を配置する必要があります。そして、テンプレート側で<code>#{title}</code>のような記述で変数の値を受け取っています。</p>\n<p>このように<strong class=\"marker\">1つテンプレートを用意しておくと、ページごとの変数と要素を用意するだけでファイルを量産していくことが可能</strong>になります。</p>\n<h2><span id=\"Pug-3\">初心者がつまづきがちなPugのルール</span></h2>\n<p>初めてPugを触った時に個人的にとまどったりつまずいた部分をまとめました。</p>\n<p>Pugの公式ドキュメントは以下になりますので、詳しく理解したい方は公式を参考にしてください。<br />\n→ <a href=\"https://pugjs.org/api/getting-started.html\" rel=\"noopener nofollow\" target=\"_blank\">Getting Started – Pug</a></p>\n<h3><span id=\"i-2\">階層によって構造を理解している</span></h3>\n<p>スペースであったりタブによって、小要素と親要素の関係を理解しているっぽいです。</p>\n<p>以下のように書いてしまうと、<code>html</code>と<code>head</code>がそれぞれのタグで作られちゃいます。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-8\">コピー</span><code id=\"code-8\" class=\"pug\">html(lang='ja')\r\nhead</code></pre>\n<p><strong class=\"marker\">Pugで記載する時に親子関係を作りたかったら以下のようにタグなどで並列に記載しないで階層構造を作る</strong>ようにしましょう。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-9\">コピー</span><code id=\"code-9\" class=\"pug\">html(lang='ja')\r\n\thead</code></pre>\n<h3><span id=\"i-3\">タブかスペースで統一</span></h3>\n<p>Pugは記述が減る分、デリケートに扱ってあげないと壊れやすい特徴があるように思っています。</p>\n<p>閉じタグがないので、先ほど紹介したようにスペースとかタブで階層構造を理解させてあげるのですが、このタブやスペースが混ざっていてもエラーになりがちです。</p>\n<p><strong class=\"marker\">Pugで作成する時はタブかスペースのどちらかに統一する</strong>といいかと思います。わたしはタブで統一しています。</p>\n<h3><span id=\"i-4\">属性は「カッコ」で囲んで複数ある場合は「スペース」で区切る</span></h3>\n<p>画像を表現するなら以下のような感じです。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-10\">コピー</span><code id=\"code-10\" class=\"pug\">img(src=\"\" alt=\"\")\r\n</code></pre>\n<h3><span id=\"11\">1要素につき1行を使う</span></h3>\n<p>なんとなくEmmetっぽく<code>li>a>img(src=\"\" alt=\"\")</code>みたいな書き方ができると思っていました。これだとエラーになります。</p>\n<p>Pugでは、<strong class=\"marker\">1要素ごとに1行にしないと機能しない</strong>っぽいので以下のように書いてあげる必要があります。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-11\">コピー</span><code id=\"code-11\" class=\"pug\">li\r\n\ta\r\n\t\timg(src=\"\" alt=\"\")</code></pre>\n<h2><span id=\"i-5\">おわり</span></h2><div class=\"matome\"><div class=\"matome-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"></div><div class=\"matome-twitter\"><a href=\"https://twitter.com/haniwa008?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\" data-show-screen-name=\"false\" data-size=\"large\" data-lang=\"ja\" data-show-count=\"true\">Follow @haniwa008</a><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></div></div><!-- /matome -->\n<p>GulpでPugの環境を構築する方法です。</p>\n<p><strong class=\"marker\">1つテンプレートを用意しておけばトップページから仮想ページまで使い回せる</strong>のがPugの良いところだと思います。分割もしやすい印象でした。（もちろん役割に応じてテンプレートを複数作ってもいい）</p>\n<p>書き方にちょっと癖があるので最初は大変かもしれませんが、長い目で見ると楽になるはずです（効率化ってだいたいこんな感じのが多い）。時間がある時にでもぜひ触ってみてください！</p>\n","date":"June 29, 2019","categories":[{"name":"環境","slug":"setting"}],"tags":null,"author":{"name":"はにわまん","slug":"haniwaman"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"25daeb46-aa42-52fd-abfe-5771d80becb8"}}}