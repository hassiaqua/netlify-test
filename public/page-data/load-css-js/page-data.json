{"componentChunkName":"component---src-templates-post-js","path":"/load-css-js/","result":{"data":{"wordpressPost":{"id":"11e7fbc1-3016-510b-8e4a-ec5f9e71bac0","title":"WordPressテーマからCSSファイルとJSファイルを読み込む正しい方法","slug":"load-css-js","content":"<p>WordPressテーマからCSSファイルとJSファイルを読み込む正しい方法です。</p>\n<p><code>&lt;head&gt;</code>に直接書きたくなるのは分かりますが、、、WordPressには<strong class=\"marker\">WordPressなりのお作法</strong>があります。WordPressを使うからには、そのお作法に倣った（ならった）方がトラブルなく無難に進められます。</p>\n<p>ということで、今日からWordPressでCSSとJavaScriptをheadから呼び出すのは止めましょう！正しい読み込み方を紹介します。</p>\n<div class=\"chat\"><figure class=\"chat-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"><figcaption>はにわまん</figcaption></figure><div class=\"chat-content\">WordPressのお作法を守ったほうが安全です！</div></div>\n<div id=\"toc_container\" class=\"no_bullets\"><p class=\"toc_title\">目次</p><ul class=\"toc_list\"><li><a href=\"#CSSJS\"><span class=\"toc_number toc_depth_1\">1</span> CSSファイルとJSファイルを読み込む正しい方法</a><ul><li><a href=\"#CSS\"><span class=\"toc_number toc_depth_2\">1.1</span> CSSを読み込むコード</a></li><li><a href=\"#JavaScript\"><span class=\"toc_number toc_depth_2\">1.2</span> JavaScriptを読み込むコード</a></li></ul></li><li><a href=\"#i\"><span class=\"toc_number toc_depth_1\">2</span> 子テーマから呼び出す場合はちょっと違う</a><ul><li><a href=\"#CSS-2\"><span class=\"toc_number toc_depth_2\">2.1</span> CSSを読み込むコード</a></li><li><a href=\"#JavaScript-2\"><span class=\"toc_number toc_depth_2\">2.2</span> JavaScriptを読み込むコード</a></li><li><a href=\"#2\"><span class=\"toc_number toc_depth_2\">2.3</span> パスを取得する2つの関数</a></li></ul></li><li><a href=\"#ltheadgt\"><span class=\"toc_number toc_depth_1\">3</span> &lt;head&gt;に直接書かないとダメなパターンもある</a><ul><li><a href=\"#ltphp_wp_head_gtCSSJavaScript\"><span class=\"toc_number toc_depth_2\">3.1</span> &lt;?php wp_head(); ?&gt;でCSSとJavaScriptが読み込まれてる</a></li></ul></li><li><a href=\"#i-2\"><span class=\"toc_number toc_depth_1\">4</span> おわり</a></li></ul></div>\n<h2><span id=\"CSSJS\">CSSファイルとJSファイルを読み込む正しい方法</span></h2>\n<p>では早速、読み込み方を見ていきましょう！（ほぼコピペ元とする用の記事です）</p>\n<p><span class=\"filename\">functions.php</span>に記載していきます。</p>\n<h3><span id=\"CSS\">CSSを読み込むコード</span></h3>\n<pre><span class=\"filename\">functions.php</span><span class=\"code-copy\" data-clipboard-target=\"#code-0\">コピー</span><code id=\"code-0\" class=\"php\">function my_styles() {\r\n\twp_enqueue_style( 'style-name', get_template_directory_uri() . '/css/style.css', array(), '1.0.3' );\r\n}\r\nadd_action( 'wp_enqueue_scripts', 'my_styles' );</code></pre>\n<p>この記述をすると、実際には以下のように出力されます。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-1\">コピー</span><code id=\"code-1\" class=\"html\">&lt;link rel='stylesheet' id='style-name-css'  href='http://demo.local/wp-content/themes/twentyseventeen/css/style.css?ver=1.0.3' type='text/css' media='all' /&gt;\r\n</code></pre>\n<p>idの箇所に、<code>'style-name'</code>が使われていることが分かります。（-css）は自動で付与されます。</p>\n<p>hrefには、<code>get_template_directory_uri() . '/css/style.css'</code>が。<code>get_template_directory_uri()</code>はテーマファイルまでのパスを取得してくれるものになります。そして、<code>?ver=</code>として指定した<code>'1.0.3'</code>が反映されています。</p>\n<p>ちなみにキャッシュの削除などでも使える部分なので、CSSを修正した際はこの数字も変更しておくといいかと思います。</p>\n<blockquote class=\"wp-embedded-content\" data-secret=\"rlxo2G1l2L\"><p><a href=\"https://haniwaman.com/cache-delete/\">「キャッシュの削除お願いします」をなくせ！強制的にCSSのキャッシュを無効化する２つの方法</a></p></blockquote>\n<p><iframe title=\"&#8220;「キャッシュの削除お願いします」をなくせ！強制的にCSSのキャッシュを無効化する２つの方法&#8221; &#8212; HPcode\" class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" src=\"https://haniwaman.com/cache-delete/embed/#?secret=rlxo2G1l2L\" data-secret=\"rlxo2G1l2L\" width=\"500\" height=\"282\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe></p>\n<h3><span id=\"JavaScript\">JavaScriptを読み込むコード</span></h3>\n<pre><span class=\"filename\">functions.php</span><span class=\"code-copy\" data-clipboard-target=\"#code-2\">コピー</span><code id=\"code-2\" class=\"php\">function my_scripts() {\r\n\twp_enqueue_script( 'script-name', get_template_directory_uri() . '/js/script.js', array( 'jquery' ), '1.0.2', true );\r\n}\r\nadd_action( 'wp_enqueue_scripts', 'my_scripts' );</code></pre>\n<p>こちらの表示は以下のような感じになります。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-3\">コピー</span><code id=\"code-3\" class=\"html\">&lt;script type='text/javascript' src='http://demo.local/wp-content/themes/twentyseventeen/js/script.js?ver=1.0.2'&gt;&lt;/script&gt;</code></pre>\n<p>CSSとは違い、idの指定がありません。<br />\n（そもそもscriptタグにidは指定できるのだろうか&#8230;）</p>\n<p>JavaScriptの<code>script-name</code>は内部的に保持するものですね。ただし適当に付けるのではなく被らない名前にしないと読み込まれないのでご注意を！</p>\n<p><code>'1.0.2'</code>の部分はCSSと同様に<code>?ver=1.0.2</code>として使われる部分になります。JavaScriptを修正した際は、このバージョンも変更しておきましょう。</p>\n<p><code>array( 'jquery' )</code>は依存関係を表します。<strong class=\"marker\">WordPressは標準でjQueryが読み込まれています</strong>。この指定をすると、jqueryに依存したJavaScriptであることを明示できるので、<strong class=\"marker\">必ずjQueryの読み込みよりも後に出力されるようになります</strong>。</p>\n<p>最後の<code>true</code>は、<strong>bodyの閉じタグ直前に出力させるという指定</strong>になります。反対に<code>false</code>にするとhead内に表示されるようになります。<code>true</code>が一般的ですね。</p>\n<h2><span id=\"i\">子テーマから呼び出す場合はちょっと違う</span></h2>\n<p>子テーマから呼び出す場合は、ちょっとだけ違うのでその違いも見ていきましょう。異なるのは一部だけです。<br />\ntwentyseventeen-childという子テーマから呼び出したとします。</p>\n<h3><span id=\"CSS-2\">CSSを読み込むコード</span></h3>\n<pre><span class=\"filename\">functions.php</span><span class=\"code-copy\" data-clipboard-target=\"#code-4\">コピー</span><code id=\"code-4\" class=\"php\">function my_child_styles() {\r\n\twp_enqueue_style( 'style-child-name', get_stylesheet_directory_uri() . '/css/style.css', array(), '1.0.3' );\r\n}\r\nadd_action( 'wp_enqueue_scripts', 'my_child_styles' );</code></pre>\n<p>実際の表示は以下のような感じになります。（URLの部分がtwentyseventeen-childを示しているのが分かるかと思います）</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-5\">コピー</span><code id=\"code-5\" class=\"html\">&lt;link rel='stylesheet' id='style-child-name-css'  href='http://demo.local/wp-content/themes/twentyseventeen-child/css/style.css?ver=1.0.3' type='text/css' media='all' /&gt;\r\n</code></pre>\n<h3><span id=\"JavaScript-2\">JavaScriptを読み込むコード</span></h3>\n<pre><span class=\"filename\">functions.php</span><span class=\"code-copy\" data-clipboard-target=\"#code-6\">コピー</span><code id=\"code-6\" class=\"php\">function my_child_scripts() {\r\n\twp_enqueue_script( 'script-child-name', get_stylesheet_directory_uri() . '/js/script.js', array( 'jquery' ), '1.0.2', true );\r\n}\r\nadd_action( 'wp_enqueue_scripts', 'my_child_scripts' );</code></pre>\n<p>実際の表示は以下のような感じになります。（URLの部分がtwentyseventeen-childを示しているのが分かるかと思います）</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-7\">コピー</span><code id=\"code-7\" class=\"html\">&lt;script type='text/javascript' src='http://demo.local/wp-content/themes/twentyseventeen-child/js/script.js?ver=1.0.2'&gt;&lt;/script&gt;\r\n</code></pre>\n<h3><span id=\"2\">パスを取得する2つの関数</span></h3>\n<p>ソースコードだけの雑な説明ですみません。親テーマを指し示すか、子テーマを指し示すかは、パスを取得する関数によって変わってきます。特に<strong class=\"marker\">子テーマを使っている場合はどちらのファイルを取得したいかによって関数を使い分ける</strong>必要があります。</p>\n<ul>\n<li>親テーマからファイルを取得した場合 → <code>get_template_directory_uri()</code></li>\n<li>子テーマからファイルを取得したい場合 → <code>get_stylesheet_directory_uri()</code></li>\n</ul>\n<h2><span id=\"ltheadgt\">&lt;head&gt;に直接書かないとダメなパターンもある</span></h2>\n<p>「WordPressのルールに沿ってfunctions.phpに書きましょう！」と言ってきましたが、headに直接書いた方がいい場合もあります。それはテンプレート内で<code>wp_head();</code>が読み込まれいないテーマの場合です！</p>\n<h3><span id=\"ltphp_wp_head_gtCSSJavaScript\">&lt;?php wp_head(); ?&gt;でCSSとJavaScriptが読み込まれてる</span></h3>\n<p>これまで紹介してきた<code>wp_enqueue_scripts</code>は、テンプレートファイル内の<code>wp_head();</code>の中で処理されて、styleやscriptのHTMLタグとして出力されているものになります。</p>\n<p>つまり、テンプレートで<code>wp_head();</code>が使われいないWordPressサイトでは、いくら<code>wp_enqueue_scripts</code>に記載しても、一切読み込まれることはありません。</p>\n<p>なので<code>wp_head();</code>が使われてないっぽいサイトは仕方ないですが、直接<code>&lt;head&gt;</code>などに記載しましょう&#8230;。</p>\n<h2><span id=\"i-2\">おわり</span></h2><div class=\"matome\"><div class=\"matome-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"></div><div class=\"matome-twitter\"><a href=\"https://twitter.com/haniwa008?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\" data-show-screen-name=\"false\" data-size=\"large\" data-lang=\"ja\" data-show-count=\"true\">Follow @haniwa008</a><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></div></div><!-- /matome -->\n<p>WordPressテーマからCSSファイルとJSファイルを読み込む正しい方法でした。そのままコピーして必要な箇所だけ修正して使ってみてください！<br />\n（実際に出力を確認するのが一番理解が早いと思います）</p>\n","date":"October 24, 2018","categories":[{"name":"WordPress","slug":"wordpress"}],"tags":null,"author":{"name":"はにわまん","slug":"haniwaman"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"11e7fbc1-3016-510b-8e4a-ec5f9e71bac0"}}}