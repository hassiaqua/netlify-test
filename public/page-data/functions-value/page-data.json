{"componentChunkName":"component---src-templates-post-js","path":"/functions-value/","result":{"data":{"wordpressPost":{"id":"b7bde500-f3af-53a7-b831-08e668a287f5","title":"functions.phpなどの値を画面に表示させずに確認する方法","slug":"functions-value","content":"<p>WordPressの「バックエンド（functions.phpなど）で動いている<strong class=\"marker\">値の中身を見たい</strong>・・・」という気持ちになった時の確認方法を紹介します。</p>\n<p>大雑把には、</p>\n<ul>\n<li>wp-config.phpにログを出力させる設定して</li>\n<li>functions.phpにログを出力させるための記述する</li>\n</ul>\n<p>という流れになります。</p>\n<div class=\"chat\"><figure class=\"chat-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"><figcaption>はにわまん</figcaption></figure><div class=\"chat-content\">画面にエラーメッセージを出せないときの、エラーメッセージ確認方法でもあります</div></div>\n<div id=\"toc_container\" class=\"no_bullets\"><p class=\"toc_title\">目次</p><ul class=\"toc_list\"><li><a href=\"#i\"><span class=\"toc_number toc_depth_1\">1</span> デバッグログを出力させる</a></li><li><a href=\"#i-2\"><span class=\"toc_number toc_depth_1\">2</span> ログファイルを確認</a></li><li><a href=\"#i-3\"><span class=\"toc_number toc_depth_1\">3</span> 値をログに出力させる方法</a><ul><li><a href=\"#var_dump\"><span class=\"toc_number toc_depth_2\">3.1</span> var_dump();を表示させる方法</a></li></ul></li><li><a href=\"#i-4\"><span class=\"toc_number toc_depth_1\">4</span> 本番環境では使わないこと！</a></li><li><a href=\"#i-5\"><span class=\"toc_number toc_depth_1\">5</span> おわり</a></li></ul></div>\n<h2><span id=\"i\">デバッグログを出力させる</span></h2>\n<p><span class=\"filename\">wp-config.php</span>にデバッグに関する定義を追記します。</p>\n<pre><span class=\"filename\">wp-config.php</span><span class=\"code-copy\" data-clipboard-target=\"#code-0\">コピー</span><code id=\"code-0\" class=\"php\">define('WP_DEBUG', true);\r\ndefine('WP_DEBUG_DISPLAY', false);\r\ndefine('WP_DEBUG_LOG', true);</code></pre>\n<ul>\n<li><code>define('WP_DEBUG', true);</code>・・・デバッグモードをオン！</li>\n<li><code>define('WP_DEBUG_DISPLAY', false);</code>・・・メッセージをディスプレイに表示させない</li>\n<li><code>define('WP_DEBUG_LOG', true);</code>・・・ログファイル（<span class=\"filename\">debug.log</span>）を出力</li>\n</ul>\n<h2><span id=\"i-2\">ログファイルを確認</span></h2>\n<p>先ほどの<code>define('WP_DEBUG_LOG', true);</code>にした状態で、サイトを更新（F5）してみてください。プラグインから出力されるログが大量に吐き出されるはずです。</p>\n<p>ログの出力場所は、<span class=\"folder\">/wp-content/</span>内になります。<span class=\"filename\">debug.log</span>の中身を見てみましょう！<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2018/08/functions-value.png\" alt=\"\" class=\"alignnone size-full wp-image-7968\" /></p>\n<p>（使用しているプラグインにもよるかと思いますが、めちゃくちゃ出力されます）</p>\n<h2><span id=\"i-3\">値をログに出力させる方法</span></h2>\n<p><code>error_log( 'hogehoge' );</code>と記載すれば、「hogehoge」という内容が<span class=\"filename\">debug.log</span>に表示されます。</p>\n<p>JavaScriptとで言うところの、<code>console.log();</code>的な感覚で使うといいかと思います。</p>\n<p>例えば、以下のような感じで記載すれば、、</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-1\">コピー</span><code id=\"code-1\" class=\"php\">$test = 'こんな感じ';\r\nerror_log( 'ログ出力テスト： ' . $test );</code></pre>\n<p>こんな感じで表示されるわけです！<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2018/08/functions-value2-700x68.png\" alt=\"\" class=\"alignnone size-medium wp-image-7969\" srcset=\"https://haniwaman.com/wp-content/uploads/2018/08/functions-value2-700x68.png 700w, https://haniwaman.com/wp-content/uploads/2018/08/functions-value2-768x75.png 768w, https://haniwaman.com/wp-content/uploads/2018/08/functions-value2.png 964w\" sizes=\"(max-width: 700px) 100vw, 700px\" /></p>\n<h3><span id=\"var_dump\"><code>var_dump();</code>を表示させる方法</span></h3>\n<p>「個別の値を出すなんて面倒！<code>var_dump();</code>で一気に見たい！」という声もあるかと思います。</p>\n<p>そういったときは以下のような記述をしてみましょう。これでWordPressのグローバル変数系の大量の値も取ってこれるかと思います。</p>\n<pre><span class=\"code-copy\" data-clipboard-target=\"#code-2\">コピー</span><code id=\"code-2\" class=\"php\">$dump = array( 'one' => 1, 'two' => 2, 'three' => 3 );\r\nob_start();\r\nvar_dump( $dump );\r\n$test = ob_get_contents();\r\nob_end_clean();\r\nerror_log( 'ログ出力テスト： ' . $test );</code></pre>\n<p>出力結果はこんな感じです。<br />\n<img src=\"https://haniwaman.com/wp-content/uploads/2018/08/functions-value3.png\" alt=\"\" class=\"alignnone size-full wp-image-7972\" /></p>\n<h2><span id=\"i-4\">本番環境では使わないこと！</span></h2>\n<p>使ってみると分かりますが、自分が出力させたコード以外にもめちゃくちゃ多くのログが吐き出されます。</p>\n<p>運用を続けるだけでも、ログファイルがどんどん肥大化していくので、基本は開発環境で使いましょう。本番環境で使うにしても<strong class=\"marker\">一時的に使う</strong>にとどめて、用が済んだらログファイルの削除とデバッグモードの記述を解除しておいてください。</p>\n<h2><span id=\"i-5\">おわり</span></h2><div class=\"matome\"><div class=\"matome-img\"><img src=\"https://haniwaman.com/wp-content/themes/hpcode/img/haniwa.png\" alt=\"\"></div><div class=\"matome-twitter\"><a href=\"https://twitter.com/haniwa008?ref_src=twsrc%5Etfw\" class=\"twitter-follow-button\" data-show-screen-name=\"false\" data-size=\"large\" data-lang=\"ja\" data-show-count=\"true\">Follow @haniwa008</a><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></div></div><!-- /matome -->\n<p>functions.phpなどの値を画面に表示させずに確認する方法でした。</p>\n<p><strong>この変数には今なんの値が入ってるんだあああぁ、、</strong>って目隠し状態で時間をかけるよりも、ログに出力させてスマートに対応していきましょう！</p>\n","date":"August 02, 2018","categories":[{"name":"WordPress","slug":"wordpress"}],"tags":null,"author":{"name":"はにわまん","slug":"haniwaman"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"b7bde500-f3af-53a7-b831-08e668a287f5"}}}